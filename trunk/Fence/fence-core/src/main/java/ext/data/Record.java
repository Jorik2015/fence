package ext.data;

import javax.el.ValueExpression;
import com.abner.fence.annotation.*;
import com.abner.fence.commons.Enums.*;
import com.abner.fence.component.*;

import javax.faces.component.FacesComponent;
import javax.faces.component.UIComponent;
import javax.faces.component.UIOutput;
import javax.faces.context.FacesContext;
import javax.faces.render.Renderer;
import ext.*;
import ext.dd.*;
import ext.util.*;
import ext.data.*;
import ext.grid.*;
import ext.form.*;
import ext.tree.*;
import ext.layout.*;
import ext.menu.*;
import java.util.*;
import ext.form.Action;
import java.util.Date;

/**
 * <?xml version="1.0" encoding="UTF-8" standalone="no"?>
<div class="description">
    <p>Instances of this class encapsulate both Record 
    <em>definition</em> information, and Record 
    <em>value</em> information for use in 
    <a ext:cls="Ext.data.Store" href="output/Ext.data.Store.html">Ext.data.Store</a> objects, or any
    code which needs to access Records cached in an 
    <a ext:cls="Ext.data.Store" href="output/Ext.data.Store.html">Ext.data.Store</a> object.</p>
    <p>Constructors for this class are generated by passing an
    Array of field definition objects to 
    <a ext:cls="Ext.data.Record" ext:member="create" href="output/Ext.data.Record.html#Ext.data.Record-create">create</a>.
    Instances are usually only created by 
    <a ext:cls="Ext.data.Reader" href="output/Ext.data.Reader.html">Ext.data.Reader</a> implementations
    when processing unformatted data objects.</p>
    <p>Note that an instance of a Record class may only belong to
    one 
    <a ext:cls="Ext.data.Store" href="output/Ext.data.Store.html">Store</a> at a time. In order to copy
    data from one Store to another, use the 
    <a ext:cls="Ext.data.Record" ext:member="copy" href="output/Ext.data.Record.html#Ext.data.Record-copy">copy</a> method to
    create an exact copy of the Record, and insert the new instance
    into the other Store.</p>
    <p>When serializing a Record for submission to the server, be
    aware that it contains many private properties, and also a
    reference to its owning Store which in turn holds references to
    its Records. This means that a whole Record may not be encoded
    using 
    <a ext:cls="Ext.util.JSON.encode" href="output/Ext.util.JSON.encode.html">Ext.util.JSON.encode</a>.
    Instead, use the 
    <code>
      <a ext:cls="Ext.data.Record" ext:member="data" href="output/Ext.data.Record.html#Ext.data.Record-data">data</a>
    </code> and 
    <code>
      <a ext:cls="Ext.data.Record" ext:member="id" href="output/Ext.data.Record.html#Ext.data.Record-id">id</a>
    </code> properties.</p>
    <p>Record objects generated by this constructor inherit all the
    methods of Ext.data.Record listed below.</p>
  </div>

 */

@InstanceOf("Ext.data.Record")

@FacesComponent(value = "Ext.data.Record")
public class Record extends ExtComponent {
	public static final String COMPONENT_FAMILY = "Ext.data.Record";

	/**
	 * <p>
	 * Create a new {@link Ext.data.Record} instance with default property values.
	 * </p>
	 */
	public Record() {
		super();
		this.setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}
	
	    
    @Override
	public String getDefaultEventName() {
		return super.getDefaultEventName();
	}

	@Override
	public Collection<String> getEventNames() {
		Collection<String> superEvent = super.getEventNames();
				return superEvent;
	}
}
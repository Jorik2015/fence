package ext.direct;

import javax.el.ValueExpression;
import com.abner.fence.annotation.*;
import com.abner.fence.commons.Enums.*;
import com.abner.fence.component.*;

import javax.faces.component.FacesComponent;
import javax.faces.component.UIComponent;
import javax.faces.component.UIOutput;
import javax.faces.context.FacesContext;
import javax.faces.render.Renderer;
import ext.*;
import ext.dd.*;
import ext.util.*;
import ext.data.*;
import ext.grid.*;
import ext.form.*;
import ext.tree.*;
import ext.layout.*;
import ext.menu.*;
import java.util.*;
import ext.form.Action;
import java.util.Date;

/**
 * <?xml version="1.0" encoding="UTF-8" standalone="no"?>
<div class="description">
    <p>Provides for repetitive polling of the server at distinct 
    <a ext:cls="Ext.direct.PollingProvider" ext:member="interval" href="output/Ext.direct.PollingProvider.html#Ext.direct.PollingProvider-interval">intervals</a>. The initial
    request for data originates from the client, and then is
    responded to by the server.</p>
    <p>All configurations for the PollingProvider should be
    generated by the server-side API portion of the Ext.Direct
    stack.</p>
    <p>An instance of PollingProvider may be created directly via
    the new keyword or by simply specifying 
    <tt>type = 'polling'</tt>. For example:</p>
<pre>
<code>
<b>var</b> pollA = 
<b>new</b> Ext.direct.PollingProvider({
    type:
<em>'polling'</em>,
    url: 
<em>'php/pollA.php'</em>,
});
Ext.Direct.addProvider(pollA);
pollA.disconnect();

Ext.Direct.addProvider(
    {
        type:
<em>'polling'</em>,
        url: 
<em>'php/pollB.php'</em>,
        id: 
<em>'pollB-provider'</em>
    }
);
<b>var</b> pollB = Ext.Direct.getProvider(
<em>'pollB-provider'</em>);</code>
    </pre>
  </div>

 */

@InstanceOf("Ext.direct.PollingProvider")

@FacesComponent(value = "Ext.direct.PollingProvider")
public class PollingProvider extends JsonProvider {
	public static final String COMPONENT_FAMILY = "Ext.direct.PollingProvider";

	/**
	 * <p>
	 * Create a new {@link Ext.direct.PollingProvider} instance with default property values.
	 * </p>
	 */
	public PollingProvider() {
		super();
		this.setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}
		enum PropertyKeys {
			baseParams
			,interval
			,priority
			,url
		;
		String toString;

		PropertyKeys(String toString) {
			this.toString = toString;
		}

		PropertyKeys() {
		}

		public String toString() {
			return ((toString != null) ? toString : super.toString());
		}
	}
	
		/*
	 *
        
        
          baseParams
         : Object
        An object containing properties which
        are to be sent as parameters on every polling
        request
	 */
	@ClientConfig(JsonMode.Object)

	public Object getBaseParams () {
		return (Object) getStateHelper().eval(PropertyKeys.baseParams);
	}

	/**
	 * <p>
	 * Set the value of the <code>baseParams</code> property.
	 * </p>
	 */
	public void setBaseParams ( Object   baseParams ) {
		getStateHelper().put(PropertyKeys.baseParams, baseParams);
		handleAttribute("baseParams", baseParams);
	}
    	/*
	 *
        
        
          interval
         : Number
        How often to poll the server-side in
        milliseconds (defaults to 
        3000 - every 3 seconds).
	 */
	
	public Integer getInterval () {
		return (Integer) getStateHelper().eval(PropertyKeys.interval);
	}

	/**
	 * <p>
	 * Set the value of the <code>interval</code> property.
	 * </p>
	 */
	public void setInterval ( Integer   interval ) {
		getStateHelper().put(PropertyKeys.interval, interval);
		handleAttribute("interval", interval);
	}
    	/*
	 *
        
        
          priority
         : Number
        Priority of the request (defaults to 
        3). See 
        Ext.direct.Provider.priority.
	 */
	
	public Integer getPriority () {
		return (Integer) getStateHelper().eval(PropertyKeys.priority);
	}

	/**
	 * <p>
	 * Set the value of the <code>priority</code> property.
	 * </p>
	 */
	public void setPriority ( Integer   priority ) {
		getStateHelper().put(PropertyKeys.priority, priority);
		handleAttribute("priority", priority);
	}
    	/*
	 *<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<div class="long">The url which the PollingProvider
          should contact with each request. This can also be an
          imported Ext.Direct method which will accept the
          baseParams as its only argument.</div>

	 */
	
	public String getUrl () {
		return (String) getStateHelper().eval(PropertyKeys.url);
	}

	/**
	 * <p>
	 * Set the value of the <code>url</code> property.
	 * </p>
	 */
	public void setUrl ( String   url ) {
		getStateHelper().put(PropertyKeys.url, url);
		handleAttribute("url", url);
	}
        
    @Override
	public String getDefaultEventName() {
		return super.getDefaultEventName();
	}

	@Override
	public Collection<String> getEventNames() {
		Collection<String> superEvent = super.getEventNames();
				superEvent.addAll(Arrays.asList(
					 "beforepoll"
					, "poll"
				));
				return superEvent;
	}
}
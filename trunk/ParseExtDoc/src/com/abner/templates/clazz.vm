package ${ext.pk};

import javax.el.ValueExpression;
import com.abner.fence.annotation.*;
import com.abner.fence.commons.Enums.*;
import com.abner.fence.component.*;

import javax.faces.component.FacesComponent;
import javax.faces.component.UIComponent;
import javax.faces.component.UIOutput;
import javax.faces.context.FacesContext;
import javax.faces.render.Renderer;
import ext.*;
import ext.dd.*;
import ext.util.*;
import ext.data.*;
import ext.grid.*;
import ext.form.*;
import ext.tree.*;
import ext.layout.*;
import ext.menu.*;
import java.util.*;
#if($ext.pk != "ext" and $ext.clazz != "Action")
import ext.form.Action;
#end
import java.util.Date;

/**
 * ${ext.commonts}
 */
${ext.xtype}
#if($ext.layout != "")
${ext.layout}
#end
@InstanceOf("${ext.instanceOf}")
${ext.mode}
@FacesComponent(value = "${ext.instanceOf}")
public class ${ext.clazz} extends ${ext.extend} {
	public static final String COMPONENT_FAMILY = "${ext.instanceOf}";

	/**
	 * <p>
	 * Create a new {@link ${ext.instanceOf}} instance with default property values.
	 * </p>
	 */
	public ${ext.clazz}() {
		super();
		this.setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}
	#if(!$ext.configs.isEmpty())
	enum PropertyKeys {
	#foreach( $cfg in $ext.configs)
		#if( $velocityCount > 1 ),#end$cfg.name
	#end
	;
		String toString;

		PropertyKeys(String toString) {
			this.toString = toString;
		}

		PropertyKeys() {
		}

		public String toString() {
			return ((toString != null) ? toString : super.toString());
		}
	}
	#end

	#foreach( $cfg in $ext.configs) 
	/*
	 *$cfg.commonts
	 */
	$cfg.clientConfig
	public $cfg.type get$cfg.upname () {
		return ($cfg.type) getStateHelper().eval(PropertyKeys.$cfg.name);
	}

	/**
	 * <p>
	 * Set the value of the <code>$cfg.name</code> property.
	 * </p>
	 */
	public void set$cfg.upname ( $cfg.type   $cfg.name ) {
		getStateHelper().put(PropertyKeys.$cfg.name, $cfg.name);
		handleAttribute("$cfg.name", $cfg.name);
	}
    #end
    
    @Override
	public String getDefaultEventName() {
		return super.getDefaultEventName();
	}

	@Override
	public Collection<String> getEventNames() {
		Collection<String> superEvent = super.getEventNames();
		#if(!$ext.events.isEmpty())
		superEvent.addAll(Arrays.asList(
		#foreach( $evt in $ext.events)
			#if( $velocityCount > 1 ),#end "$evt"
		#end
		));
		#end
		return superEvent;
	}
}
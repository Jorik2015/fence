package ext.grid;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;
import ext.base.ExtOutput;

/**
 *Note:This java code is auto generated by abner,do not edit it. This is a
 * utility class that can be passed into a <a
 * href="output/Ext.grid.ColumnModel.html"
 * ext:cls="Ext.grid.ColumnModel">Ext.grid.ColumnModel</a> as a column config
 * that provides an automatic row numbering column.<br>
 * Usage:<br>
 * 
 * 
 * <pre>
 * &lt;code&gt;&lt;i&gt;// This is a typical column config &lt;b&gt;with&lt;/b&gt; the first column providing row numbers&lt;/i&gt;
 *  &lt;b&gt;var&lt;/b&gt; colModel = &lt;b&gt;new&lt;/b&gt; Ext.grid.ColumnModel([
 *     &lt;b&gt;new&lt;/b&gt; Ext.grid.RowNumberer(),
 *     {header: &lt;em&gt;&quot;Name&quot;&lt;/em&gt;, width: 80, sortable: true},
 *     {header: &lt;em&gt;&quot;Code&quot;&lt;/em&gt;, width: 50, sortable: true},
 *     {header: &lt;em&gt;&quot;Description&quot;&lt;/em&gt;, width: 200, sortable: true}
 *  ]);&lt;/code&gt;
 * </pre>
 */
@InstanceOf("Ext.grid.RowNumberer")
@ParseConfigMode(ui = false, name = "columns", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Var)
public class RowNumberer extends ExtOutput {
	public static final String COMPONENT_TYPE = "Ext.grid.RowNumberer";
	public static final String COMPONENT_FAMILY = "Ext.grid.RowNumberer";

	/**
	 * <p>
	 * Create a new {@link RowNumberer} instance with default property values.
	 * </p>
	 */
	public RowNumberer() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private String header;

	/**
	 * Any valid text or HTML fragment to display inthe header cell for the row
	 * number column (defaults to '').
	 */
	public String getHeader() {
		if (null != this.header) {
			return this.header;
		}
		ValueExpression _ve = getValueExpression("header");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>header</code> property.
	 * </p>
	 */
	public void setHeader(String header) {
		this.header = header;
		this.handleConfig("header", header);
	}

	private Integer width;

	/**
	 * The default width in pixels of the row numbercolumn (defaults to 23).
	 */
	public Integer getWidth() {
		if (null != this.width) {
			return this.width;
		}
		ValueExpression _ve = getValueExpression("width");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>width</code> property.
	 * </p>
	 */
	public void setWidth(Integer width) {
		this.width = width;
		this.handleConfig("width", width);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[3];
		}
		_values[0] = super.saveState(_context);
		_values[1] = header;
		_values[2] = width;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.header = (String) _values[1];
		this.handleConfig("header", this.header);
		this.width = (Integer) _values[2];
		this.handleConfig("width", this.width);

	}
}
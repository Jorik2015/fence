package ext.grid;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;

/**
 *Note:This java code is auto generated by abner,do not edit it. A custom
 * selection model that renders a column of checkboxes that can be toggled to
 * select or deselect rows.
 */
@InstanceOf("Ext.grid.CheckboxSelectionModel")
@ParseConfigMode(name = "selModel", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Var)
public class CheckboxSelectionModel extends RowSelectionModel {
	public static final String COMPONENT_TYPE = "Ext.grid.CheckboxSelectionModel";
	public static final String COMPONENT_FAMILY = "Ext.grid.CheckboxSelectionModel";

	/**
	 * <p>
	 * Create a new {@link CheckboxSelectionModel} instance with default
	 * property values.
	 * </p>
	 */
	public CheckboxSelectionModel() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Boolean checkOnly;

	/**
	 * <tt>true</tt> if rows can only be selected byclicking on the checkbox
	 * column (defaults to <tt>false</tt>).
	 */
	public Boolean getCheckOnly() {
		if (null != this.checkOnly) {
			return this.checkOnly;
		}
		ValueExpression _ve = getValueExpression("checkOnly");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>checkOnly</code> property.
	 * </p>
	 */
	public void setCheckOnly(Boolean checkOnly) {
		this.checkOnly = checkOnly;
		this.handleConfig("checkOnly", checkOnly);
	}

	private String header;

	/**
	 * Any valid text or HTML fragment to display in theheader cell for the
	 * checkbox column. Defaults to:
	 * 
	 * <pre>
	 * &lt;code&gt;&lt;em&gt;'&lt;div class=&lt;/em&gt;&quot;x-grid3-hd-checker&quot;&lt;/code&gt;&gt;&amp;#160;&lt;/div&gt;'
	 * </pre>
	 * 
	 * The default CSS class of <tt>'x-grid3-hd-checker'</tt> displays a checkbox in the header and
	 * provides support for automatic check all/none behavior on header click.
	 * This string can be replaced by any valid HTML fragment, including a
	 * simple text string (e.g., <tt>'Select Rows'</tt>), but the automatic check all/none
	 * behavior will only work if the <tt>'x-grid3-hd-checker'</tt> class is supplied.
	 */
	public String getHeader() {
		if (null != this.header) {
			return this.header;
		}
		ValueExpression _ve = getValueExpression("header");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>header</code> property.
	 * </p>
	 */
	public void setHeader(String header) {
		this.header = header;
		this.handleConfig("header", header);
	}

	private Boolean sortable;

	/**
	 * <tt>true</tt> if the checkbox column is sortable(defaults to
	 * <tt>false</tt>).
	 */
	public Boolean getSortable() {
		if (null != this.sortable) {
			return this.sortable;
		}
		ValueExpression _ve = getValueExpression("sortable");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>sortable</code> property.
	 * </p>
	 */
	public void setSortable(Boolean sortable) {
		this.sortable = sortable;
		this.handleConfig("sortable", sortable);
	}

	private Integer width;

	/**
	 * The default width in pixels of the checkboxcolumn (defaults to
	 * <tt>20</tt>).
	 */
	public Integer getWidth() {
		if (null != this.width) {
			return this.width;
		}
		ValueExpression _ve = getValueExpression("width");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>width</code> property.
	 * </p>
	 */
	public void setWidth(Integer width) {
		this.width = width;
		this.handleConfig("width", width);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[5];
		}
		_values[0] = super.saveState(_context);
		_values[1] = checkOnly;
		_values[2] = header;
		_values[3] = sortable;
		_values[4] = width;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.checkOnly = (Boolean) _values[1];
		this.handleConfig("checkOnly", this.checkOnly);
		this.header = (String) _values[2];
		this.handleConfig("header", this.header);
		this.sortable = (Boolean) _values[3];
		this.handleConfig("sortable", this.sortable);
		this.width = (Integer) _values[4];
		this.handleConfig("width", this.width);

	}
}
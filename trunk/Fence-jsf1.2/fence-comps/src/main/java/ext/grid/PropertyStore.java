package ext.grid;

import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;
import ext.util.Observable;

/**
 *Note:This java code is auto generated by abner,do not edit it. A custom
 * wrapper for the <a href="output/Ext.grid.PropertyGrid.html"
 * ext:cls="Ext.grid.PropertyGrid">Ext.grid.PropertyGrid</a>'s <a
 * href="output/Ext.data.Store.html"
 * ext:cls="Ext.data.Store">Ext.data.Store</a>. This class handles the mapping
 * between the custom data source objects supported by the grid and the <a
 * href="output/Ext.grid.PropertyRecord.html"
 * ext:cls="Ext.grid.PropertyRecord">Ext.grid.PropertyRecord</a> format required
 * for compatibility with the underlying store. Generally this class should not
 * need to be used directly -- the grid's data should be accessed from the
 * underlying store via the <a
 * href="output/Ext.grid.PropertyStore.html#Ext.grid.PropertyStore-store"
 * ext:member="store" ext:cls="Ext.grid.PropertyStore">store</a> property.
 */
@InstanceOf("Ext.grid.PropertyStore")
@ParseConfigMode(ui = false, name = "store", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Var)
public class PropertyStore extends Observable {
	public static final String COMPONENT_TYPE = "Ext.grid.PropertyStore";
	public static final String COMPONENT_FAMILY = "Ext.grid.PropertyStore";

	/**
	 * <p>
	 * Create a new {@link PropertyStore} instance with default property values.
	 * </p>
	 */
	public PropertyStore() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[1];
		}
		_values[0] = super.saveState(_context);

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);

	}
}
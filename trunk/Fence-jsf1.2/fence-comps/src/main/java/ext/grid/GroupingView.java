package ext.grid;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;

/**
 *Note:This java code is auto generated by abner,do not edit it. Adds the
 * ability for single level grouping to the grid. A <a
 * href="output/Ext.data.GroupingStore.html"
 * ext:cls="Ext.data.GroupingStore">GroupingStore</a> must be used to enable
 * grouping. Some grouping characteristics may also be configured at the <a
 * href="output/Ext.grid.Column.html" ext:cls="Ext.grid.Column">Column level</a>
 * <div class="mdetail-params">
 * <ul>
 * <li>
 * 
 * <code><a href="output/Ext.grid.Column.html#Ext.grid.Column-emptyGroupText" ext:member="emptyGroupText" ext:cls="Ext.grid.Column">emptyGroupText</a></code>
 * </li>
 * 
 * <li>
 * <code><code><a href="output/Ext.grid.Column.html#Ext.grid.Column-groupable" ext:member="groupable" ext:cls="Ext.grid.Column">groupable</a></code>
 * </code></li>
 * 
 * <li>
 * <code><code><a href="output/Ext.grid.Column.html#Ext.grid.Column-groupName" ext:member="groupName" ext:cls="Ext.grid.Column">groupName</a></code>
 * </code></li>
 * 
 * <li>
 * <code><code><a href="output/Ext.grid.Column.html#Ext.grid.Column-groupRender" ext:member="groupRender" ext:cls="Ext.grid.Column">groupRender</a></code>
 * </code></li>
 * </ul>
 * </div>
 * 
 * <p>
 * <code>Sample usage:</code>
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;code&gt;&lt;b&gt;var&lt;/b&gt; grid = &lt;b&gt;new&lt;/b&gt; Ext.grid.GridPanel({
 *     &lt;i&gt;// A groupingStore is required &lt;b&gt;for&lt;/b&gt; a GroupingView
 * &lt;/i&gt;
 *     store: &lt;b&gt;new&lt;/b&gt; &lt;a href=&quot;output/Ext.data.GroupingStore.html&quot; ext:cls=&quot;Ext.data.GroupingStore&quot;&gt;Ext.data.GroupingStore&lt;/a&gt;({
 *         autoDestroy: true,
 *         reader: reader,
 *         data: xg.dummyData,
 *         sortInfo: {field: &lt;em&gt;'company'&lt;/em&gt;, direction: &lt;em&gt;'ASC'&lt;/em&gt;},
 *         &lt;a href=&quot;output/Ext.data.GroupingStore.html#Ext.data.GroupingStore-groupOnSort&quot; ext:member=&quot;groupOnSort&quot; ext:cls=&quot;Ext.data.GroupingStore&quot;&gt;groupOnSort&lt;/a&gt;: true,
 *         &lt;a href=&quot;output/Ext.data.GroupingStore.html#Ext.data.GroupingStore-remoteGroup&quot; ext:member=&quot;remoteGroup&quot; ext:cls=&quot;Ext.data.GroupingStore&quot;&gt;remoteGroup&lt;/a&gt;: true,
 *         &lt;a href=&quot;output/Ext.data.GroupingStore.html#Ext.data.GroupingStore-groupField&quot; ext:member=&quot;groupField&quot; ext:cls=&quot;Ext.data.GroupingStore&quot;&gt;groupField&lt;/a&gt;: &lt;em&gt;'industry'&lt;/em&gt;
 *     }),
 *     colModel: &lt;b&gt;new&lt;/b&gt; &lt;a href=&quot;output/Ext.grid.ColumnModel.html&quot; ext:cls=&quot;Ext.grid.ColumnModel&quot;&gt;Ext.grid.ColumnModel&lt;/a&gt;({
 *         columns:[
 *             {id:&lt;em&gt;'company'&lt;/em&gt;,header: &lt;em&gt;'Company'&lt;/em&gt;, width: 60, dataIndex: &lt;em&gt;'company'&lt;/em&gt;},
 *             &lt;i&gt;// &lt;a href=&quot;output/Ext.grid.Column.html#Ext.grid.Column-groupable&quot; ext:member=&quot;groupable&quot; ext:cls=&quot;Ext.grid.Column&quot;&gt;groupable&lt;/a&gt;, &lt;a href=&quot;output/Ext.grid.Column.html#Ext.grid.Column-groupName&quot; ext:member=&quot;groupName&quot; ext:cls=&quot;Ext.grid.Column&quot;&gt;groupName&lt;/a&gt;, &lt;a href=&quot;output/Ext.grid.Column.html#Ext.grid.Column-groupRender&quot; ext:member=&quot;groupRender&quot; ext:cls=&quot;Ext.grid.Column&quot;&gt;groupRender&lt;/a&gt; are also configurable at column level
 * &lt;/i&gt;
 *             {header: &lt;em&gt;'Price'&lt;/em&gt;, renderer: Ext.util.Format.usMoney, dataIndex: &lt;em&gt;'price'&lt;/em&gt;, &lt;a href=&quot;output/Ext.grid.Column.html#Ext.grid.Column-groupable&quot; ext:member=&quot;groupable&quot; ext:cls=&quot;Ext.grid.Column&quot;&gt;groupable&lt;/a&gt;: false},
 *             {header: &lt;em&gt;'Change'&lt;/em&gt;, dataIndex: &lt;em&gt;'change'&lt;/em&gt;, renderer: Ext.util.Format.usMoney},
 *             {header: &lt;em&gt;'Industry'&lt;/em&gt;, dataIndex: &lt;em&gt;'industry'&lt;/em&gt;},
 *             {header: &lt;em&gt;'Last Updated'&lt;/em&gt;, renderer: Ext.util.Format.dateRenderer(&lt;em&gt;'m/d/Y'&lt;/em&gt;), dataIndex: &lt;em&gt;'lastChange'&lt;/em&gt;}
 *         ],
 *         defaults: {
 *             sortable: true,
 *             menuDisabled: false,
 *             width: 20
 *         }
 *     }),
 * 
 *     view: &lt;b&gt;new&lt;/b&gt; Ext.grid.GroupingView({
 *         &lt;a href=&quot;output/Ext.grid.GridView.html#Ext.grid.GridView-forceFit&quot; ext:member=&quot;forceFit&quot; ext:cls=&quot;Ext.grid.GridView&quot;&gt;forceFit&lt;/a&gt;: true,
 *         &lt;i&gt;// custom grouping text template to display the number of items per group
 * &lt;/i&gt;
 *         &lt;a href=&quot;output/Ext.grid.GroupingView.html#Ext.grid.GroupingView-groupTextTpl&quot; ext:member=&quot;groupTextTpl&quot; ext:cls=&quot;Ext.grid.GroupingView&quot;&gt;groupTextTpl&lt;/a&gt;: &lt;em&gt;'{text} ({[values.rs.length]} {[values.rs.length &gt; 1 ?&lt;/em&gt; &quot;Items&quot;&lt;/code&gt; : &lt;em&gt;&quot;Item&quot;&lt;/em&gt;]})'&lt;/code&gt;
 *     }),
 * 
 *     frame:true,
 *     width: 700,
 *     height: 450,
 *     collapsible: true,
 *     animCollapse: false,
 *     title: &lt;em&gt;'Grouping Example'&lt;/em&gt;,
 *     iconCls: &lt;em&gt;'icon-grid'&lt;/em&gt;,
 *     renderTo: document.body
 * });
 * </pre>
 */
@InstanceOf("Ext.grid.GroupingView")
@ParseConfigMode(ui = false, name = "view", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Var)
public class GroupingView extends GridView {
	public static final String COMPONENT_TYPE = "Ext.grid.GroupingView";
	public static final String COMPONENT_FAMILY = "Ext.grid.GroupingView";

	/**
	 * <p>
	 * Create a new {@link GroupingView} instance with default property values.
	 * </p>
	 */
	public GroupingView() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private String emptyGroupText;

	/**
	 * The text to display when there is an empty groupvalue (defaults to <tt>'(None)'</tt>).
	 * May also be specified per column, see <a
	 * href="output/Ext.grid.Column.html"
	 * ext:cls="Ext.grid.Column">Ext.grid.Column</a>.<a
	 * href="output/Ext.grid.Column.html#Ext.grid.Column-emptyGroupText"
	 * ext:member="emptyGroupText" ext:cls="Ext.grid.Column">emptyGroupText</a>.
	 */
	public String getEmptyGroupText() {
		if (null != this.emptyGroupText) {
			return this.emptyGroupText;
		}
		ValueExpression _ve = getValueExpression("emptyGroupText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>emptyGroupText</code> property.
	 * </p>
	 */
	public void setEmptyGroupText(String emptyGroupText) {
		this.emptyGroupText = emptyGroupText;
		this.handleConfig("emptyGroupText", emptyGroupText);
	}

	private Boolean enableGrouping;

	/**
	 * <tt>false</tt> to disable grouping functionality(defaults to
	 * <tt>true</tt>)
	 */
	public Boolean getEnableGrouping() {
		if (null != this.enableGrouping) {
			return this.enableGrouping;
		}
		ValueExpression _ve = getValueExpression("enableGrouping");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>enableGrouping</code> property.
	 * </p>
	 */
	public void setEnableGrouping(Boolean enableGrouping) {
		this.enableGrouping = enableGrouping;
		this.handleConfig("enableGrouping", enableGrouping);
	}

	private Boolean enableGroupingMenu;

	/**
	 * <tt>true</tt> to enable the grouping control inthe column menu (defaults
	 * to <tt>true</tt>)
	 */
	public Boolean getEnableGroupingMenu() {
		if (null != this.enableGroupingMenu) {
			return this.enableGroupingMenu;
		}
		ValueExpression _ve = getValueExpression("enableGroupingMenu");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>enableGroupingMenu</code> property.
	 * </p>
	 */
	public void setEnableGroupingMenu(Boolean enableGroupingMenu) {
		this.enableGroupingMenu = enableGroupingMenu;
		this.handleConfig("enableGroupingMenu", enableGroupingMenu);
	}

	private Boolean enableNoGroups;

	/**
	 * <tt>true</tt> to allow the user to turn offgrouping (defaults to
	 * <tt>true</tt>)
	 */
	public Boolean getEnableNoGroups() {
		if (null != this.enableNoGroups) {
			return this.enableNoGroups;
		}
		ValueExpression _ve = getValueExpression("enableNoGroups");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>enableNoGroups</code> property.
	 * </p>
	 */
	public void setEnableNoGroups(Boolean enableNoGroups) {
		this.enableNoGroups = enableNoGroups;
		this.handleConfig("enableNoGroups", enableNoGroups);
	}

	private String groupByText;

	/**
	 * Text displayed in the grid header menu forgrouping by a column (defaults
	 * to 'Group By This Field').
	 */
	public String getGroupByText() {
		if (null != this.groupByText) {
			return this.groupByText;
		}
		ValueExpression _ve = getValueExpression("groupByText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>groupByText</code> property.
	 * </p>
	 */
	public void setGroupByText(String groupByText) {
		this.groupByText = groupByText;
		this.handleConfig("groupByText", groupByText);
	}

	private Object groupRenderer;

	/**
	 * This property must be configured in the <a
	 * href="output/Ext.grid.Column.html"
	 * ext:cls="Ext.grid.Column">Ext.grid.Column</a> for eachcolumn.
	 */
	@ClientConfig(JsonMode.Function)
	public Object getGroupRenderer() {
		if (null != this.groupRenderer) {
			return this.groupRenderer;
		}
		ValueExpression _ve = getValueExpression("groupRenderer");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>groupRenderer</code> property.
	 * </p>
	 */
	public void setGroupRenderer(Object groupRenderer) {
		this.groupRenderer = groupRenderer;
		this.handleConfig("groupRenderer", groupRenderer);
	}

	private String groupTextTpl;

	/**
	 * The template used to render the group header(defaults to <tt>'{text}'</tt>). This is
	 * used to format an object which contains the following properties:
	 * 
	 * <div class="mdetail-params">
	 * <ul>
	 * <li><b>group</b> : String
	 * 
	 * <p class="sub-desc">
	 * The <i>rendered</i> value of the group field. By default this is the
	 * unchanged value of the group field. If a
	 * 
	 * <tt><b><a href="output/Ext.grid.Column.html#Ext.grid.Column-groupRenderer" ext:member="groupRenderer" ext:cls="Ext.grid.Column">groupRenderer</a></b></tt>
	 * is specified, it is the result of a call to that function.
	 * </p>
	 * </li>
	 * 
	 * <li><b>gvalue</b> : Object
	 * 
	 * <p class="sub-desc">
	 * The <i>raw</i> value of the group field.
	 * </p>
	 * </li>
	 * 
	 * <li><b>text</b> : String
	 * 
	 * <p class="sub-desc">
	 * The configured header (as described in
	 * 
	 * <tt><a href="output/Ext.grid.GroupingView.html#Ext.grid.GroupingView-showGroupName" ext:member="showGroupName" ext:cls="Ext.grid.GroupingView">showGroupName</a>)</tt>
	 * if
	 * 
	 * <tt><a href="output/Ext.grid.GroupingView.html#Ext.grid.GroupingView-showGroupName" ext:member="showGroupName" ext:cls="Ext.grid.GroupingView">showGroupName</a></tt>
	 * is <tt>true</tt>) plus the <i>rendered</i> group field value.
	 * </p>
	 * </li>
	 * 
	 * <li><b>groupId</b> : String
	 * 
	 * <p class="sub-desc">
	 * A unique, generated ID which is applied to the View Element which
	 * contains the group.
	 * </p>
	 * </li>
	 * 
	 * <li><b>startRow</b> : Number
	 * 
	 * <p class="sub-desc">
	 * The row index of the Record which caused group change.
	 * </p>
	 * </li>
	 * 
	 * <li><b>rs</b> : Array
	 * 
	 * <p class="sub-desc">
	 * Contains a single element: The Record providing the data for the row
	 * which caused group change.
	 * </p>
	 * </li>
	 * 
	 * <li><b>cls</b> : String
	 * 
	 * <p class="sub-desc">
	 * The generated class name string to apply to the group header Element.
	 * </p>
	 * </li>
	 * 
	 * <li><b>style</b> : String
	 * 
	 * <p class="sub-desc">
	 * The inline style rules to apply to the group header Element.
	 * </p>
	 * </li>
	 * </ul>
	 * </div>
	 * 
	 * <br>
	 * <br>
	 * See <a href="output/Ext.XTemplate.html"
	 * ext:cls="Ext.XTemplate">Ext.XTemplate</a> for information on how to
	 * format data using a template. Possible usage:
	 * 
	 * <pre>
	 * &lt;code&gt;&lt;b&gt;var&lt;/b&gt; grid = &lt;b&gt;new&lt;/b&gt; Ext.grid.GridPanel({
	 *     ...
	 *     view: &lt;b&gt;new&lt;/b&gt; Ext.grid.GroupingView({
	 *         groupTextTpl: &lt;em&gt;'{text} ({[values.rs.length]} {[values.rs.length &gt; 1 ?&lt;/em&gt; &quot;Items&quot;&lt;/code&gt; : &lt;em&gt;&quot;Item&quot;&lt;/em&gt;]})'
	 *     }),
	 * });
	 * </pre>
	 */
	public String getGroupTextTpl() {
		if (null != this.groupTextTpl) {
			return this.groupTextTpl;
		}
		ValueExpression _ve = getValueExpression("groupTextTpl");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>groupTextTpl</code> property.
	 * </p>
	 */
	public void setGroupTextTpl(String groupTextTpl) {
		this.groupTextTpl = groupTextTpl;
		this.handleConfig("groupTextTpl", groupTextTpl);
	}

	private Boolean hideGroupedColumn;

	/**
	 * <tt>true</tt> to hide the column that iscurrently grouped (defaults to
	 * <tt>false</tt>)
	 */
	public Boolean getHideGroupedColumn() {
		if (null != this.hideGroupedColumn) {
			return this.hideGroupedColumn;
		}
		ValueExpression _ve = getValueExpression("hideGroupedColumn");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>hideGroupedColumn</code> property.
	 * </p>
	 */
	public void setHideGroupedColumn(Boolean hideGroupedColumn) {
		this.hideGroupedColumn = hideGroupedColumn;
		this.handleConfig("hideGroupedColumn", hideGroupedColumn);
	}

	private Boolean ignoreAdd;

	/**
	 * <tt>true</tt> to skip refreshing the view whennew rows are added
	 * (defaults to <tt>false</tt>)
	 */
	public Boolean getIgnoreAdd() {
		if (null != this.ignoreAdd) {
			return this.ignoreAdd;
		}
		ValueExpression _ve = getValueExpression("ignoreAdd");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>ignoreAdd</code> property.
	 * </p>
	 */
	public void setIgnoreAdd(Boolean ignoreAdd) {
		this.ignoreAdd = ignoreAdd;
		this.handleConfig("ignoreAdd", ignoreAdd);
	}

	private Boolean showGroupName;

	/**
	 * If <tt>true</tt> will display a prefix plus a ':' before the group field
	 * value in the group header line. The prefix will consist of the
	 * 
	 * <tt><b><a href="output/Ext.grid.Column.html#Ext.grid.Column-groupName" ext:member="groupName" ext:cls="Ext.grid.Column">groupName</a></b></tt>
	 * (or the configured
	 * <tt><b><a href="output/Ext.grid.Column.html#Ext.grid.Column-header" ext:member="header" ext:cls="Ext.grid.Column">header</a></b></tt>
	 * if not provided) configured in the <a href="output/Ext.grid.Column.html"
	 * ext:cls="Ext.grid.Column">Ext.grid.Column</a> for each set of grouped
	 * rows (defaults to <tt>true</tt>).
	 */
	public Boolean getShowGroupName() {
		if (null != this.showGroupName) {
			return this.showGroupName;
		}
		ValueExpression _ve = getValueExpression("showGroupName");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>showGroupName</code> property.
	 * </p>
	 */
	public void setShowGroupName(Boolean showGroupName) {
		this.showGroupName = showGroupName;
		this.handleConfig("showGroupName", showGroupName);
	}

	private String showGroupsText;

	/**
	 * Text displayed in the grid header forenabling/disabling grouping
	 * (defaults to 'Show in Groups').
	 */
	public String getShowGroupsText() {
		if (null != this.showGroupsText) {
			return this.showGroupsText;
		}
		ValueExpression _ve = getValueExpression("showGroupsText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>showGroupsText</code> property.
	 * </p>
	 */
	public void setShowGroupsText(String showGroupsText) {
		this.showGroupsText = showGroupsText;
		this.handleConfig("showGroupsText", showGroupsText);
	}

	private Boolean startCollapsed;

	/**
	 * <tt>true</tt> to start all groups collapsed(defaults to <tt>false</tt>)
	 */
	public Boolean getStartCollapsed() {
		if (null != this.startCollapsed) {
			return this.startCollapsed;
		}
		ValueExpression _ve = getValueExpression("startCollapsed");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>startCollapsed</code> property.
	 * </p>
	 */
	public void setStartCollapsed(Boolean startCollapsed) {
		this.startCollapsed = startCollapsed;
		this.handleConfig("startCollapsed", startCollapsed);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[13];
		}
		_values[0] = super.saveState(_context);
		_values[1] = emptyGroupText;
		_values[2] = enableGrouping;
		_values[3] = enableGroupingMenu;
		_values[4] = enableNoGroups;
		_values[5] = groupByText;
		_values[6] = groupRenderer;
		_values[7] = groupTextTpl;
		_values[8] = hideGroupedColumn;
		_values[9] = ignoreAdd;
		_values[10] = showGroupName;
		_values[11] = showGroupsText;
		_values[12] = startCollapsed;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.emptyGroupText = (String) _values[1];
		this.handleConfig("emptyGroupText", this.emptyGroupText);
		this.enableGrouping = (Boolean) _values[2];
		this.handleConfig("enableGrouping", this.enableGrouping);
		this.enableGroupingMenu = (Boolean) _values[3];
		this.handleConfig("enableGroupingMenu", this.enableGroupingMenu);
		this.enableNoGroups = (Boolean) _values[4];
		this.handleConfig("enableNoGroups", this.enableNoGroups);
		this.groupByText = (String) _values[5];
		this.handleConfig("groupByText", this.groupByText);
		this.groupRenderer = (Object) _values[6];
		this.handleConfig("groupRenderer", this.groupRenderer);
		this.groupTextTpl = (String) _values[7];
		this.handleConfig("groupTextTpl", this.groupTextTpl);
		this.hideGroupedColumn = (Boolean) _values[8];
		this.handleConfig("hideGroupedColumn", this.hideGroupedColumn);
		this.ignoreAdd = (Boolean) _values[9];
		this.handleConfig("ignoreAdd", this.ignoreAdd);
		this.showGroupName = (Boolean) _values[10];
		this.handleConfig("showGroupName", this.showGroupName);
		this.showGroupsText = (String) _values[11];
		this.handleConfig("showGroupsText", this.showGroupsText);
		this.startCollapsed = (Boolean) _values[12];
		this.handleConfig("startCollapsed", this.startCollapsed);

	}
}
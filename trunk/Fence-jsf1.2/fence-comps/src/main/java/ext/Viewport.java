package ext;

import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.XType;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * A specialized container representing the viewable application area (the
 * browser viewport).
 * </p>
 * 
 * <p>
 * The Viewport renders itself to the document body, and automatically sizes
 * itself to the size of the browser viewport and manages window resizing. There
 * may only be one Viewport created in a page. Inner layouts are available by
 * virtue of the fact that all <a href="output/Ext.Panel.html"
 * ext:cls="Ext.Panel">Panel</a>s added to the Viewport, either through its <a
 * href="output/Ext.Viewport.html#Ext.Viewport-items" ext:member="items"
 * ext:cls="Ext.Viewport">items</a>, or through the items, or the <a
 * href="output/Ext.Viewport.html#Ext.Viewport-add" ext:member="add"
 * ext:cls="Ext.Viewport">add</a> method of any of its child Panels may
 * themselves have a layout.
 * </p>
 * 
 * <p>
 * The Viewport does not provide scrolling, so child Panels within the Viewport
 * should provide for scrolling if needed using the <a
 * href="output/Ext.Viewport.html#Ext.Viewport-autoScroll"
 * ext:member="autoScroll" ext:cls="Ext.Viewport">autoScroll</a> config.
 * </p>
 * 
 * <p>
 * An example showing a classic application border layout:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;new&lt;/b&gt; Ext.Viewport({
 *     layout: &lt;em&gt;'border'&lt;/em&gt;,
 *     items: [{
 *         region: &lt;em&gt;'north'&lt;/em&gt;,
 *         html: &lt;em&gt;'&lt;h1 class=&lt;/em&gt;&quot;x-panel-header&quot;&lt;/code&gt;&gt;Page Title&lt;/h1&gt;',
 *         autoHeight: true,
 *         border: false,
 *         margins: &lt;em&gt;'0 0 5 0'&lt;/em&gt;
 *     }, {
 *         region: &lt;em&gt;'west'&lt;/em&gt;,
 *         collapsible: true,
 *         title: &lt;em&gt;'Navigation'&lt;/em&gt;,
 *         width: 200
 *         &lt;i&gt;// the west region might typically utilize a &lt;a href=&quot;output/Ext.tree.TreePanel.html&quot; ext:cls=&quot;Ext.tree.TreePanel&quot;&gt;TreePanel&lt;/a&gt; or a Panel &lt;b&gt;with&lt;/b&gt; &lt;a href=&quot;output/Ext.layout.AccordionLayout.html&quot; ext:cls=&quot;Ext.layout.AccordionLayout&quot;&gt;Accordion layout&lt;/a&gt; 
 * &lt;/i&gt;
 *     }, {
 *         region: &lt;em&gt;'south'&lt;/em&gt;,
 *         title: &lt;em&gt;'Title &lt;b&gt;for&lt;/b&gt; Panel'&lt;/em&gt;,
 *         collapsible: true,
 *         html: &lt;em&gt;'Information goes here'&lt;/em&gt;,
 *         split: true,
 *         height: 100,
 *         minHeight: 100
 *     }, {
 *         region: &lt;em&gt;'east'&lt;/em&gt;,
 *         title: &lt;em&gt;'Title &lt;b&gt;for&lt;/b&gt; the Grid Panel'&lt;/em&gt;,
 *         collapsible: true,
 *         split: true,
 *         width: 200,
 *         xtype: &lt;em&gt;'grid'&lt;/em&gt;,
 *         &lt;i&gt;// remaining grid configuration not shown ...
 * &lt;/i&gt;
 *         &lt;i&gt;// notice that the GridPanel is added directly as the region
 * &lt;/i&gt;
 *         &lt;i&gt;// it is not &lt;em&gt;&quot;overnested&quot;&lt;/em&gt; inside another Panel
 * &lt;/i&gt;
 *     }, {
 *         region: &lt;em&gt;'center'&lt;/em&gt;,
 *         xtype: &lt;em&gt;'tabpanel'&lt;/em&gt;, &lt;i&gt;// TabPanel itself has no title
 * &lt;/i&gt;
 *         items: {
 *             title: &lt;em&gt;'Default Tab'&lt;/em&gt;,
 *             html: &lt;em&gt;'The first tab\'&lt;/em&gt;s content. Others may be added dynamically&lt;em&gt;'
 *         }
 *     }]
 * });&lt;/em&gt;
 * </pre>
 */
@XType("viewport")
@InstanceOf("Ext.Viewport")
public class Viewport extends Container {
	public static final String COMPONENT_TYPE = "Ext.Viewport";
	public static final String COMPONENT_FAMILY = "Ext.Viewport";

	/**
	 * <p>
	 * Create a new {@link Viewport} instance with default property values.
	 * </p>
	 */
	public Viewport() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[1];
		}
		_values[0] = super.saveState(_context);

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);

	}
}
package ext.form;

import java.util.Date;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.XType;

/**
 *Note:This java code is auto generated by abner,do not edit it. Provides a
 * date input field with a <a href="output/Ext.DatePicker.html"
 * ext:cls="Ext.DatePicker">Ext.DatePicker</a> dropdown and automatic date
 * validation.
 */
@XType("datefield")
@InstanceOf("Ext.form.DateField")
public class DateField extends TriggerField {
	public static final String COMPONENT_TYPE = "Ext.form.DateField";
	public static final String COMPONENT_FAMILY = "Ext.form.DateField";

	/**
	 * <p>
	 * Create a new {@link DateField} instance with default property values.
	 * </p>
	 */
	public DateField() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private String altFormats;

	/**
	 * Multiple date formats separated by "<tt>|</tt>"to try when parsing a user
	 * input value and it does not match the defined format (defaults to <tt>'m/d/Y|n/j/Y|n/j/y|m/j/y|n/d/y|m/j/Y|n/d/Y|m-d-y|m-d-Y|m/d|m-d|md|mdy|mdY|d|Y-m-d'</tt>).
	 */
	public String getAltFormats() {
		if (null != this.altFormats) {
			return this.altFormats;
		}
		ValueExpression _ve = getValueExpression("altFormats");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>altFormats</code> property.
	 * </p>
	 */
	public void setAltFormats(String altFormats) {
		this.altFormats = altFormats;
		this.handleConfig("altFormats", altFormats);
	}

	private String autoCreate;

	/**
	 * A <a href="output/Ext.DomHelper.html" ext:cls="Ext.DomHelper">DomHelper
	 * element specification object</a>,or <tt>true</tt> for the default element
	 * specification object:
	 * 
	 * <pre>
	 * &lt;code&gt;autoCreate: {tag: &lt;em&gt;&quot;input&quot;&lt;/em&gt;, type: &lt;em&gt;&quot;text&quot;&lt;/em&gt;, size: &lt;em&gt;&quot;10&quot;&lt;/em&gt;, autocomplete: &lt;em&gt;&quot;off&quot;&lt;/em&gt;}&lt;/code&gt;
	 * </pre>
	 */
	public String getAutoCreate() {
		if (null != this.autoCreate) {
			return this.autoCreate;
		}
		ValueExpression _ve = getValueExpression("autoCreate");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>autoCreate</code> property.
	 * </p>
	 */
	public void setAutoCreate(String autoCreate) {
		this.autoCreate = autoCreate;
		this.handleConfig("autoCreate", autoCreate);
	}

	private Object disabledDates;

	/**
	 * An array of "dates" to disable, as strings. Thesestrings will be used to
	 * build a dynamic regular expression so they are very powerful. Some
	 * examples:
	 * 
	 * <pre>
	 * &lt;code&gt;&lt;i&gt;// disable these exact dates:&lt;/i&gt;
	 * disabledDates: [&lt;em&gt;&quot;03/08/2003&quot;&lt;/em&gt;, &lt;em&gt;&quot;09/16/2003&quot;&lt;/em&gt;]
	 * &lt;i&gt;// disable these days &lt;b&gt;for&lt;/b&gt; every year:&lt;/i&gt;
	 * disabledDates: [&lt;em&gt;&quot;03/08&quot;&lt;/em&gt;, &lt;em&gt;&quot;09/16&quot;&lt;/em&gt;]
	 * &lt;i&gt;// only match the beginning (useful &lt;b&gt;if&lt;/b&gt; you are using short years):&lt;/i&gt;
	 * disabledDates: [&lt;em&gt;&quot;&circ;03/08&quot;&lt;/em&gt;]
	 * &lt;i&gt;// disable every day &lt;b&gt;in&lt;/b&gt; March 2006:&lt;/i&gt;
	 * disabledDates: [&lt;em&gt;&quot;03/../2006&quot;&lt;/em&gt;]
	 * &lt;i&gt;// disable every day &lt;b&gt;in&lt;/b&gt; every March:&lt;/i&gt;
	 * disabledDates: [&lt;em&gt;&quot;&circ;03&quot;&lt;/em&gt;]&lt;/code&gt;
	 * </pre>
	 * 
	 * Note that the format of the dates included in the array should exactly
	 * match the <a
	 * href="output/Ext.form.DateField.html#Ext.form.DateField-format"
	 * ext:member="format" ext:cls="Ext.form.DateField">format</a> config. In
	 * order to support regular expressions, if you are using a <a
	 * href="output/Ext.form.DateField.html#Ext.form.DateField-format"
	 * ext:member="format" ext:cls="Ext.form.DateField">date format</a> that has
	 * "." in it, you will have to escape the dot when restricting dates. For
	 * example: <tt>["03\\.08\\.03"]</tt>.
	 */
	@ClientConfig(JsonMode.Array)
	public Object getDisabledDates() {
		if (null != this.disabledDates) {
			return this.disabledDates;
		}
		ValueExpression _ve = getValueExpression("disabledDates");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>disabledDates</code> property.
	 * </p>
	 */
	public void setDisabledDates(Object disabledDates) {
		this.disabledDates = disabledDates;
		this.handleConfig("disabledDates", disabledDates);
	}

	private String disabledDatesText;

	/**
	 * The tooltip text to display when the date fallson a disabled date
	 * (defaults to <tt>'Disabled'</tt>)
	 */
	public String getDisabledDatesText() {
		if (null != this.disabledDatesText) {
			return this.disabledDatesText;
		}
		ValueExpression _ve = getValueExpression("disabledDatesText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>disabledDatesText</code> property.
	 * </p>
	 */
	public void setDisabledDatesText(String disabledDatesText) {
		this.disabledDatesText = disabledDatesText;
		this.handleConfig("disabledDatesText", disabledDatesText);
	}

	private Object disabledDays;

	/**
	 * An array of days to disable, 0 based (defaults tonull). Some examples:
	 * 
	 * <pre>
	 * &lt;code&gt;&lt;i&gt;// disable Sunday and Saturday:&lt;/i&gt;
	 * disabledDays:  [0, 6]
	 * &lt;i&gt;// disable weekdays:&lt;/i&gt;
	 * disabledDays: [1,2,3,4,5]&lt;/code&gt;
	 * </pre>
	 */
	@ClientConfig(JsonMode.Array)
	public Object getDisabledDays() {
		if (null != this.disabledDays) {
			return this.disabledDays;
		}
		ValueExpression _ve = getValueExpression("disabledDays");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>disabledDays</code> property.
	 * </p>
	 */
	public void setDisabledDays(Object disabledDays) {
		this.disabledDays = disabledDays;
		this.handleConfig("disabledDays", disabledDays);
	}

	private String disabledDaysText;

	/**
	 * The tooltip to display when the date falls on adisabled day (defaults to
	 * <tt>'Disabled'</tt>)
	 */
	public String getDisabledDaysText() {
		if (null != this.disabledDaysText) {
			return this.disabledDaysText;
		}
		ValueExpression _ve = getValueExpression("disabledDaysText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>disabledDaysText</code> property.
	 * </p>
	 */
	public void setDisabledDaysText(String disabledDaysText) {
		this.disabledDaysText = disabledDaysText;
		this.handleConfig("disabledDaysText", disabledDaysText);
	}

	private String format;

	/**
	 * The default date format string which can beoverriden for localization
	 * support. The format must be valid according to <a
	 * href="output/Date.html#Date-parseDate" ext:member="parseDate"
	 * ext:cls="Date">Date.parseDate</a> (defaults to <tt>'m/d/Y'</tt>).
	 */
	public String getFormat() {
		if (null != this.format) {
			return this.format;
		}
		ValueExpression _ve = getValueExpression("format");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>format</code> property.
	 * </p>
	 */
	public void setFormat(String format) {
		this.format = format;
		this.handleConfig("format", format);
	}

	private String invalidText;

	/**
	 * The error text to display when the date in thefield is invalid (defaults
	 * to <tt>'{value} is not a valid date - it
must be in the format {format}'</tt>).
	 */
	public String getInvalidText() {
		if (null != this.invalidText) {
			return this.invalidText;
		}
		ValueExpression _ve = getValueExpression("invalidText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>invalidText</code> property.
	 * </p>
	 */
	public void setInvalidText(String invalidText) {
		this.invalidText = invalidText;
		this.handleConfig("invalidText", invalidText);
	}

	private String maxText;

	/**
	 * The error text to display when the date in thecell is after
	 * <tt><a href="output/Ext.form.DateField.html#Ext.form.DateField-maxValue" ext:member="maxValue" ext:cls="Ext.form.DateField">maxValue</a></tt>
	 * (defaults to <tt>'The date in this field must be before {maxValue}'</tt>).
	 */
	public String getMaxText() {
		if (null != this.maxText) {
			return this.maxText;
		}
		ValueExpression _ve = getValueExpression("maxText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>maxText</code> property.
	 * </p>
	 */
	public void setMaxText(String maxText) {
		this.maxText = maxText;
		this.handleConfig("maxText", maxText);
	}

	private Date maxValue;

	/**
	 * The maximum allowed date. Can be either aJavascript date object or a
	 * string date in a valid format (defaults to null).
	 */
	public Date getMaxValue() {
		if (null != this.maxValue) {
			return this.maxValue;
		}
		ValueExpression _ve = getValueExpression("maxValue");
		if (_ve != null) {
			return (Date) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>maxValue</code> property.
	 * </p>
	 */
	public void setMaxValue(Date maxValue) {
		this.maxValue = maxValue;
		this.handleConfig("maxValue", maxValue);
	}

	private String minText;

	/**
	 * The error text to display when the date in thecell is before
	 * <tt><a href="output/Ext.form.DateField.html#Ext.form.DateField-minValue" ext:member="minValue" ext:cls="Ext.form.DateField">minValue</a></tt>
	 * (defaults to <tt>'The date in this field must be after {minValue}'</tt>).
	 */
	public String getMinText() {
		if (null != this.minText) {
			return this.minText;
		}
		ValueExpression _ve = getValueExpression("minText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>minText</code> property.
	 * </p>
	 */
	public void setMinText(String minText) {
		this.minText = minText;
		this.handleConfig("minText", minText);
	}

	private Date minValue;

	/**
	 * The minimum allowed date. Can be either aJavascript date object or a
	 * string date in a valid format (defaults to null).
	 */
	public Date getMinValue() {
		if (null != this.minValue) {
			return this.minValue;
		}
		ValueExpression _ve = getValueExpression("minValue");
		if (_ve != null) {
			return (Date) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>minValue</code> property.
	 * </p>
	 */
	public void setMinValue(Date minValue) {
		this.minValue = minValue;
		this.handleConfig("minValue", minValue);
	}

	private Boolean showToday;

	/**
	 * <tt>false</tt> to hide the footer area of theDatePicker containing the
	 * Today button and disable the keyboard handler for spacebar that selects
	 * the current date (defaults to <tt>true</tt>).
	 */
	public Boolean getShowToday() {
		if (null != this.showToday) {
			return this.showToday;
		}
		ValueExpression _ve = getValueExpression("showToday");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>showToday</code> property.
	 * </p>
	 */
	public void setShowToday(Boolean showToday) {
		this.showToday = showToday;
		this.handleConfig("showToday", showToday);
	}

	private String triggerClass;

	/**
	 * An additional CSS class used to style the triggerbutton. The trigger will
	 * always get the class <tt>'x-form-trigger'</tt> and <tt>triggerClass</tt> will be
	 * <b>appended</b> if specified (defaults to <tt>'x-form-date-trigger'</tt> which displays a calendar
	 * icon).
	 */
	public String getTriggerClass() {
		if (null != this.triggerClass) {
			return this.triggerClass;
		}
		ValueExpression _ve = getValueExpression("triggerClass");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>triggerClass</code> property.
	 * </p>
	 */
	public void setTriggerClass(String triggerClass) {
		this.triggerClass = triggerClass;
		this.handleConfig("triggerClass", triggerClass);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[15];
		}
		_values[0] = super.saveState(_context);
		_values[1] = altFormats;
		_values[2] = autoCreate;
		_values[3] = disabledDates;
		_values[4] = disabledDatesText;
		_values[5] = disabledDays;
		_values[6] = disabledDaysText;
		_values[7] = format;
		_values[8] = invalidText;
		_values[9] = maxText;
		_values[10] = maxValue;
		_values[11] = minText;
		_values[12] = minValue;
		_values[13] = showToday;
		_values[14] = triggerClass;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.altFormats = (String) _values[1];
		this.handleConfig("altFormats", this.altFormats);
		this.autoCreate = (String) _values[2];
		this.handleConfig("autoCreate", this.autoCreate);
		this.disabledDates = (Object) _values[3];
		this.handleConfig("disabledDates", this.disabledDates);
		this.disabledDatesText = (String) _values[4];
		this.handleConfig("disabledDatesText", this.disabledDatesText);
		this.disabledDays = (Object) _values[5];
		this.handleConfig("disabledDays", this.disabledDays);
		this.disabledDaysText = (String) _values[6];
		this.handleConfig("disabledDaysText", this.disabledDaysText);
		this.format = (String) _values[7];
		this.handleConfig("format", this.format);
		this.invalidText = (String) _values[8];
		this.handleConfig("invalidText", this.invalidText);
		this.maxText = (String) _values[9];
		this.handleConfig("maxText", this.maxText);
		this.maxValue = (Date) _values[10];
		this.handleConfig("maxValue", this.maxValue);
		this.minText = (String) _values[11];
		this.handleConfig("minText", this.minText);
		this.minValue = (Date) _values[12];
		this.handleConfig("minValue", this.minValue);
		this.showToday = (Boolean) _values[13];
		this.handleConfig("showToday", this.showToday);
		this.triggerClass = (String) _values[14];
		this.handleConfig("triggerClass", this.triggerClass);

	}
}
package ext.form;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.XType;

/**
 *Note:This java code is auto generated by abner,do not edit it. Multiline text
 * field. Can be used as a direct replacement for traditional textarea fields,
 * plus adds support for auto-sizing.
 */
@XType("textarea")
@InstanceOf("Ext.form.TextArea")
public class TextArea extends TextField {
	public static final String COMPONENT_TYPE = "Ext.form.TextArea";
	public static final String COMPONENT_FAMILY = "Ext.form.TextArea";

	/**
	 * <p>
	 * Create a new {@link TextArea} instance with default property values.
	 * </p>
	 */
	public TextArea() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private String autoCreate;

	/**
	 * <p>
	 * A <a href="output/Ext.DomHelper.html"
	 * ext:cls="Ext.DomHelper">DomHelper</a> element spec, or true for a default
	 * element spec. Used to create the <a
	 * href="output/Ext.Component.html#Ext.Component-getEl" ext:member="getEl"
	 * ext:cls="Ext.Component">Element</a> which will encapsulate this
	 * Component. See
	 * <tt><a href="output/Ext.Component.html#Ext.Component-autoEl" ext:member="autoEl" ext:cls="Ext.Component">autoEl</a></tt>
	 * for details. Defaults to:
	 * </p>
	 * 
	 * <pre>
	 * &lt;code&gt;{tag: &lt;em&gt;&quot;textarea&quot;&lt;/em&gt;, style: &lt;em&gt;&quot;width:100px;height:60px;&quot;&lt;/em&gt;, autocomplete: &lt;em&gt;&quot;off&quot;&lt;/em&gt;}&lt;/code&gt;
	 * </pre>
	 */
	public String getAutoCreate() {
		if (null != this.autoCreate) {
			return this.autoCreate;
		}
		ValueExpression _ve = getValueExpression("autoCreate");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>autoCreate</code> property.
	 * </p>
	 */
	public void setAutoCreate(String autoCreate) {
		this.autoCreate = autoCreate;
		this.handleConfig("autoCreate", autoCreate);
	}

	private Integer growMax;

	/**
	 * The maximum height to allow when
	 * <tt><a href="output/Ext.form.TextField.html#Ext.form.TextField-grow" ext:member="grow" ext:cls="Ext.form.TextField">grow</a>=true</tt>
	 * (defaults to <tt>1000</tt>)
	 */
	public Integer getGrowMax() {
		if (null != this.growMax) {
			return this.growMax;
		}
		ValueExpression _ve = getValueExpression("growMax");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>growMax</code> property.
	 * </p>
	 */
	public void setGrowMax(Integer growMax) {
		this.growMax = growMax;
		this.handleConfig("growMax", growMax);
	}

	private Integer growMin;

	/**
	 * The minimum height to allow when
	 * <tt><a href="output/Ext.form.TextField.html#Ext.form.TextField-grow" ext:member="grow" ext:cls="Ext.form.TextField">grow</a>=true</tt>
	 * (defaults to <tt>60</tt>)
	 */
	public Integer getGrowMin() {
		if (null != this.growMin) {
			return this.growMin;
		}
		ValueExpression _ve = getValueExpression("growMin");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>growMin</code> property.
	 * </p>
	 */
	public void setGrowMin(Integer growMin) {
		this.growMin = growMin;
		this.handleConfig("growMin", growMin);
	}

	private Boolean preventScrollbars;

	/**
	 * <tt>true</tt> to prevent scrollbars fromappearing regardless of how much
	 * text is in the field (equivalent to setting overflow: hidden, defaults to
	 * <tt>false</tt>)
	 */
	public Boolean getPreventScrollbars() {
		if (null != this.preventScrollbars) {
			return this.preventScrollbars;
		}
		ValueExpression _ve = getValueExpression("preventScrollbars");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>preventScrollbars</code> property.
	 * </p>
	 */
	public void setPreventScrollbars(Boolean preventScrollbars) {
		this.preventScrollbars = preventScrollbars;
		this.handleConfig("preventScrollbars", preventScrollbars);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[5];
		}
		_values[0] = super.saveState(_context);
		_values[1] = autoCreate;
		_values[2] = growMax;
		_values[3] = growMin;
		_values[4] = preventScrollbars;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.autoCreate = (String) _values[1];
		this.handleConfig("autoCreate", this.autoCreate);
		this.growMax = (Integer) _values[2];
		this.handleConfig("growMax", this.growMax);
		this.growMin = (Integer) _values[3];
		this.handleConfig("growMin", this.growMin);
		this.preventScrollbars = (Boolean) _values[4];
		this.handleConfig("preventScrollbars", this.preventScrollbars);

	}
}
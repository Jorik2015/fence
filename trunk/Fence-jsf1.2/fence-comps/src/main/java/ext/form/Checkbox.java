package ext.form;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.XType;

/**
 *Note:This java code is auto generated by abner,do not edit it. Single
 * checkbox field. Can be used as a direct replacement for traditional checkbox
 * fields.
 */
@XType("checkbox")
@InstanceOf("Ext.form.Checkbox")
public class Checkbox extends Field {
	public static final String COMPONENT_TYPE = "Ext.form.Checkbox";
	public static final String COMPONENT_FAMILY = "Ext.form.Checkbox";

	/**
	 * <p>
	 * Create a new {@link Checkbox} instance with default property values.
	 * </p>
	 */
	public Checkbox() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private String autoCreate;

	/**
	 * A DomHelper element spec, or true for a defaultelement spec (defaults to
	 * {tag: 'input', type: 'checkbox', autocomplete: 'off'})
	 */
	public String getAutoCreate() {
		if (null != this.autoCreate) {
			return this.autoCreate;
		}
		ValueExpression _ve = getValueExpression("autoCreate");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>autoCreate</code> property.
	 * </p>
	 */
	public void setAutoCreate(String autoCreate) {
		this.autoCreate = autoCreate;
		this.handleConfig("autoCreate", autoCreate);
	}

	private String boxLabel;

	/**
	 * The text that appears beside the checkbox
	 */
	public String getBoxLabel() {
		if (null != this.boxLabel) {
			return this.boxLabel;
		}
		ValueExpression _ve = getValueExpression("boxLabel");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>boxLabel</code> property.
	 * </p>
	 */
	public void setBoxLabel(String boxLabel) {
		this.boxLabel = boxLabel;
		this.handleConfig("boxLabel", boxLabel);
	}

	private Boolean checked;

	/**
	 * <tt>true</tt> if the checkbox should renderinitially checked (defaults to
	 * <tt>false</tt>)
	 */
	public Boolean getChecked() {
		if (null != this.checked) {
			return this.checked;
		}
		ValueExpression _ve = getValueExpression("checked");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>checked</code> property.
	 * </p>
	 */
	public void setChecked(Boolean checked) {
		this.checked = checked;
		this.handleConfig("checked", checked);
	}

	private String fieldClass;

	/**
	 * The default CSS class for the checkbox (defaultsto 'x-form-field')
	 */
	public String getFieldClass() {
		if (null != this.fieldClass) {
			return this.fieldClass;
		}
		ValueExpression _ve = getValueExpression("fieldClass");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>fieldClass</code> property.
	 * </p>
	 */
	public void setFieldClass(String fieldClass) {
		this.fieldClass = fieldClass;
		this.handleConfig("fieldClass", fieldClass);
	}

	private String focusClass;

	/**
	 * The CSS class to use when the checkbox receivesfocus (defaults to
	 * undefined)
	 */
	public String getFocusClass() {
		if (null != this.focusClass) {
			return this.focusClass;
		}
		ValueExpression _ve = getValueExpression("focusClass");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>focusClass</code> property.
	 * </p>
	 */
	public void setFocusClass(String focusClass) {
		this.focusClass = focusClass;
		this.handleConfig("focusClass", focusClass);
	}

	private Object handler;

	/**
	 * A function called when the <a
	 * href="output/Ext.form.Checkbox.html#Ext.form.Checkbox-checked"
	 * ext:member="checked" ext:cls="Ext.form.Checkbox">checked</a> valuechanges
	 * (can be used instead of handling the check event). The handler is passed
	 * the following parameters:
	 * 
	 * <div class="mdetail-params">
	 * <ul>
	 * <li><b>checkbox</b> : Ext.form.Checkbox
	 * 
	 * <div class="sub-desc">The Checkbox being toggled.</div></li>
	 * 
	 * <li><b>checked</b> : Boolean
	 * 
	 * <div class="sub-desc">The new checked state of the checkbox.</div></li>
	 * </ul>
	 * </div>
	 */
	@ClientConfig(JsonMode.Function)
	public Object getHandler() {
		if (null != this.handler) {
			return this.handler;
		}
		ValueExpression _ve = getValueExpression("handler");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>handler</code> property.
	 * </p>
	 */
	public void setHandler(Object handler) {
		this.handler = handler;
		this.handleConfig("handler", handler);
	}

	private String inputValue;

	/**
	 * The value that should go into the generatedinput element's value
	 * attribute
	 */
	public String getInputValue() {
		if (null != this.inputValue) {
			return this.inputValue;
		}
		ValueExpression _ve = getValueExpression("inputValue");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>inputValue</code> property.
	 * </p>
	 */
	public void setInputValue(String inputValue) {
		this.inputValue = inputValue;
		this.handleConfig("inputValue", inputValue);
	}

	private Object scope;

	/**
	 * An object to use as the scope ('this' reference)of the <a
	 * href="output/Ext.form.Checkbox.html#Ext.form.Checkbox-handler"
	 * ext:member="handler" ext:cls="Ext.form.Checkbox">handler</a> function
	 * (defaults to this Checkbox).
	 */
	@ClientConfig(JsonMode.Object)
	public Object getScope() {
		if (null != this.scope) {
			return this.scope;
		}
		ValueExpression _ve = getValueExpression("scope");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>scope</code> property.
	 * </p>
	 */
	public void setScope(Object scope) {
		this.scope = scope;
		this.handleConfig("scope", scope);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[9];
		}
		_values[0] = super.saveState(_context);
		_values[1] = autoCreate;
		_values[2] = boxLabel;
		_values[3] = checked;
		_values[4] = fieldClass;
		_values[5] = focusClass;
		_values[6] = handler;
		_values[7] = inputValue;
		_values[8] = scope;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.autoCreate = (String) _values[1];
		this.handleConfig("autoCreate", this.autoCreate);
		this.boxLabel = (String) _values[2];
		this.handleConfig("boxLabel", this.boxLabel);
		this.checked = (Boolean) _values[3];
		this.handleConfig("checked", this.checked);
		this.fieldClass = (String) _values[4];
		this.handleConfig("fieldClass", this.fieldClass);
		this.focusClass = (String) _values[5];
		this.handleConfig("focusClass", this.focusClass);
		this.handler = (Object) _values[6];
		this.handleConfig("handler", this.handler);
		this.inputValue = (String) _values[7];
		this.handleConfig("inputValue", this.inputValue);
		this.scope = (Object) _values[8];
		this.handleConfig("scope", this.scope);

	}
}
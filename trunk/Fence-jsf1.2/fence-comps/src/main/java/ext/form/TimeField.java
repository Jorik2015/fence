package ext.form;

import java.util.Date;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.XType;

/**
 *Note:This java code is auto generated by abner,do not edit it. Provides a
 * time input field with a time dropdown and automatic time validation. Example
 * usage:
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;new&lt;/b&gt; Ext.form.TimeField({
 *     minValue: &lt;em&gt;'9:00 AM'&lt;/em&gt;,
 *     maxValue: &lt;em&gt;'6:00 PM'&lt;/em&gt;,
 *     increment: 30
 * });&lt;/code&gt;
 * </pre>
 */
@XType("timefield")
@InstanceOf("Ext.form.TimeField")
public class TimeField extends ComboBox {
	public static final String COMPONENT_TYPE = "Ext.form.TimeField";
	public static final String COMPONENT_FAMILY = "Ext.form.TimeField";

	/**
	 * <p>
	 * Create a new {@link TimeField} instance with default property values.
	 * </p>
	 */
	public TimeField() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private String altFormats;

	/**
	 * Multiple date formats separated by "|" to trywhen parsing a user input
	 * value and it doesn't match the defined format (defaults to 'g:ia|g:iA|g:i
	 * a|g:i A|h:i|g:i|H:i|ga|ha|gA|h a|g a|g A|gi|hi|gia|hia|g|H').
	 */
	public String getAltFormats() {
		if (null != this.altFormats) {
			return this.altFormats;
		}
		ValueExpression _ve = getValueExpression("altFormats");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>altFormats</code> property.
	 * </p>
	 */
	public void setAltFormats(String altFormats) {
		this.altFormats = altFormats;
		this.handleConfig("altFormats", altFormats);
	}

	private String format;

	/**
	 * The default time format string which can beoverriden for localization
	 * support. The format must be valid according to <a
	 * href="output/Date.html#Date-parseDate" ext:member="parseDate"
	 * ext:cls="Date">Date.parseDate</a> (defaults to 'g:i A', e.g., '3:15 PM').
	 * For 24-hour time format try 'H:i' instead.
	 */
	public String getFormat() {
		if (null != this.format) {
			return this.format;
		}
		ValueExpression _ve = getValueExpression("format");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>format</code> property.
	 * </p>
	 */
	public void setFormat(String format) {
		this.format = format;
		this.handleConfig("format", format);
	}

	private Integer increment;

	/**
	 * The number of minutes between each time value inthe list (defaults to
	 * 15).
	 */
	public Integer getIncrement() {
		if (null != this.increment) {
			return this.increment;
		}
		ValueExpression _ve = getValueExpression("increment");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>increment</code> property.
	 * </p>
	 */
	public void setIncrement(Integer increment) {
		this.increment = increment;
		this.handleConfig("increment", increment);
	}

	private String invalidText;

	/**
	 * The error text to display when the time in thefield is invalid (defaults
	 * to '{value} is not a valid time').
	 */
	public String getInvalidText() {
		if (null != this.invalidText) {
			return this.invalidText;
		}
		ValueExpression _ve = getValueExpression("invalidText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>invalidText</code> property.
	 * </p>
	 */
	public void setInvalidText(String invalidText) {
		this.invalidText = invalidText;
		this.handleConfig("invalidText", invalidText);
	}

	private String maxText;

	/**
	 * The error text to display when the time is aftermaxValue (defaults to
	 * 'The time in this field must be equal to or before {0}').
	 */
	public String getMaxText() {
		if (null != this.maxText) {
			return this.maxText;
		}
		ValueExpression _ve = getValueExpression("maxText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>maxText</code> property.
	 * </p>
	 */
	public void setMaxText(String maxText) {
		this.maxText = maxText;
		this.handleConfig("maxText", maxText);
	}

	private Date maxValue;

	/**
	 * The maximum allowed time. Can be either aJavascript date object with a
	 * valid time value or a string time in a valid format -- see <a
	 * href="output/Ext.form.TimeField.html#Ext.form.TimeField-format"
	 * ext:member="format" ext:cls="Ext.form.TimeField">format</a> and <a
	 * href="output/Ext.form.TimeField.html#Ext.form.TimeField-altFormats"
	 * ext:member="altFormats" ext:cls="Ext.form.TimeField">altFormats</a>
	 * (defaults to null).
	 */
	public Date getMaxValue() {
		if (null != this.maxValue) {
			return this.maxValue;
		}
		ValueExpression _ve = getValueExpression("maxValue");
		if (_ve != null) {
			return (Date) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>maxValue</code> property.
	 * </p>
	 */
	public void setMaxValue(Date maxValue) {
		this.maxValue = maxValue;
		this.handleConfig("maxValue", maxValue);
	}

	private String minText;

	/**
	 * The error text to display when the date in thecell is before minValue
	 * (defaults to 'The time in this field must be equal to or after {0}').
	 */
	public String getMinText() {
		if (null != this.minText) {
			return this.minText;
		}
		ValueExpression _ve = getValueExpression("minText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>minText</code> property.
	 * </p>
	 */
	public void setMinText(String minText) {
		this.minText = minText;
		this.handleConfig("minText", minText);
	}

	private Date minValue;

	/**
	 * The minimum allowed time. Can be either aJavascript date object with a
	 * valid time value or a string time in a valid format -- see <a
	 * href="output/Ext.form.TimeField.html#Ext.form.TimeField-format"
	 * ext:member="format" ext:cls="Ext.form.TimeField">format</a> and <a
	 * href="output/Ext.form.TimeField.html#Ext.form.TimeField-altFormats"
	 * ext:member="altFormats" ext:cls="Ext.form.TimeField">altFormats</a>
	 * (defaults to null).
	 */
	public Date getMinValue() {
		if (null != this.minValue) {
			return this.minValue;
		}
		ValueExpression _ve = getValueExpression("minValue");
		if (_ve != null) {
			return (Date) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>minValue</code> property.
	 * </p>
	 */
	public void setMinValue(Date minValue) {
		this.minValue = minValue;
		this.handleConfig("minValue", minValue);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[9];
		}
		_values[0] = super.saveState(_context);
		_values[1] = altFormats;
		_values[2] = format;
		_values[3] = increment;
		_values[4] = invalidText;
		_values[5] = maxText;
		_values[6] = maxValue;
		_values[7] = minText;
		_values[8] = minValue;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.altFormats = (String) _values[1];
		this.handleConfig("altFormats", this.altFormats);
		this.format = (String) _values[2];
		this.handleConfig("format", this.format);
		this.increment = (Integer) _values[3];
		this.handleConfig("increment", this.increment);
		this.invalidText = (String) _values[4];
		this.handleConfig("invalidText", this.invalidText);
		this.maxText = (String) _values[5];
		this.handleConfig("maxText", this.maxText);
		this.maxValue = (Date) _values[6];
		this.handleConfig("maxValue", this.maxValue);
		this.minText = (String) _values[7];
		this.handleConfig("minText", this.minText);
		this.minValue = (Date) _values[8];
		this.handleConfig("minValue", this.minValue);

	}
}
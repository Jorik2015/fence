package ext.ux.grid.filter;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;
import ext.annotation.UXResources;

/**
 *Note:This java code is auto generated by abner,do not edit it. Filters using
 * an Ext.ux.menu.RangeMenu.
 * 
 * <p>
 * <b><u>Example Usage:</u></b>
 * </p>
 * 
 * <pre>
 * <code><b>var</b> filters = <b>new</b> Ext.ux.grid.GridFilters({
 *     ...
 *     filters: [{
 *         type: <em>'numeric'</em>,
 *         dataIndex: <em>'price'</em>
 *     }]
 * });</code>
 * </pre>
 */
@InstanceOf("Ext.ux.grid.filter.NumericFilter")
@UXResources(js = {"ext[version]/ux/gridfilters/menu/RangeMenu.js","ext[version]/ux/gridfilters/filter/NumericFilter.js"},css="ext30/ux/gridfilters/css/RangeMenu.css")
@ParseConfigMode(ui = false, name = "filters", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Config)
public class NumericFilter extends Filter {
	public static final String COMPONENT_TYPE = "Ext.ux.grid.filter.NumericFilter";
	public static final String COMPONENT_FAMILY = "Ext.ux.grid.filter.NumericFilter";

	/**
	 * <p>
	 * Create a new {@link NumericFilter} instance with default property values.
	 * </p>
	 */
	public NumericFilter() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Object fieldCfg;

	/**
	 * The default configuration options for any fielditem unless superseded by
	 * the
	 * 
	 * <code><a href="output/Ext.ux.grid.filter.NumericFilter.html#Ext.ux.grid.filter.NumericFilter-fields" ext:member="fields" ext:cls="Ext.ux.grid.filter.NumericFilter">fields</a></code>
	 * configuration. Defaults to:
	 * 
	 * <pre>
	 * fieldCfg: {
	 * }
	 * </pre>
	 * 
	 * Example usage:
	 * 
	 * <pre>
	 * <code>fieldCfg : {
	 *     width: 150,
	 * },</code>
	 * </pre>
	 */
	@ClientConfig(JsonMode.Object)
	public Object getFieldCfg() {
		if (null != this.fieldCfg) {
			return this.fieldCfg;
		}
		ValueExpression _ve = getValueExpression("fieldCfg");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>fieldCfg</code> property.
	 * </p>
	 */
	public void setFieldCfg(Object fieldCfg) {
		this.fieldCfg = fieldCfg;
		this.handleConfig("fieldCfg", fieldCfg);
	}

	private Object fieldCls;

	/**
	 * The Class to use to construct each field itemwithin this menu Defaults
	 * to:
	 * 
	 * <pre>
	 * fieldCls : Ext.form.NumberField
	 * </pre>
	 */
	@ClientConfig(JsonMode.Object)
	public Object getFieldCls() {
		if (null != this.fieldCls) {
			return this.fieldCls;
		}
		ValueExpression _ve = getValueExpression("fieldCls");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>fieldCls</code> property.
	 * </p>
	 */
	public void setFieldCls(Object fieldCls) {
		this.fieldCls = fieldCls;
		this.handleConfig("fieldCls", fieldCls);
	}

	private Object fields;

	/**
	 * The field items may be configured individuallyDefaults to
	 * <tt>undefined</tt>. Example usage:
	 * 
	 * <pre>
	 * <code>fields : {
	 *     gt: { <i>// override fieldCfg options
	 * </i>
	 *         width: 200,
	 *         fieldCls: Ext.ux.form.CustomNumberField <i>// to override <b>default</b> <a href="output/Ext.ux.grid.filter.NumericFilter.html#Ext.ux.grid.filter.NumericFilter-fieldCls" ext:member="fieldCls" ext:cls="Ext.ux.grid.filter.NumericFilter">fieldCls</a>
	 * </i>
	 *     }
	 * },</code>
	 * </pre>
	 */
	@ClientConfig(JsonMode.Object)
	public Object getFields() {
		if (null != this.fields) {
			return this.fields;
		}
		ValueExpression _ve = getValueExpression("fields");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>fields</code> property.
	 * </p>
	 */
	public void setFields(Object fields) {
		this.fields = fields;
		this.handleConfig("fields", fields);
	}

	private Object iconCls;

	/**
	 * The iconCls to be applied to each comparatorfield item. Defaults to:
	 * 
	 * <pre>
	 * iconCls : {
	 *     gt : 'ux-rangemenu-gt',
	 *     lt : 'ux-rangemenu-lt',
	 *     eq : 'ux-rangemenu-eq'
	 * }
	 * </pre>
	 */
	@ClientConfig(JsonMode.Object)
	public Object getIconCls() {
		if (null != this.iconCls) {
			return this.iconCls;
		}
		ValueExpression _ve = getValueExpression("iconCls");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>iconCls</code> property.
	 * </p>
	 */
	public void setIconCls(Object iconCls) {
		this.iconCls = iconCls;
		this.handleConfig("iconCls", iconCls);
	}

	private Object menuItemCfgs;

	/**
	 * Default configuration options for each menu itemDefaults to:
	 * 
	 * <pre>
	 * menuItemCfgs : {
	 *     emptyText: 'Enter Filter Text...',
	 *     selectOnFocus: true,
	 *     width: 125
	 * }
	 * </pre>
	 */
	@ClientConfig(JsonMode.Object)
	public Object getMenuItemCfgs() {
		if (null != this.menuItemCfgs) {
			return this.menuItemCfgs;
		}
		ValueExpression _ve = getValueExpression("menuItemCfgs");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>menuItemCfgs</code> property.
	 * </p>
	 */
	public void setMenuItemCfgs(Object menuItemCfgs) {
		this.menuItemCfgs = menuItemCfgs;
		this.handleConfig("menuItemCfgs", menuItemCfgs);
	}

	private Object menuItems;

	/**
	 * The items to be shown in this menu. Items areadded to the menu according
	 * to their position within this array. Defaults to:
	 * 
	 * <pre>
	 * menuItems : ['lt','gt','-','eq']
	 * </pre>
	 */
	@ClientConfig(JsonMode.Array)
	public Object getMenuItems() {
		if (null != this.menuItems) {
			return this.menuItems;
		}
		ValueExpression _ve = getValueExpression("menuItems");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>menuItems</code> property.
	 * </p>
	 */
	public void setMenuItems(Object menuItems) {
		this.menuItems = menuItems;
		this.handleConfig("menuItems", menuItems);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[7];
		}
		_values[0] = super.saveState(_context);
		_values[1] = fieldCfg;
		_values[2] = fieldCls;
		_values[3] = fields;
		_values[4] = iconCls;
		_values[5] = menuItemCfgs;
		_values[6] = menuItems;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.fieldCfg = (Object) _values[1];
		this.handleConfig("fieldCfg", this.fieldCfg);
		this.fieldCls = (Object) _values[2];
		this.handleConfig("fieldCls", this.fieldCls);
		this.fields = (Object) _values[3];
		this.handleConfig("fields", this.fields);
		this.iconCls = (Object) _values[4];
		this.handleConfig("iconCls", this.iconCls);
		this.menuItemCfgs = (Object) _values[5];
		this.handleConfig("menuItemCfgs", this.menuItemCfgs);
		this.menuItems = (Object) _values[6];
		this.handleConfig("menuItems", this.menuItems);

	}
}
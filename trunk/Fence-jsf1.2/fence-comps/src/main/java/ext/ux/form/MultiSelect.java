package ext.ux.form;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.UXResources;
import ext.annotation.XType;
import ext.form.Field;

/**
 *Note:This java code is auto generated by abner,do not edit it. A control that
 * allows selection and form submission of multiple list items.
 */
@XType("multiselect")
@InstanceOf("Ext.ux.form.MultiSelect")
@UXResources(js = "ext[version]/ux/MultiSelect.js",css="ext[version]/ux/css/MultiSelect.css")
public class MultiSelect extends Field {
	public static final String COMPONENT_TYPE = "Ext.ux.form.MultiSelect";
	public static final String COMPONENT_FAMILY = "Ext.ux.form.MultiSelect";

	/**
	 * <p>
	 * Create a new {@link MultiSelect} instance with default property values.
	 * </p>
	 */
	public MultiSelect() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Boolean allowBlank;

	/**
	 * False to require at least one item in the listto be selected, true to
	 * allow no selection (defaults to true).
	 */
	public Boolean getAllowBlank() {
		if (null != this.allowBlank) {
			return this.allowBlank;
		}
		ValueExpression _ve = getValueExpression("allowBlank");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>allowBlank</code> property.
	 * </p>
	 */
	public void setAllowBlank(Boolean allowBlank) {
		this.allowBlank = allowBlank;
		this.handleConfig("allowBlank", allowBlank);
	}

	private String appendOnly;

	/**
	 * True if the list should only allow append dropswhen drag/drop is enabled
	 * (use for lists which are sorted, defaults to false).
	 */
	public String getAppendOnly() {
		if (null != this.appendOnly) {
			return this.appendOnly;
		}
		ValueExpression _ve = getValueExpression("appendOnly");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>appendOnly</code> property.
	 * </p>
	 */
	public void setAppendOnly(String appendOnly) {
		this.appendOnly = appendOnly;
		this.handleConfig("appendOnly", appendOnly);
	}

	private String blankText;

	/**
	 * Default text displayed when the control containsno items (defaults to the
	 * same value as <a
	 * href="output/Ext.form.TextField.html#Ext.form.TextField-blankText"
	 * ext:member="blankText"
	 * ext:cls="Ext.form.TextField">Ext.form.TextField.blankText</a>.
	 */
	public String getBlankText() {
		if (null != this.blankText) {
			return this.blankText;
		}
		ValueExpression _ve = getValueExpression("blankText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>blankText</code> property.
	 * </p>
	 */
	public void setBlankText(String blankText) {
		this.blankText = blankText;
		this.handleConfig("blankText", blankText);
	}

	private Boolean ddReorder;

	/**
	 * Whether the items in the MultiSelect list aredrag/drop reorderable
	 * (defaults to false).
	 */
	public Boolean getDdReorder() {
		if (null != this.ddReorder) {
			return this.ddReorder;
		}
		ValueExpression _ve = getValueExpression("ddReorder");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>ddReorder</code> property.
	 * </p>
	 */
	public void setDdReorder(Boolean ddReorder) {
		this.ddReorder = ddReorder;
		this.handleConfig("ddReorder", ddReorder);
	}

	private String delimiter;

	/**
	 * The string used to delimit between items whenset or returned as a string
	 * of values (defaults to ',').
	 */
	public String getDelimiter() {
		if (null != this.delimiter) {
			return this.delimiter;
		}
		ValueExpression _ve = getValueExpression("delimiter");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>delimiter</code> property.
	 * </p>
	 */
	public void setDelimiter(String delimiter) {
		this.delimiter = delimiter;
		this.handleConfig("delimiter", delimiter);
	}

	private String displayField;

	/**
	 * Name/Index of the desired display field in thedataset (defaults to 0).
	 */
	public String getDisplayField() {
		if (null != this.displayField) {
			return this.displayField;
		}
		ValueExpression _ve = getValueExpression("displayField");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>displayField</code> property.
	 * </p>
	 */
	public void setDisplayField(String displayField) {
		this.displayField = displayField;
		this.handleConfig("displayField", displayField);
	}

	private Object dragGroup;

	/**
	 * The ddgroup name(s) for the MultiSelect DragZone(defaults to undefined).
	 */
	@ClientConfig(JsonMode.Array)
	public Object getDragGroup() {
		if (null != this.dragGroup) {
			return this.dragGroup;
		}
		ValueExpression _ve = getValueExpression("dragGroup");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>dragGroup</code> property.
	 * </p>
	 */
	public void setDragGroup(Object dragGroup) {
		this.dragGroup = dragGroup;
		this.handleConfig("dragGroup", dragGroup);
	}

	private Object dropGroup;

	/**
	 * The ddgroup name(s) for the MultiSelect DropZone(defaults to undefined).
	 */
	@ClientConfig(JsonMode.Array)
	public Object getDropGroup() {
		if (null != this.dropGroup) {
			return this.dropGroup;
		}
		ValueExpression _ve = getValueExpression("dropGroup");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>dropGroup</code> property.
	 * </p>
	 */
	public void setDropGroup(Object dropGroup) {
		this.dropGroup = dropGroup;
		this.handleConfig("dropGroup", dropGroup);
	}

	private Integer height;

	/**
	 * Height in pixels of the control (defaults to100).
	 */
	public Integer getHeight() {
		if (null != this.height) {
			return this.height;
		}
		ValueExpression _ve = getValueExpression("height");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>height</code> property.
	 * </p>
	 */
	public void setHeight(Integer height) {
		this.height = height;
		this.handleConfig("height", height);
	}

	private String legend;

	/**
	 * Wraps the object with a fieldset and specifiedlegend.
	 */
	public String getLegend() {
		if (null != this.legend) {
			return this.legend;
		}
		ValueExpression _ve = getValueExpression("legend");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>legend</code> property.
	 * </p>
	 */
	public void setLegend(String legend) {
		this.legend = legend;
		this.handleConfig("legend", legend);
	}

	private Integer maxSelections;

	/**
	 * Maximum number of selections allowed (defaultsto Number.MAX_VALUE).
	 */
	public Integer getMaxSelections() {
		if (null != this.maxSelections) {
			return this.maxSelections;
		}
		ValueExpression _ve = getValueExpression("maxSelections");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>maxSelections</code> property.
	 * </p>
	 */
	public void setMaxSelections(Integer maxSelections) {
		this.maxSelections = maxSelections;
		this.handleConfig("maxSelections", maxSelections);
	}

	private String maxSelectionsText;

	/**
	 * Validation message displayed when <a href=
	 * "output/Ext.ux.form.MultiSelect.html#Ext.ux.form.MultiSelect-maxSelections"
	 * ext:member="maxSelections"
	 * ext:cls="Ext.ux.form.MultiSelect">maxSelections</a> is not met(defaults
	 * to 'Maximum {0} item(s) allowed'). The {0} token will be replaced by the
	 * value of <a href=
	 * "output/Ext.ux.form.MultiSelect.html#Ext.ux.form.MultiSelect-maxSelections"
	 * ext:member="maxSelections"
	 * ext:cls="Ext.ux.form.MultiSelect">maxSelections</a>.
	 */
	public String getMaxSelectionsText() {
		if (null != this.maxSelectionsText) {
			return this.maxSelectionsText;
		}
		ValueExpression _ve = getValueExpression("maxSelectionsText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>maxSelectionsText</code> property.
	 * </p>
	 */
	public void setMaxSelectionsText(String maxSelectionsText) {
		this.maxSelectionsText = maxSelectionsText;
		this.handleConfig("maxSelectionsText", maxSelectionsText);
	}

	private Integer minSelections;

	/**
	 * Minimum number of selections allowed (defaultsto 0).
	 */
	public Integer getMinSelections() {
		if (null != this.minSelections) {
			return this.minSelections;
		}
		ValueExpression _ve = getValueExpression("minSelections");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>minSelections</code> property.
	 * </p>
	 */
	public void setMinSelections(Integer minSelections) {
		this.minSelections = minSelections;
		this.handleConfig("minSelections", minSelections);
	}

	private String minSelectionsText;

	/**
	 * Validation message displayed when <a href=
	 * "output/Ext.ux.form.MultiSelect.html#Ext.ux.form.MultiSelect-minSelections"
	 * ext:member="minSelections"
	 * ext:cls="Ext.ux.form.MultiSelect">minSelections</a> is not met(defaults
	 * to 'Minimum {0} item(s) required'). The {0} token will be replaced by the
	 * value of <a href=
	 * "output/Ext.ux.form.MultiSelect.html#Ext.ux.form.MultiSelect-minSelections"
	 * ext:member="minSelections"
	 * ext:cls="Ext.ux.form.MultiSelect">minSelections</a>.
	 */
	public String getMinSelectionsText() {
		if (null != this.minSelectionsText) {
			return this.minSelectionsText;
		}
		ValueExpression _ve = getValueExpression("minSelectionsText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>minSelectionsText</code> property.
	 * </p>
	 */
	public void setMinSelectionsText(String minSelectionsText) {
		this.minSelectionsText = minSelectionsText;
		this.handleConfig("minSelectionsText", minSelectionsText);
	}

	private Object store;

	/**
	 * The data source to which this MultiSelect isbound (defaults to
	 * <tt>undefined</tt>). Acceptable values for this property are:
	 * 
	 * <div class="mdetail-params">
	 * <ul>
	 * <li><b>any <a href="output/Ext.data.Store.html"
	 * ext:cls="Ext.data.Store">Store</a> subclass</b></li>
	 * 
	 * <li><b>an Array</b> : Arrays will be converted to a <a
	 * href="output/Ext.data.ArrayStore.html"
	 * ext:cls="Ext.data.ArrayStore">Ext.data.ArrayStore</a> internally.
	 * 
	 * <div class="mdetail-params">
	 * <ul>
	 * <li><b>1-dimensional array</b> : (e.g., <tt>['Foo','Bar']</tt>)
	 * 
	 * <div class="sub-desc">A 1-dimensional array will automatically be
	 * expanded (each array item will be the combo <a href=
	 * "output/Ext.ux.form.MultiSelect.html#Ext.ux.form.MultiSelect-valueField"
	 * ext:member="valueField" ext:cls="Ext.ux.form.MultiSelect">value</a> and
	 * <a href=
	 * "output/Ext.ux.form.MultiSelect.html#Ext.ux.form.MultiSelect-displayField"
	 * ext:member="displayField"
	 * ext:cls="Ext.ux.form.MultiSelect">text</a>)</div></li>
	 * 
	 * <li><b>2-dimensional array</b> : (e.g., <tt>[['f','Foo'],['b','Bar']]</tt>)
	 * 
	 * <div class="sub-desc">For a multi-dimensional array, the value in index 0
	 * of each item will be assumed to be the combo <a href=
	 * "output/Ext.ux.form.MultiSelect.html#Ext.ux.form.MultiSelect-valueField"
	 * ext:member="valueField" ext:cls="Ext.ux.form.MultiSelect">value</a>,
	 * while the value at index 1 is assumed to be the combo <a href=
	 * "output/Ext.ux.form.MultiSelect.html#Ext.ux.form.MultiSelect-displayField"
	 * ext:member="displayField"
	 * ext:cls="Ext.ux.form.MultiSelect">text</a>.</div></li>
	 * </ul>
	 * </div></li>
	 * </ul>
	 * </div>
	 */
	@ClientConfig(JsonMode.Object)
	public Object getStore() {
		if (null != this.store) {
			return this.store;
		}
		ValueExpression _ve = getValueExpression("store");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>store</code> property.
	 * </p>
	 */
	public void setStore(Object store) {
		this.store = store;
		this.handleConfig("store", store);
	}

	private Object tbar;

	/**
	 * The top toolbar of the control. This can be a <a
	 * href="output/Ext.Toolbar.html" ext:cls="Ext.Toolbar">Ext.Toolbar</a>
	 * object, a toolbar config, oran array of buttons/button configs to be
	 * added to the toolbar.
	 */
	@ClientConfig(JsonMode.Array)
	public Object getTbar() {
		if (null != this.tbar) {
			return this.tbar;
		}
		ValueExpression _ve = getValueExpression("tbar");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>tbar</code> property.
	 * </p>
	 */
	public void setTbar(Object tbar) {
		this.tbar = tbar;
		this.handleConfig("tbar", tbar);
	}

	private String valueField;

	/**
	 * Name/Index of the desired value field in thedataset (defaults to 1).
	 */
	public String getValueField() {
		if (null != this.valueField) {
			return this.valueField;
		}
		ValueExpression _ve = getValueExpression("valueField");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>valueField</code> property.
	 * </p>
	 */
	public void setValueField(String valueField) {
		this.valueField = valueField;
		this.handleConfig("valueField", valueField);
	}

	private Object view;

	/**
	 * The <a href="output/Ext.ListView.html"
	 * ext:cls="Ext.ListView">Ext.ListView</a> used to render themultiselect
	 * list.
	 */
	@ClientConfig(JsonMode.Object)
	public Object getView() {
		if (null != this.view) {
			return this.view;
		}
		ValueExpression _ve = getValueExpression("view");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>view</code> property.
	 * </p>
	 */
	public void setView(Object view) {
		this.view = view;
		this.handleConfig("view", view);
	}

	private Integer width;

	/**
	 * Width in pixels of the control (defaults to100).
	 */
	public Integer getWidth() {
		if (null != this.width) {
			return this.width;
		}
		ValueExpression _ve = getValueExpression("width");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>width</code> property.
	 * </p>
	 */
	public void setWidth(Integer width) {
		this.width = width;
		this.handleConfig("width", width);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[20];
		}
		_values[0] = super.saveState(_context);
		_values[1] = allowBlank;
		_values[2] = appendOnly;
		_values[3] = blankText;
		_values[4] = ddReorder;
		_values[5] = delimiter;
		_values[6] = displayField;
		_values[7] = dragGroup;
		_values[8] = dropGroup;
		_values[9] = height;
		_values[10] = legend;
		_values[11] = maxSelections;
		_values[12] = maxSelectionsText;
		_values[13] = minSelections;
		_values[14] = minSelectionsText;
		_values[15] = store;
		_values[16] = tbar;
		_values[17] = valueField;
		_values[18] = view;
		_values[19] = width;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.allowBlank = (Boolean) _values[1];
		this.handleConfig("allowBlank", this.allowBlank);
		this.appendOnly = (String) _values[2];
		this.handleConfig("appendOnly", this.appendOnly);
		this.blankText = (String) _values[3];
		this.handleConfig("blankText", this.blankText);
		this.ddReorder = (Boolean) _values[4];
		this.handleConfig("ddReorder", this.ddReorder);
		this.delimiter = (String) _values[5];
		this.handleConfig("delimiter", this.delimiter);
		this.displayField = (String) _values[6];
		this.handleConfig("displayField", this.displayField);
		this.dragGroup = (Object) _values[7];
		this.handleConfig("dragGroup", this.dragGroup);
		this.dropGroup = (Object) _values[8];
		this.handleConfig("dropGroup", this.dropGroup);
		this.height = (Integer) _values[9];
		this.handleConfig("height", this.height);
		this.legend = (String) _values[10];
		this.handleConfig("legend", this.legend);
		this.maxSelections = (Integer) _values[11];
		this.handleConfig("maxSelections", this.maxSelections);
		this.maxSelectionsText = (String) _values[12];
		this.handleConfig("maxSelectionsText", this.maxSelectionsText);
		this.minSelections = (Integer) _values[13];
		this.handleConfig("minSelections", this.minSelections);
		this.minSelectionsText = (String) _values[14];
		this.handleConfig("minSelectionsText", this.minSelectionsText);
		this.store = (Object) _values[15];
		this.handleConfig("store", this.store);
		this.tbar = (Object) _values[16];
		this.handleConfig("tbar", this.tbar);
		this.valueField = (String) _values[17];
		this.handleConfig("valueField", this.valueField);
		this.view = (Object) _values[18];
		this.handleConfig("view", this.view);
		this.width = (Integer) _values[19];
		this.handleConfig("width", this.width);

	}
}
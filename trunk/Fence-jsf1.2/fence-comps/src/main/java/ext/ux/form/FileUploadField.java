package ext.ux.form;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.UXResources;
import ext.annotation.XType;
import ext.form.TextField;

/**
 *Note:This java code is auto generated by abner,do not edit it. Creates a file
 * upload field.
 */
@XType("fileuploadfield")
@InstanceOf("Ext.ux.form.FileUploadField")
@UXResources(js = "ext[version]/ux/fileuploadfield/FileUploadField.js",css="ext[version]/ux/fileuploadfield/css/fileuploadfield.css")
public class FileUploadField extends TextField {
	public static final String COMPONENT_TYPE = "Ext.ux.form.FileUploadField";
	public static final String COMPONENT_FAMILY = "Ext.ux.form.FileUploadField";

	/**
	 * <p>
	 * Create a new {@link FileUploadField} instance with default property
	 * values.
	 * </p>
	 */
	public FileUploadField() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Object buttonCfg;

	/**
	 * A standard <a href="output/Ext.Button.html"
	 * ext:cls="Ext.Button">Ext.Button</a> config object.
	 */
	@ClientConfig(JsonMode.Object)
	public Object getButtonCfg() {
		if (null != this.buttonCfg) {
			return this.buttonCfg;
		}
		ValueExpression _ve = getValueExpression("buttonCfg");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>buttonCfg</code> property.
	 * </p>
	 */
	public void setButtonCfg(Object buttonCfg) {
		this.buttonCfg = buttonCfg;
		this.handleConfig("buttonCfg", buttonCfg);
	}

	private Integer buttonOffset;

	/**
	 * The number of pixels of space reserved betweenthe button and the text
	 * field (defaults to 3). Note that this only applies if <a href=
	 * "output/Ext.ux.form.FileUploadField.html#Ext.ux.form.FileUploadField-buttonOnly"
	 * ext:member="buttonOnly"
	 * ext:cls="Ext.ux.form.FileUploadField">buttonOnly</a> = false.
	 */
	public Integer getButtonOffset() {
		if (null != this.buttonOffset) {
			return this.buttonOffset;
		}
		ValueExpression _ve = getValueExpression("buttonOffset");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>buttonOffset</code> property.
	 * </p>
	 */
	public void setButtonOffset(Integer buttonOffset) {
		this.buttonOffset = buttonOffset;
		this.handleConfig("buttonOffset", buttonOffset);
	}

	private Boolean buttonOnly;

	/**
	 * True to display the file upload field as a buttonwith no visible text
	 * field (defaults to false). If true, all inherited TextField members will
	 * still be available.
	 */
	public Boolean getButtonOnly() {
		if (null != this.buttonOnly) {
			return this.buttonOnly;
		}
		ValueExpression _ve = getValueExpression("buttonOnly");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>buttonOnly</code> property.
	 * </p>
	 */
	public void setButtonOnly(Boolean buttonOnly) {
		this.buttonOnly = buttonOnly;
		this.handleConfig("buttonOnly", buttonOnly);
	}

	private String buttonText;

	/**
	 * The button text to display on the upload button(defaults to 'Browse...').
	 * Note that if you supply a value for <a href=
	 * "output/Ext.ux.form.FileUploadField.html#Ext.ux.form.FileUploadField-buttonCfg"
	 * ext:member="buttonCfg"
	 * ext:cls="Ext.ux.form.FileUploadField">buttonCfg</a>, the buttonCfg.text
	 * value will be used instead if available.
	 */
	public String getButtonText() {
		if (null != this.buttonText) {
			return this.buttonText;
		}
		ValueExpression _ve = getValueExpression("buttonText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>buttonText</code> property.
	 * </p>
	 */
	public void setButtonText(String buttonText) {
		this.buttonText = buttonText;
		this.handleConfig("buttonText", buttonText);
	}

	private Boolean enableTabbing;

	/**
	 * <tt>true</tt> to enable tabbing. Default is<tt>false</tt>.
	 */
	public Boolean getEnableTabbing() {
		if (null != this.enableTabbing) {
			return this.enableTabbing;
		}
		ValueExpression _ve = getValueExpression("enableTabbing");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>enableTabbing</code> property.
	 * </p>
	 */
	public void setEnableTabbing(Boolean enableTabbing) {
		this.enableTabbing = enableTabbing;
		this.handleConfig("enableTabbing", enableTabbing);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[6];
		}
		_values[0] = super.saveState(_context);
		_values[1] = buttonCfg;
		_values[2] = buttonOffset;
		_values[3] = buttonOnly;
		_values[4] = buttonText;
		_values[5] = enableTabbing;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.buttonCfg = (Object) _values[1];
		this.handleConfig("buttonCfg", this.buttonCfg);
		this.buttonOffset = (Integer) _values[2];
		this.handleConfig("buttonOffset", this.buttonOffset);
		this.buttonOnly = (Boolean) _values[3];
		this.handleConfig("buttonOnly", this.buttonOnly);
		this.buttonText = (String) _values[4];
		this.handleConfig("buttonText", this.buttonText);
		this.enableTabbing = (Boolean) _values[5];
		this.handleConfig("enableTabbing", this.enableTabbing);

	}
}
package ext.ux;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.Component;
import ext.annotation.InstanceOf;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;
import ext.annotation.UXResources;

/**
 *Note:This java code is auto generated by abner,do not edit it. A <a
 * href="output/Ext.StatusBar.html" ext:cls="Ext.StatusBar">Ext.StatusBar</a>
 * plugin that provides automatic error notification when the associated form
 * contains validation errors.
 */
@InstanceOf("Ext.ux.ValidationStatus")
@UXResources(js = "ext[version]/ux/statusbar/ValidationStatus.js")
@ParseConfigMode(id=false,name="plugins",pmode=PersistenceMode.ParentProperty,ui=false,rmode=ReferenceMode.Var)
public class ValidationStatus extends Component {
	public static final String COMPONENT_TYPE = "Ext.ux.ValidationStatus";
	public static final String COMPONENT_FAMILY = "Ext.ux.ValidationStatus";

	/**
	 * <p>
	 * Create a new {@link ValidationStatus} instance with default property
	 * values.
	 * </p>
	 */
	public ValidationStatus() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private String errorIconCls;

	/**
	 * The <a href=
	 * "output/Ext.ux.ValidationStatus.html#Ext.ux.ValidationStatus-iconCls"
	 * ext:member="iconCls" ext:cls="Ext.ux.ValidationStatus">iconCls</a>value
	 * to be applied to the status message when there is a validation error.
	 * Defaults to <tt>'x-status-error'</tt>.
	 */
	public String getErrorIconCls() {
		if (null != this.errorIconCls) {
			return this.errorIconCls;
		}
		ValueExpression _ve = getValueExpression("errorIconCls");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>errorIconCls</code> property.
	 * </p>
	 */
	public void setErrorIconCls(String errorIconCls) {
		this.errorIconCls = errorIconCls;
		this.handleConfig("errorIconCls", errorIconCls);
	}

	private String errorListCls;

	/**
	 * The css class to be used for the error list whenthere are validation
	 * errors. Defaults to <tt>'x-status-error-list'</tt>.
	 */
	public String getErrorListCls() {
		if (null != this.errorListCls) {
			return this.errorListCls;
		}
		ValueExpression _ve = getValueExpression("errorListCls");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>errorListCls</code> property.
	 * </p>
	 */
	public void setErrorListCls(String errorListCls) {
		this.errorListCls = errorListCls;
		this.handleConfig("errorListCls", errorListCls);
	}

	private String showText;

	/**
	 * The <a
	 * href="output/Ext.ux.ValidationStatus.html#Ext.ux.ValidationStatus-text"
	 * ext:member="text" ext:cls="Ext.ux.ValidationStatus">text</a> valueto be
	 * applied when there is a form validation error. Defaults to <tt>'The form has errors (click for details...)'</tt>.
	 */
	public String getShowText() {
		if (null != this.showText) {
			return this.showText;
		}
		ValueExpression _ve = getValueExpression("showText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>showText</code> property.
	 * </p>
	 */
	public void setShowText(String showText) {
		this.showText = showText;
		this.handleConfig("showText", showText);
	}

	private String hideText;

	/**
	 * The <a
	 * href="output/Ext.ux.ValidationStatus.html#Ext.ux.ValidationStatus-text"
	 * ext:member="text" ext:cls="Ext.ux.ValidationStatus">text</a> valueto
	 * display when the error list is displayed. Defaults to <tt>'Click
again to hide the error list'</tt>.
	 */
	public String getHideText() {
		if (null != this.hideText) {
			return this.hideText;
		}
		ValueExpression _ve = getValueExpression("hideText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>hideText</code> property.
	 * </p>
	 */
	public void setHideText(String hideText) {
		this.hideText = hideText;
		this.handleConfig("hideText", hideText);
	}

	private String submitText;

	/**
	 * The <a
	 * href="output/Ext.ux.ValidationStatus.html#Ext.ux.ValidationStatus-text"
	 * ext:member="text" ext:cls="Ext.ux.ValidationStatus">text</a> valueto be
	 * applied when the form is being submitted. Defaults to <tt>'Saving...'</tt>.
	 */
	public String getSubmitText() {
		if (null != this.submitText) {
			return this.submitText;
		}
		ValueExpression _ve = getValueExpression("submitText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>submitText</code> property.
	 * </p>
	 */
	public void setSubmitText(String submitText) {
		this.submitText = submitText;
		this.handleConfig("submitText", submitText);
	}

	private String validIconCls;

	/**
	 * The <a href=
	 * "output/Ext.ux.ValidationStatus.html#Ext.ux.ValidationStatus-iconCls"
	 * ext:member="iconCls" ext:cls="Ext.ux.ValidationStatus">iconCls</a>value
	 * to be applied to the status message when the form validates. Defaults to
	 * <tt>'x-status-valid'</tt>.
	 */
	public String getValidIconCls() {
		if (null != this.validIconCls) {
			return this.validIconCls;
		}
		ValueExpression _ve = getValueExpression("validIconCls");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>validIconCls</code> property.
	 * </p>
	 */
	public void setValidIconCls(String validIconCls) {
		this.validIconCls = validIconCls;
		this.handleConfig("validIconCls", validIconCls);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[7];
		}
		_values[0] = super.saveState(_context);
		_values[1] = errorIconCls;
		_values[2] = errorListCls;
		_values[3] = showText;
		_values[4] = showText;
		_values[5] = submitText;
		_values[6] = validIconCls;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.errorIconCls = (String) _values[1];
		this.handleConfig("errorIconCls", this.errorIconCls);
		this.errorListCls = (String) _values[2];
		this.handleConfig("errorListCls", this.errorListCls);
		this.showText = (String) _values[3];
		this.handleConfig("showText", this.showText);
		this.showText = (String) _values[4];
		this.handleConfig("showText", this.showText);
		this.submitText = (String) _values[5];
		this.handleConfig("submitText", this.submitText);
		this.validIconCls = (String) _values[6];
		this.handleConfig("validIconCls", this.validIconCls);

	}
}
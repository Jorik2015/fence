package ext.ux.tree;

import javax.faces.context.FacesContext;

import ext.tree.TreeLoader;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * A TreeLoader that can convert an XML document into a hierarchy of <a
 * href="output/Ext.tree.TreeNode.html"
 * ext:cls="Ext.tree.TreeNode">Ext.tree.TreeNode</a>s. Any text value included
 * as a text node in the XML will be added to the parent node as an attribute
 * called <tt>innerText</tt>. Also, the tag name of each XML node will be added
 * to the tree node as an attribute called <tt>tagName</tt>.
 * </p>
 * 
 * <p>
 * By default, this class expects that your source XML will provide the
 * necessary attributes on each node as expected by the <a
 * href="output/Ext.tree.TreePanel.html"
 * ext:cls="Ext.tree.TreePanel">Ext.tree.TreePanel</a> to display and load
 * properly. However, you can provide your own custom processing of node
 * attributes by overriding the <a href=
 * "output/Ext.ux.tree.XmlTreeLoader.html#Ext.ux.tree.XmlTreeLoader-processNode"
 * ext:member="processNode" ext:cls="Ext.ux.tree.XmlTreeLoader">processNode</a>
 * method and modifying the attributes as needed before they are used to create
 * the associated TreeNode.
 * </p>
 */
public class XmlTreeLoader extends TreeLoader {
	public static final String COMPONENT_TYPE = "Ext.ux.tree.XmlTreeLoader";

	/**
	 * <p>
	 * Create a new {@link XmlTreeLoader} instance with default property values.
	 * </p>
	 */
	public XmlTreeLoader() {
		super();
		setRendererType(COMPONENT_TYPE);
	}

	public String getFamily() {
		return (COMPONENT_TYPE);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[1];
		}
		_values[0] = super.saveState(_context);

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);

	}
}
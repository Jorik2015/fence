package ext.ux.grid;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;
import ext.annotation.UXResources;
import ext.util.Observable;

/**
 *Note:This java code is auto generated by abner,do not edit it. A GridPanel
 * plugin that enables dynamic column calculations and a dynamically updated
 * grouped summary row.
 */
@InstanceOf("Ext.ux.grid.GroupSummary")
@ParseConfigMode(ui = false, name = "plugins", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Var)
@UXResources(js = "ext[version]/ux/GroupSummary.js",css="ext[version]/ux/css/GroupSummary.css")
public class GroupSummary extends Observable {
	public static final String COMPONENT_TYPE = "Ext.ux.grid.GroupSummary";

	/**
	 * <p>
	 * Create a new {@link GroupSummary} instance with default property values.
	 * </p>
	 */
	public GroupSummary() {
		super();
		setRendererType(COMPONENT_TYPE);
	}

	public String getFamily() {
		return (COMPONENT_TYPE);
	}

	private Object summaryRenderer;

	/**
	 * Renderer example:
	 * 
	 * <pre>
	 * &lt;code&gt;summaryRenderer: &lt;b&gt;function&lt;/b&gt;(v, params, data){
	 *     &lt;b&gt;return&lt;/b&gt; ((v === 0 || v &gt; 1) ? &lt;em&gt;'('&lt;/em&gt; + v +&lt;em&gt;' Tasks)'&lt;/em&gt; : &lt;em&gt;'(1 Task)'&lt;/em&gt;);
	 * },&lt;/code&gt;
	 * </pre>
	 */
	@ClientConfig(JsonMode.Function)
	public Object getSummaryRenderer() {
		if (null != this.summaryRenderer) {
			return this.summaryRenderer;
		}
		ValueExpression _ve = getValueExpression("summaryRenderer");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>summaryRenderer</code> property.
	 * </p>
	 */
	public void setSummaryRenderer(Object summaryRenderer) {
		this.summaryRenderer = summaryRenderer;
		handleConfig("summaryRenderer", summaryRenderer);
	}

	private String summaryType;

	/**
	 * The type of calculation to be used for thecolumn. For options available
	 * see <a href=
	 * "output/Ext.ux.grid.GroupSummary.html#Ext.ux.grid.GroupSummary-Calculations"
	 * ext:member="Calculations"
	 * ext:cls="Ext.ux.grid.GroupSummary">Calculations</a>.
	 */
	public String getSummaryType() {
		if (null != this.summaryType) {
			return this.summaryType;
		}
		ValueExpression _ve = getValueExpression("summaryType");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>summaryType</code> property.
	 * </p>
	 */
	public void setSummaryType(String summaryType) {
		this.summaryType = summaryType;
		handleConfig("summaryType", summaryType);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[3];
		}
		_values[0] = super.saveState(_context);
		_values[1] = summaryRenderer;
		_values[2] = summaryType;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.summaryRenderer = (Object) _values[1];
		this.handleConfig("summaryRenderer", this.summaryRenderer);
		this.summaryType = (String) _values[2];
		this.handleConfig("summaryType", this.summaryType);

	}
}
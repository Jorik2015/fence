package ext.ux.grid.filter;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;
import ext.annotation.UXResources;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * List filters are able to be preloaded/backed by an Ext.data.Store to load
 * their options the first time they are shown. ListFilter utilizes the <a
 * href="output/Ext.ux.menu.ListMenu.html"
 * ext:cls="Ext.ux.menu.ListMenu">Ext.ux.menu.ListMenu</a> component.
 * </p>
 * 
 * <p>
 * Although not shown here, this class accepts all configuration options for <a
 * href="output/Ext.ux.menu.ListMenu.html"
 * ext:cls="Ext.ux.menu.ListMenu">Ext.ux.menu.ListMenu</a>.
 * </p>
 * 
 * <p>
 * <b><u>Example Usage:</u></b>
 * </p>
 * 
 * <pre>
 * <code><b>var</b> filters = <b>new</b> Ext.ux.grid.GridFilters({
 *     ...
 *     filters: [{
 *         type: <em>'list'</em>,
 *         dataIndex: <em>'size'</em>,
 *         phpMode: true,
 *         <i>// options will be used as data to implicitly creates an ArrayStore
 * </i>
 *         options: [<em>'extra small'</em>, <em>'small'</em>, <em>'medium'</em>, <em>'large'</em>, <em>'extra large'</em>]
 *     }]
 * });</code>
 * </pre>
 */
@InstanceOf("Ext.ux.grid.filter.ListFilter")
@UXResources(js = {"ext[version]/ux/gridfilters/menu/ListMenu.js","ext[version]/ux/gridfilters/filter/ListFilter.js"})
@ParseConfigMode(ui = false, name = "filters", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Config)

public class ListFilter extends Filter {
	public static final String COMPONENT_TYPE = "Ext.ux.grid.filter.ListFilter";
	public static final String COMPONENT_FAMILY = "Ext.ux.grid.filter.ListFilter";

	/**
	 * <p>
	 * Create a new {@link ListFilter} instance with default property values.
	 * </p>
	 */
	public ListFilter() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Object options;

	/**
	 * <p>
	 * <code>data</code> to be used to implicitly create a data store to back
	 * this list when the data source is <b>local</b>. If the data for the list
	 * is remote, use the
	 * 
	 * <code><a href="output/Ext.ux.grid.filter.ListFilter.html#Ext.ux.grid.filter.ListFilter-store" ext:member="store" ext:cls="Ext.ux.grid.filter.ListFilter">store</a></code>
	 * config instead.
	 * </p>
	 * 
	 * <br>
	 * <p>
	 * Each item within the provided array may be in one of the following
	 * formats:
	 * </p>
	 * 
	 * <div class="mdetail-params">
	 * <ul>
	 * <li><b>Array</b> :
	 * 
	 * <pre>
	 * <code>options: [
	 *     [11, <em>'extra small'</em>], 
	 *     [18, <em>'small'</em>],
	 *     [22, <em>'medium'</em>],
	 *     [35, <em>'large'</em>],
	 *     [44, <em>'extra large'</em>]
	 * ]</code>
	 * </pre>
	 * 
	 * </li>
	 * 
	 * <li><b>Object</b> :
	 * 
	 * <pre>
	 * <code>labelField: <em>'name'</em>, <i>// override <b>default</b> of <em>'text'</em>
	 * </i>
	 * options: [
	 *     {id: 11, name:<em>'extra small'</em>}, 
	 *     {id: 18, name:<em>'small'</em>}, 
	 *     {id: 22, name:<em>'medium'</em>}, 
	 *     {id: 35, name:<em>'large'</em>}, 
	 *     {id: 44, name:<em>'extra large'</em>} 
	 * ]</code>
	 * </pre>
	 * 
	 * </li>
	 * 
	 * <li><b>String</b> :
	 * 
	 * <pre>
	 * <code>options: [<em>'extra small'</em>, <em>'small'</em>, <em>'medium'</em>, <em>'large'</em>, <em>'extra large'</em>]</code>
	 * </pre>
	 * 
	 * </li>
	 * </ul>
	 * </div>
	 */
	@ClientConfig(JsonMode.Array)
	public Object getOptions() {
		if (null != this.options) {
			return this.options;
		}
		ValueExpression _ve = getValueExpression("options");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>options</code> property.
	 * </p>
	 */
	public void setOptions(Object options) {
		this.options = options;
		this.handleConfig("options", options);
	}

	private Boolean phpMode;

	/**
	 * <p>
	 * Adjust the format of this filter. Defaults to false.
	 * </p>
	 * 
	 * <br>
	 * <p>
	 * When GridFilters <code>@cfg encode = false</code> (default):
	 * </p>
	 * 
	 * <pre>
	 * <code><i>// phpMode == false (<b>default</b>):
	 * </i>
	 * filter[0][data][type] list
	 * filter[0][data][value] value1
	 * filter[0][data][value] value2
	 * filter[0][field] prod 
	 * 
	 * <i>// phpMode == true:
	 * </i>
	 * filter[0][data][type] list
	 * filter[0][data][value] value1, value2
	 * filter[0][field] prod</code>
	 * </pre>
	 * 
	 * When GridFilters <code>@cfg encode = true</code>:
	 * 
	 * <pre>
	 * <code><i>// phpMode == false (<b>default</b>):
	 * </i>
	 * filter : [{<em>"type"</em>:<em>"list"</em>,<em>"value"</em>:[<em>"small"</em>,<em>"medium"</em>],<em>"field"</em>:<em>"size"</em>}]
	 * 
	 * <i>// phpMode == true:
	 * </i>
	 * filter : [{<em>"type"</em>:<em>"list"</em>,<em>"value"</em>:<em>"small,medium"</em>,<em>"field"</em>:<em>"size"</em>}]</code>
	 * </pre>
	 */
	public Boolean getPhpMode() {
		if (null != this.phpMode) {
			return this.phpMode;
		}
		ValueExpression _ve = getValueExpression("phpMode");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>phpMode</code> property.
	 * </p>
	 */
	public void setPhpMode(Boolean phpMode) {
		this.phpMode = phpMode;
		this.handleConfig("phpMode", phpMode);
	}

	private Object store;

	/**
	 * The <a href="output/Ext.data.Store.html"
	 * ext:cls="Ext.data.Store">Ext.data.Store</a> this list should use asits
	 * data source when the data source is <b>remote</b>. If the data for the
	 * list is local, use the
	 * 
	 * <code><a href="output/Ext.ux.grid.filter.ListFilter.html#Ext.ux.grid.filter.ListFilter-options" ext:member="options" ext:cls="Ext.ux.grid.filter.ListFilter">options</a></code>
	 * config instead.
	 */
	@ClientConfig(JsonMode.Object)
	public Object getStore() {
		if (null != this.store) {
			return this.store;
		}
		ValueExpression _ve = getValueExpression("store");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>store</code> property.
	 * </p>
	 */
	public void setStore(Object store) {
		this.store = store;
		this.handleConfig("store", store);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[4];
		}
		_values[0] = super.saveState(_context);
		_values[1] = options;
		_values[2] = phpMode;
		_values[3] = store;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.options = (Object) _values[1];
		this.handleConfig("options", this.options);
		this.phpMode = (Boolean) _values[2];
		this.handleConfig("phpMode", this.phpMode);
		this.store = (Object) _values[3];
		this.handleConfig("store", this.store);

	}
}
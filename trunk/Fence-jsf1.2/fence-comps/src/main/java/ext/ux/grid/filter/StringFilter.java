package ext.ux.grid.filter;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;
import ext.annotation.UXResources;

/**
 *Note:This java code is auto generated by abner,do not edit it. Filter by a
 * configurable Ext.form.TextField
 * 
 * <p>
 * <b><u>Example Usage:</u></b>
 * </p>
 * 
 * <pre>
 * <code><b>var</b> filters = <b>new</b> Ext.ux.grid.GridFilters({
 *     ...
 *     filters: [{
 *         <i>// required configs
 * </i>
 *         type: <em>'string'</em>,
 *         dataIndex: <em>'name'</em>,
 *         
 *         <i>// optional configs
 * </i>
 *         value: <em>'foo'</em>,
 *         active: true, <i>// <b>default</b> is false
 * </i>
 *         iconCls: <em>'ux-gridfilter-text-icon'</em> <i>// <b>default</b>
 * </i>
 *         <i>// any Ext.form.TextField configs accepted
 * </i>
 *     }]
 * });</code>
 * </pre>
 */
@InstanceOf("Ext.ux.grid.filter.StringFilter")
@UXResources(js = "ext[version]/ux/gridfilters/filter/StringFilter.js")
@ParseConfigMode(ui = false, name = "filters", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Config)
public class StringFilter extends Filter {
	public static final String COMPONENT_TYPE = "Ext.ux.grid.filter.StringFilter";
	public static final String COMPONENT_FAMILY = "Ext.ux.grid.filter.StringFilter";

	/**
	 * <p>
	 * Create a new {@link StringFilter} instance with default property values.
	 * </p>
	 */
	public StringFilter() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private String iconCls;

	/**
	 * The iconCls to be applied to the menu item.Defaults to <tt>'ux-gridfilter-text-icon'</tt>.
	 */
	public String getIconCls() {
		if (null != this.iconCls) {
			return this.iconCls;
		}
		ValueExpression _ve = getValueExpression("iconCls");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>iconCls</code> property.
	 * </p>
	 */
	public void setIconCls(String iconCls) {
		this.iconCls = iconCls;
		this.handleConfig("iconCls", iconCls);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[2];
		}
		_values[0] = super.saveState(_context);
		_values[1] = iconCls;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.iconCls = (String) _values[1];
		this.handleConfig("iconCls", this.iconCls);

	}
}
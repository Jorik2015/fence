package ext.ux;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.Toolbar;
import ext.annotation.InstanceOf;
import ext.annotation.UXResources;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * Basic status bar component that can be used as the bottom toolbar of any <a
 * href="output/Ext.Panel.html" ext:cls="Ext.Panel">Ext.Panel</a>. In addition
 * to supporting the standard <a href="output/Ext.Toolbar.html"
 * ext:cls="Ext.Toolbar">Ext.Toolbar</a> interface for adding buttons, menus and
 * other items, the StatusBar provides a greedy status element that can be
 * aligned to either side and has convenient methods for setting the status text
 * and icon. You can also indicate that something is processing using the <a
 * href="output/Ext.ux.StatusBar.html#Ext.ux.StatusBar-showBusy"
 * ext:member="showBusy" ext:cls="Ext.ux.StatusBar">showBusy</a> method.
 * </p>
 * 
 * <p>
 * <b>Note:</b> Although StatusBar supports xtype:'statusbar', at this time
 * Ext.Toolbar (the base class) does not support xtype. For this reason, if you
 * are adding Toolbar items into the StatusBar you must declare it using the
 * "new StatusBar()" syntax for the items to render correctly.
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;new&lt;/b&gt; Ext.Panel({
 *     title: &lt;em&gt;'StatusBar'&lt;/em&gt;,
 *     &lt;i&gt;// etc.&lt;/i&gt;
 *     bbar: &lt;b&gt;new&lt;/b&gt; Ext.ux.StatusBar({
 *         id: &lt;em&gt;'my-status'&lt;/em&gt;,
 * 
 *         &lt;i&gt;// defaults to use when the status is cleared:&lt;/i&gt;
 *         defaultText: &lt;em&gt;'Default status text'&lt;/em&gt;,
 *         defaultIconCls: &lt;em&gt;'&lt;b&gt;default&lt;/b&gt;-icon'&lt;/em&gt;,
 * 
 *         &lt;i&gt;// values to set initially:&lt;/i&gt;
 *         text: &lt;em&gt;'Ready'&lt;/em&gt;,
 *         iconCls: &lt;em&gt;'ready-icon'&lt;/em&gt;,
 * 
 *         &lt;i&gt;// any standard Toolbar items:&lt;/i&gt;
 *         items: [{
 *             text: &lt;em&gt;'A Button'&lt;/em&gt;
 *         }, &lt;em&gt;'-'&lt;/em&gt;, &lt;em&gt;'Plain Text'&lt;/em&gt;]
 *     })
 * });
 * 
 * &lt;i&gt;// Update the status bar later &lt;b&gt;in&lt;/b&gt; code:&lt;/i&gt;
 * &lt;b&gt;var&lt;/b&gt; sb = Ext.getCmp(&lt;em&gt;'my-status'&lt;/em&gt;);
 * sb.setStatus({
 *     text: &lt;em&gt;'OK'&lt;/em&gt;,
 *     iconCls: &lt;em&gt;'ok-icon'&lt;/em&gt;,
 *     clear: true &lt;i&gt;// auto-clear after a set interval&lt;/i&gt;
 * });
 * 
 * &lt;i&gt;// Set the status bar to show that something is processing:&lt;/i&gt;
 * sb.showBusy();
 * 
 * &lt;i&gt;// processing....&lt;/i&gt;
 * 
 * sb.clearStatus(); &lt;i&gt;// once completeed&lt;/i&gt;&lt;/code&gt;
 * </pre>
 */
@UXResources(js = "ext[version]/ux/statusbar/StatusBar.js",css="ext[version]/ux/statusbar/css/StatusBar.css")
@InstanceOf("Ext.ux.StatusBar")
public class StatusBar extends Toolbar {
	public static final String COMPONENT_TYPE = "Ext.ux.StatusBar";

	/**
	 * <p>
	 * Create a new {@link StatusBar} instance with default property values.
	 * </p>
	 */
	public StatusBar() {
		super();
		setRendererType(COMPONENT_TYPE);
	}

	public String getFamily() {
		return (COMPONENT_TYPE);
	}

	private Integer autoClear;

	/**
	 * The number of milliseconds to wait after settingthe status via <a
	 * href="output/Ext.ux.StatusBar.html#Ext.ux.StatusBar-setStatus"
	 * ext:member="setStatus" ext:cls="Ext.ux.StatusBar">setStatus</a> before
	 * automatically clearing the status text and icon (defaults to 5000). Note
	 * that this only applies when passing the <tt>clear</tt> argument to
	 * setStatus since that is the only way to defer clearing the status. This
	 * can be overridden by specifying a different <tt>wait</tt> value in
	 * setStatus. Calls to <a
	 * href="output/Ext.ux.StatusBar.html#Ext.ux.StatusBar-clearStatus"
	 * ext:member="clearStatus" ext:cls="Ext.ux.StatusBar">clearStatus</a>
	 * always clear the status bar immediately and ignore this value.
	 */
	public Integer getAutoClear() {
		if (null != this.autoClear) {
			return this.autoClear;
		}
		ValueExpression _ve = getValueExpression("autoClear");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>autoClear</code> property.
	 * </p>
	 */
	public void setAutoClear(Integer autoClear) {
		this.autoClear = autoClear;
		handleConfig("autoClear", autoClear);
	}

	private String busyIconCls;

	/**
	 * The default <a
	 * href="output/Ext.ux.StatusBar.html#Ext.ux.StatusBar-iconCls"
	 * ext:member="iconCls" ext:cls="Ext.ux.StatusBar">iconCls</a> appliedwhen
	 * calling <a href="output/Ext.ux.StatusBar.html#Ext.ux.StatusBar-showBusy"
	 * ext:member="showBusy" ext:cls="Ext.ux.StatusBar">showBusy</a> (defaults
	 * to 'x-status-busy'). It can be overridden at any time by passing the
	 * <tt>iconCls</tt> argument into <tt>showBusy</tt>. See the iconCls docs
	 * for additional details about customizing the icon.
	 */
	public String getBusyIconCls() {
		if (null != this.busyIconCls) {
			return this.busyIconCls;
		}
		ValueExpression _ve = getValueExpression("busyIconCls");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>busyIconCls</code> property.
	 * </p>
	 */
	public void setBusyIconCls(String busyIconCls) {
		this.busyIconCls = busyIconCls;
		handleConfig("busyIconCls", busyIconCls);
	}

	private String busyText;

	/**
	 * The default <a href="output/Ext.ux.StatusBar.html#Ext.ux.StatusBar-text"
	 * ext:member="text" ext:cls="Ext.ux.StatusBar">text</a> applied whencalling
	 * <a href="output/Ext.ux.StatusBar.html#Ext.ux.StatusBar-showBusy"
	 * ext:member="showBusy" ext:cls="Ext.ux.StatusBar">showBusy</a> (defaults
	 * to 'Loading...'). It can be overridden at any time by passing the
	 * <tt>text</tt> argument into <tt>showBusy</tt>.
	 */
	public String getBusyText() {
		if (null != this.busyText) {
			return this.busyText;
		}
		ValueExpression _ve = getValueExpression("busyText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>busyText</code> property.
	 * </p>
	 */
	public void setBusyText(String busyText) {
		this.busyText = busyText;
		handleConfig("busyText", busyText);
	}

	private String cls;

	/**
	 * The base class applied to the containing elementfor this component on
	 * render (defaults to 'x-statusbar')
	 */
	public String getCls() {
		if (null != this.cls) {
			return this.cls;
		}
		ValueExpression _ve = getValueExpression("cls");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>cls</code> property.
	 * </p>
	 */
	public void setCls(String cls) {
		this.cls = cls;
		handleConfig("cls", cls);
	}

	private String defaultIconCls;

	/**
	 * The default <a
	 * href="output/Ext.ux.StatusBar.html#Ext.ux.StatusBar-iconCls"
	 * ext:member="iconCls" ext:cls="Ext.ux.StatusBar">iconCls</a> value(see the
	 * iconCls docs for additional details about customizing the icon). This
	 * will be used anytime the status bar is cleared with the
	 * <tt>useDefaults:true</tt> option (defaults to '').
	 */
	public String getDefaultIconCls() {
		if (null != this.defaultIconCls) {
			return this.defaultIconCls;
		}
		ValueExpression _ve = getValueExpression("defaultIconCls");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>defaultIconCls</code> property.
	 * </p>
	 */
	public void setDefaultIconCls(String defaultIconCls) {
		this.defaultIconCls = defaultIconCls;
		handleConfig("defaultIconCls", defaultIconCls);
	}

	private String defaultText;

	/**
	 * The default <a href="output/Ext.ux.StatusBar.html#Ext.ux.StatusBar-text"
	 * ext:member="text" ext:cls="Ext.ux.StatusBar">text</a> value. Thiswill be
	 * used anytime the status bar is cleared with the <tt>useDefaults:true</tt>
	 * option (defaults to '').
	 */
	public String getDefaultText() {
		if (null != this.defaultText) {
			return this.defaultText;
		}
		ValueExpression _ve = getValueExpression("defaultText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>defaultText</code> property.
	 * </p>
	 */
	public void setDefaultText(String defaultText) {
		this.defaultText = defaultText;
		handleConfig("defaultText", defaultText);
	}

	private String iconCls;

	/**
	 * A CSS class that will be applied to the statuselement and is expected to
	 * provide a background image that will serve as the status bar icon
	 * (defaults to ''). The class is applied directly to the div that also
	 * contains the status text, so the rule should provide the appropriate
	 * padding on the div to make room for the image. Example usage:
	 * 
	 * <pre>
	 * &lt;code&gt;&lt;i&gt;// Example CSS rule:&lt;/i&gt;
	 * .x-statusbar .x-status-custom {
	 *     padding-left: 25px;
	 *     background: transparent url(images/custom-icon.gif) no-repeat 3px 3px;
	 * }
	 * 
	 * &lt;i&gt;// Initializing the status bar:&lt;/i&gt;
	 * &lt;b&gt;var&lt;/b&gt; sb = &lt;b&gt;new&lt;/b&gt; Ext.ux.StatusBar({
	 *     defaultIconCls: &lt;em&gt;'x-status-custom'&lt;/em&gt;
	 * });
	 * 
	 * &lt;i&gt;// Setting it &lt;b&gt;in&lt;/b&gt; code:&lt;/i&gt;
	 * sb.setStatus({
	 *     text: &lt;em&gt;'New status'&lt;/em&gt;,
	 *     iconCls: &lt;em&gt;'x-status-custom'&lt;/em&gt;
	 * });&lt;/code&gt;
	 * </pre>
	 */
	public String getIconCls() {
		if (null != this.iconCls) {
			return this.iconCls;
		}
		ValueExpression _ve = getValueExpression("iconCls");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>iconCls</code> property.
	 * </p>
	 */
	public void setIconCls(String iconCls) {
		this.iconCls = iconCls;
		handleConfig("iconCls", iconCls);
	}

	private String statusAlign;

	/**
	 * The alignment of the status element within theoverall StatusBar layout.
	 * When the StatusBar is rendered, it creates an internal div containing the
	 * status text and icon. Any additional Toolbar items added in the
	 * StatusBar's <a href="output/Ext.ux.StatusBar.html#Ext.ux.StatusBar-items"
	 * ext:member="items" ext:cls="Ext.ux.StatusBar">items</a> config, or added
	 * via <a href="output/Ext.ux.StatusBar.html#Ext.ux.StatusBar-add"
	 * ext:member="add" ext:cls="Ext.ux.StatusBar">add</a> or any of the
	 * supported add* methods, will be rendered, in added order, to the opposite
	 * side. The status element is greedy, so it will automatically expand to
	 * take up all sapce left over by any other items. Example usage:
	 * 
	 * <pre>
	 * &lt;code&gt;&lt;i&gt;// Create a left-aligned status bar containing a button,&lt;/i&gt;
	 * &lt;i&gt;// separator and text item that will be right-aligned (&lt;b&gt;default&lt;/b&gt;):&lt;/i&gt;
	 * &lt;b&gt;new&lt;/b&gt; Ext.Panel({
	 *     title: &lt;em&gt;'StatusBar'&lt;/em&gt;,
	 *     &lt;i&gt;// etc.&lt;/i&gt;
	 *     bbar: &lt;b&gt;new&lt;/b&gt; Ext.ux.StatusBar({
	 *         defaultText: &lt;em&gt;'Default status text'&lt;/em&gt;,
	 *         id: &lt;em&gt;'status-id'&lt;/em&gt;,
	 *         items: [{
	 *             text: &lt;em&gt;'A Button'&lt;/em&gt;
	 *         }, &lt;em&gt;'-'&lt;/em&gt;, &lt;em&gt;'Plain Text'&lt;/em&gt;]
	 *     })
	 * });
	 * 
	 * &lt;i&gt;// By adding the statusAlign config, this will create the&lt;/i&gt;
	 * &lt;i&gt;// exact same toolbar, except the status and toolbar item&lt;/i&gt;
	 * &lt;i&gt;// layout will be reversed from the previous example:&lt;/i&gt;
	 * &lt;b&gt;new&lt;/b&gt; Ext.Panel({
	 *     title: &lt;em&gt;'StatusBar'&lt;/em&gt;,
	 *     &lt;i&gt;// etc.&lt;/i&gt;
	 *     bbar: &lt;b&gt;new&lt;/b&gt; Ext.ux.StatusBar({
	 *         defaultText: &lt;em&gt;'Default status text'&lt;/em&gt;,
	 *         id: &lt;em&gt;'status-id'&lt;/em&gt;,
	 *         statusAlign: &lt;em&gt;'right'&lt;/em&gt;,
	 *         items: [{
	 *             text: &lt;em&gt;'A Button'&lt;/em&gt;
	 *         }, &lt;em&gt;'-'&lt;/em&gt;, &lt;em&gt;'Plain Text'&lt;/em&gt;]
	 *     })
	 * });&lt;/code&gt;
	 * </pre>
	 */
	public String getStatusAlign() {
		if (null != this.statusAlign) {
			return this.statusAlign;
		}
		ValueExpression _ve = getValueExpression("statusAlign");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>statusAlign</code> property.
	 * </p>
	 */
	public void setStatusAlign(String statusAlign) {
		this.statusAlign = statusAlign;
		handleConfig("statusAlign", statusAlign);
	}

	private String text;

	/**
	 * A string that will be rendered into the statuselement as the status
	 * message (defaults to '');
	 */
	public String getText() {
		if (null != this.text) {
			return this.text;
		}
		ValueExpression _ve = getValueExpression("text");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>text</code> property.
	 * </p>
	 */
	public void setText(String text) {
		this.text = text;
		handleConfig("text", text);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[10];
		}
		_values[0] = super.saveState(_context);
		_values[1] = autoClear;
		_values[2] = busyIconCls;
		_values[3] = busyText;
		_values[4] = cls;
		_values[5] = defaultIconCls;
		_values[6] = defaultText;
		_values[7] = iconCls;
		_values[8] = statusAlign;
		_values[9] = text;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.autoClear = (Integer) _values[1];
		this.handleConfig("autoClear", this.autoClear);
		this.busyIconCls = (String) _values[2];
		this.handleConfig("busyIconCls", this.busyIconCls);
		this.busyText = (String) _values[3];
		this.handleConfig("busyText", this.busyText);
		this.cls = (String) _values[4];
		this.handleConfig("cls", this.cls);
		this.defaultIconCls = (String) _values[5];
		this.handleConfig("defaultIconCls", this.defaultIconCls);
		this.defaultText = (String) _values[6];
		this.handleConfig("defaultText", this.defaultText);
		this.iconCls = (String) _values[7];
		this.handleConfig("iconCls", this.iconCls);
		this.statusAlign = (String) _values[8];
		this.handleConfig("statusAlign", this.statusAlign);
		this.text = (String) _values[9];
		this.handleConfig("text", this.text);

	}
}
package ext.ux.grid.filter;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;
import ext.annotation.UXResources;

/**
 *Note:This java code is auto generated by abner,do not edit it. Boolean
 * filters use unique radio group IDs (so you can have more than one!)
 * 
 * <p>
 * <b><u>Example Usage:</u></b>
 * </p>
 * 
 * <pre>
 * <code><b>var</b> filters = <b>new</b> Ext.ux.grid.GridFilters({
 *     ...
 *     filters: [{
 *         <i>// required configs
 * </i>
 *         type: <em>'boolean'</em>,
 *         dataIndex: <em>'visible'</em>
 * 
 *         <i>// optional configs
 * </i>
 *         defaultValue: null, <i>// leave unselected (false selected by <b>default</b>)
 * </i>
 *         yesText: <em>'Yes'</em>,     <i>// <b>default</b>
 * </i>
 *         noText: <em>'No'</em>        <i>// <b>default</b>
 * </i>
 *     }]
 * });</code>
 * </pre>
 */
@InstanceOf("Ext.ux.grid.filter.BooleanFilter")
@UXResources(js = "ext[version]/ux/gridfilters/filter/BooleanFilter.js")
@ParseConfigMode(ui = false, name = "filters", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Var)
public class BooleanFilter extends Filter {
	public static final String COMPONENT_TYPE = "Ext.ux.grid.filter.BooleanFilter";
	public static final String COMPONENT_FAMILY = "Ext.ux.grid.filter.BooleanFilter";

	/**
	 * <p>
	 * Create a new {@link BooleanFilter} instance with default property values.
	 * </p>
	 */
	public BooleanFilter() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Boolean defaultValue;

	/**
	 * Set this to null if you do not want eitheroption to be checked by
	 * default. Defaults to false.
	 */
	public Boolean getDefaultValue() {
		if (null != this.defaultValue) {
			return this.defaultValue;
		}
		ValueExpression _ve = getValueExpression("defaultValue");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>defaultValue</code> property.
	 * </p>
	 */
	public void setDefaultValue(Boolean defaultValue) {
		this.defaultValue = defaultValue;
		this.handleConfig("defaultValue", defaultValue);
	}

	private String noText;

	/**
	 * Defaults to 'No'.
	 */
	public String getNoText() {
		if (null != this.noText) {
			return this.noText;
		}
		ValueExpression _ve = getValueExpression("noText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>noText</code> property.
	 * </p>
	 */
	public void setNoText(String noText) {
		this.noText = noText;
		this.handleConfig("noText", noText);
	}

	private String yesText;

	/**
	 * Defaults to 'Yes'.
	 */
	public String getYesText() {
		if (null != this.yesText) {
			return this.yesText;
		}
		ValueExpression _ve = getValueExpression("yesText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>yesText</code> property.
	 * </p>
	 */
	public void setYesText(String yesText) {
		this.yesText = yesText;
		this.handleConfig("yesText", yesText);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[4];
		}
		_values[0] = super.saveState(_context);
		_values[1] = defaultValue;
		_values[2] = noText;
		_values[3] = yesText;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.defaultValue = (Boolean) _values[1];
		this.handleConfig("defaultValue", this.defaultValue);
		this.noText = (String) _values[2];
		this.handleConfig("noText", this.noText);
		this.yesText = (String) _values[3];
		this.handleConfig("yesText", this.yesText);

	}
}
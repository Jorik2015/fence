package ext.ux.form;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.UXResources;
import ext.annotation.XType;
import ext.form.Field;

/**
 *Note:This java code is auto generated by abner,do not edit it. A control that
 * allows selection of between two Ext.ux.form.MultiSelect controls.
 */
@XType("itemselector")
@InstanceOf("Ext.ux.form.ItemSelector")
@UXResources(js = "ext[version]/ux/ItemSelector.js")
public class ItemSelector extends Field {
	public static final String COMPONENT_TYPE = "Ext.ux.form.ItemSelector";
	public static final String COMPONENT_FAMILY = "Ext.ux.form.ItemSelector";

	/**
	 * <p>
	 * Create a new {@link ItemSelector} instance with default property values.
	 * </p>
	 */
	public ItemSelector() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Object multiselects;

	/**
	 * An array of <a href="output/Ext.ux.form.MultiSelect.html"
	 * ext:cls="Ext.ux.form.MultiSelect">Ext.ux.form.MultiSelect</a>config
	 * objects, with at least all required parameters (e.g., store)
	 */
	@ClientConfig(JsonMode.Array)
	public Object getMultiselects() {
		if (null != this.multiselects) {
			return this.multiselects;
		}
		ValueExpression _ve = getValueExpression("multiselects");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>multiselects</code> property.
	 * </p>
	 */
	public void setMultiselects(Object multiselects) {
		this.multiselects = multiselects;
		this.handleConfig("multiselects", multiselects);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[2];
		}
		_values[0] = super.saveState(_context);
		_values[1] = multiselects;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.multiselects = (Object) _values[1];
		this.handleConfig("multiselects", this.multiselects);

	}
}
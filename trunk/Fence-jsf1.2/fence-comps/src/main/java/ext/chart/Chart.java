package ext.chart;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.FlashComponent;
import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.XType;

/**
 *Note:This java code is auto generated by abner,do not edit it. The Ext.chart
 * package provides the capability to visualize data with flash based charting.
 * Each chart binds directly to an Ext.data.Store enabling automatic updates of
 * the chart.
 */
@XType("chart")
@InstanceOf("Ext.chart.Chart")
public class Chart extends FlashComponent {
	public static final String COMPONENT_TYPE = "Ext.chart.Chart";
	public static final String COMPONENT_FAMILY = "Ext.chart.Chart";

	/**
	 * <p>
	 * Create a new {@link Chart} instance with default property values.
	 * </p>
	 */
	public Chart() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Object chartStyle;

	/**
	 * Sets styles for this chart. Contains a number ofdefault values. Modifying
	 * this property will override the base styles on the chart.
	 */
	@ClientConfig(JsonMode.Object)
	public Object getChartStyle() {
		if (null != this.chartStyle) {
			return this.chartStyle;
		}
		ValueExpression _ve = getValueExpression("chartStyle");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>chartStyle</code> property.
	 * </p>
	 */
	public void setChartStyle(Object chartStyle) {
		this.chartStyle = chartStyle;
		this.handleConfig("chartStyle", chartStyle);
	}

	private Boolean disableCaching;

	/**
	 * True to add a "cache buster" to the end of thechart url. Defaults to true
	 * for Opera and IE.
	 */
	public Boolean getDisableCaching() {
		if (null != this.disableCaching) {
			return this.disableCaching;
		}
		ValueExpression _ve = getValueExpression("disableCaching");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>disableCaching</code> property.
	 * </p>
	 */
	public void setDisableCaching(Boolean disableCaching) {
		this.disableCaching = disableCaching;
		this.handleConfig("disableCaching", disableCaching);
	}

	private Object extraStyle;

	/**
	 * Contains extra styles that will be added oroverwritten to the default
	 * chartStyle. Defaults to <tt>null</tt>.
	 */
	@ClientConfig(JsonMode.Object)
	public Object getExtraStyle() {
		if (null != this.extraStyle) {
			return this.extraStyle;
		}
		ValueExpression _ve = getValueExpression("extraStyle");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>extraStyle</code> property.
	 * </p>
	 */
	public void setExtraStyle(Object extraStyle) {
		this.extraStyle = extraStyle;
		this.handleConfig("extraStyle", extraStyle);
	}

	private String url;

	/**
	 * The url to load the chart from. This defaults
	 * toExt.chart.Chart.CHART_URL, which should be modified to point to the
	 * local charts resource.
	 */
	public String getUrl() {
		if (null != this.url) {
			return this.url;
		}
		ValueExpression _ve = getValueExpression("url");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>url</code> property.
	 * </p>
	 */
	public void setUrl(String url) {
		this.url = url;
		this.handleConfig("url", url);
	}

	private Object store;

	/**
	 * The <a href="output/Ext.data.Store.html"
	 * ext:cls="Ext.data.Store">Ext.data.Store</a> the grid should use asits
	 * data source (required).
	 */
	@ClientConfig(JsonMode.Object)
	public Object getStore() {
		if (null != this.store) {
			return this.store;
		}
		ValueExpression _ve = getValueExpression("store");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>store</code> property.
	 * </p>
	 */
	public void setStore(Object store) {
		this.store = store;
		this.handleConfig("store", store);
	}
	
	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[6];
		}
		_values[0] = super.saveState(_context);
		_values[1] = chartStyle;
		_values[2] = disableCaching;
		_values[3] = extraStyle;
		_values[4] = url;
		_values[5] = store;
		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.chartStyle = (Object) _values[1];
		this.handleConfig("chartStyle", this.chartStyle);
		this.disableCaching = (Boolean) _values[2];
		this.handleConfig("disableCaching", this.disableCaching);
		this.extraStyle = (Object) _values[3];
		this.handleConfig("extraStyle", this.extraStyle);
		this.url = (String) _values[4];
		this.handleConfig("url", this.url);
		this.store =  _values[5];
		this.handleConfig("store", this.store);
	}
}
package ext;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.XType;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * Basic Toolbar class. Although the
 * <tt><a href="output/Ext.Container.html#Ext.Container-defaultType" ext:member="defaultType" ext:cls="Ext.Container">defaultType</a></tt>
 * for Toolbar is
 * <tt><a href="output/Ext.Button.html" ext:cls="Ext.Button">button</a></tt>,
 * Toolbar elements (child items for the Toolbar container) may be virtually any
 * type of Component. Toolbar elements can be created explicitly via their
 * constructors, or implicitly via their xtypes, and can be
 * <tt><a href="output/Ext.Toolbar.html#Ext.Toolbar-add" ext:member="add" ext:cls="Ext.Toolbar">add</a></tt>
 * ed dynamically.
 * </p>
 * 
 * <p>
 * Some items have shortcut strings for creation:
 * </p>
 * 
 * <pre>
 * &lt;u&gt;Shortcut&lt;/u&gt;  &lt;u&gt;xtype&lt;/u&gt;          &lt;u&gt;Class&lt;/u&gt;                  &lt;u&gt;Description&lt;/u&gt;
 * '-&gt;'      'tbfill'       &lt;a href=&quot;output/Ext.Toolbar.Fill.html&quot; ext:cls=&quot;Ext.Toolbar.Fill&quot;&gt;Ext.Toolbar.Fill&lt;/a&gt;       begin using the right-justified button container
 * '-'       'tbseparator'  &lt;a href=&quot;output/Ext.Toolbar.Separator.html&quot; ext:cls=&quot;Ext.Toolbar.Separator&quot;&gt;Ext.Toolbar.Separator&lt;/a&gt;  add a vertical separator bar between toolbar items
 * ' '       'tbspacer'     &lt;a href=&quot;output/Ext.Toolbar.Spacer.html&quot; ext:cls=&quot;Ext.Toolbar.Spacer&quot;&gt;Ext.Toolbar.Spacer&lt;/a&gt;     add horiztonal space between elements
 * </pre>
 * 
 * Example usage of various elements:
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;var&lt;/b&gt; tb = &lt;b&gt;new&lt;/b&gt; Ext.Toolbar({
 *     renderTo: document.body,
 *     width: 600,
 *     height: 100,
 *     items: [
 *         {
 *             &lt;i&gt;// xtype: &lt;em&gt;'button'&lt;/em&gt;, // &lt;b&gt;default&lt;/b&gt; &lt;b&gt;for&lt;/b&gt; Toolbars, same as &lt;em&gt;'tbbutton'&lt;/em&gt;
 * &lt;/i&gt;
 *             text: &lt;em&gt;'Button'&lt;/em&gt;
 *         },
 *         {
 *             xtype: &lt;em&gt;'splitbutton'&lt;/em&gt;, &lt;i&gt;// same as &lt;em&gt;'tbsplitbutton'&lt;/em&gt;
 * &lt;/i&gt;
 *             text: &lt;em&gt;'Split Button'&lt;/em&gt;
 *         },
 *         &lt;i&gt;// begin using the right-justified button container
 * &lt;/i&gt;
 *         &lt;em&gt;'-&gt;'&lt;/em&gt;, &lt;i&gt;// same as {xtype: &lt;em&gt;'tbfill'&lt;/em&gt;}, // Ext.Toolbar.Fill
 * &lt;/i&gt;
 *         {
 *             xtype: &lt;em&gt;'textfield'&lt;/em&gt;,
 *             name: &lt;em&gt;'field1'&lt;/em&gt;,
 *             emptyText: &lt;em&gt;'enter search term'&lt;/em&gt;
 *         },
 *         &lt;i&gt;// add a vertical separator bar between toolbar items
 * &lt;/i&gt;
 *         &lt;em&gt;'-'&lt;/em&gt;, &lt;i&gt;// same as {xtype: &lt;em&gt;'tbseparator'&lt;/em&gt;} to create Ext.Toolbar.Separator
 * &lt;/i&gt;
 *         &lt;em&gt;'text 1'&lt;/em&gt;, &lt;i&gt;// same as {xtype: &lt;em&gt;'tbtext'&lt;/em&gt;, text: &lt;em&gt;'text1'&lt;/em&gt;} to create Ext.Toolbar.TextItem
 * &lt;/i&gt;
 *         {xtype: &lt;em&gt;'tbspacer'&lt;/em&gt;},&lt;i&gt;// same as &lt;em&gt;' '&lt;/em&gt; to create Ext.Toolbar.Spacer
 * &lt;/i&gt;
 *         &lt;em&gt;'text 2'&lt;/em&gt;,
 *         {xtype: &lt;em&gt;'tbspacer'&lt;/em&gt;, width: 50}, &lt;i&gt;// add a 50px space
 * &lt;/i&gt;
 *         &lt;em&gt;'text 3'&lt;/em&gt;
 *     ]
 * });&lt;/code&gt;
 * </pre>
 * 
 * Example adding a ComboBox within a menu of a button:
 * 
 * <pre>
 * &lt;code&gt;&lt;i&gt;// ComboBox creation
 * &lt;/i&gt;
 * &lt;b&gt;var&lt;/b&gt; combo = &lt;b&gt;new&lt;/b&gt; Ext.form.ComboBox({
 *     store: &lt;b&gt;new&lt;/b&gt; Ext.data.ArrayStore({
 *         autoDestroy: true,
 *         fields: [&lt;em&gt;'initials'&lt;/em&gt;, &lt;em&gt;'fullname'&lt;/em&gt;],
 *         data : [
 *             [&lt;em&gt;'FF'&lt;/em&gt;, &lt;em&gt;'Fred Flintstone'&lt;/em&gt;],
 *             [&lt;em&gt;'BR'&lt;/em&gt;, &lt;em&gt;'Barney Rubble'&lt;/em&gt;]
 *         ]
 *     }),
 *     displayField: &lt;em&gt;'fullname'&lt;/em&gt;,
 *     typeAhead: true,
 *     mode: &lt;em&gt;'local'&lt;/em&gt;,
 *     forceSelection: true,
 *     triggerAction: &lt;em&gt;'all'&lt;/em&gt;,
 *     emptyText: &lt;em&gt;'Select a name...'&lt;/em&gt;,
 *     selectOnFocus: true,
 *     width: 135,
 *     getListParent: &lt;b&gt;function&lt;/b&gt;() {
 *         &lt;b&gt;return&lt;/b&gt; this.el.up(&lt;em&gt;'.x-menu'&lt;/em&gt;);
 *     },
 *     iconCls: &lt;em&gt;'no-icon'&lt;/em&gt; &lt;i&gt;//use iconCls &lt;b&gt;if&lt;/b&gt; placing within menu to shift to right side of menu
 * &lt;/i&gt;
 * });
 * 
 * &lt;i&gt;// put ComboBox &lt;b&gt;in&lt;/b&gt; a Menu
 * &lt;/i&gt;
 * &lt;b&gt;var&lt;/b&gt; menu = &lt;b&gt;new&lt;/b&gt; Ext.menu.Menu({
 *     id: &lt;em&gt;'mainMenu'&lt;/em&gt;,
 *     items: [
 *         combo &lt;i&gt;// A Field &lt;b&gt;in&lt;/b&gt; a Menu
 * &lt;/i&gt;
 *     ]
 * });
 * 
 * &lt;i&gt;// add a Button &lt;b&gt;with&lt;/b&gt; the menu
 * &lt;/i&gt;
 * tb.add({
 *         text:&lt;em&gt;'Button w/ Menu'&lt;/em&gt;,
 *         menu: menu  &lt;i&gt;// assign menu by instance
 * &lt;/i&gt;
 *     });
 * tb.doLayout();&lt;/code&gt;
 * </pre>
 */
@XType("toolbar")
@InstanceOf("Ext.Toolbar")
public class Toolbar extends Container {
	public static final String COMPONENT_TYPE = "Ext.Toolbar";
	public static final String COMPONENT_FAMILY = "Ext.Toolbar";

	/**
	 * <p>
	 * Create a new {@link Toolbar} instance with default property values.
	 * </p>
	 */
	public Toolbar() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private String layout;

	/**
	 * This class assigns a default layout(<code>layout:<em>'<b>toolbar</b>'</em></code>). Developers
	 * <i>may</i> override this configuration option if another layout is
	 * required (the constructor must be passed a configuration object in this
	 * case instead of an array). See <a
	 * href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout"
	 * ext:cls="Ext.Container">Ext.Container.layout</a> for additional
	 * information.
	 */
	public String getLayout() {
		if (null != this.layout) {
			return this.layout;
		}
		ValueExpression _ve = getValueExpression("layout");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>layout</code> property.
	 * </p>
	 */
	public void setLayout(String layout) {
		this.layout = layout;
		this.handleConfig("layout", layout);
	}
	
	private String position;

	public String getPosition() {
		if (null != this.position) {
			return this.position;
		}
		ValueExpression _ve = getValueExpression("position");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>position</code> property.
	 * </p>
	 */
	public void setPosition(String position) {
		this.position = position;
		this.handleConfig("position", position);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[3];
		}
		_values[0] = super.saveState(_context);
		_values[1] = layout;
		_values[2] = position;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.layout = (String) _values[1];
		this.handleConfig("layout", this.layout);
		this.position = (String) _values[2];
		this.handleConfig("position", this.position);

	}
}
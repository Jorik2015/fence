package ext.data;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.util.Observable;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * The class encapsulates a connection to the page's originating domain,
 * allowing requests to be made either to a configured URL, or to a URL
 * specified at request time.
 * </p>
 * 
 * <p>
 * Requests made by this class are asynchronous, and will return immediately. No
 * data from the server will be available to the statement immediately following
 * the <a href="output/Ext.data.Connection.html#Ext.data.Connection-request"
 * ext:member="request" ext:cls="Ext.data.Connection">request</a> call. To
 * process returned data, use a <a href="#request-option-success"
 * ext:member="request-option-success" ext:cls="Ext.data.Connection">success
 * callback</a> in the request options object, or an <a
 * href="output/Ext.data.Connection.html#Ext.data.Connection-requestcomplete"
 * ext:member="requestcomplete" ext:cls="Ext.data.Connection">event
 * listener</a>.
 * </p>
 * 
 * <h3>File Uploads</h3>
 * 
 * <a href="#request-option-isUpload" ext:member="request-option-isUpload"
 * ext:cls="Ext.data.Connection">File uploads</a> are not performed using normal
 * "Ajax" techniques, that is they are <b>not</b> performed using
 * XMLHttpRequests. Instead the form is submitted in the standard manner with
 * the DOM <tt>&lt;form&gt;</tt> element temporarily modified to have its <a
 * href="http://www.w3.org/TR/REC-html40/present/frames.html#adef-target">
 * target</a> set to refer to a dynamically generated, hidden
 * <tt>&lt;iframe&gt;</tt> which is inserted into the document but removed after
 * the return data has been gathered.<br>
 * <br>
 * 
 * 
 * <p>
 * The server response is parsed by the browser to create the document for the
 * IFRAME. If the server is using JSON to send the return object, then the <a
 * href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17">
 * Content-Type</a> header must be set to "text/html" in order to tell the
 * browser to insert the text unchanged into the document body.
 * </p>
 * 
 * <p>
 * Characters which are significant to an HTML parser must be sent as HTML
 * entities, so encode "&lt;" as "&amp;lt;", "&amp;" as "&amp;amp;" etc.
 * </p>
 * 
 * <p>
 * The response text is retrieved from the document, and a fake XMLHttpRequest
 * object is created containing a <tt>responseText</tt> property in order to
 * conform to the requirements of event handlers and callbacks.
 * </p>
 * 
 * <p>
 * Be aware that file upload packets are sent with the content type <a
 * href="http://www.faqs.org/rfcs/rfc2388.html">multipart/form</a> and some
 * server technologies (notably JEE) may require some custom processing in order
 * to retrieve parameter names and parameter values from the packet content.
 * </p>
 */
@InstanceOf("Ext.data.Connection")
public class Connection extends Observable {
	public static final String COMPONENT_TYPE = "Ext.data.Connection";
	public static final String COMPONENT_FAMILY = "Ext.data.Connection";

	/**
	 * <p>
	 * Create a new {@link Connection} instance with default property values.
	 * </p>
	 */
	public Connection() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Boolean autoAbort;

	/**
	 * Whether this request should abort any pendingrequests. (defaults to
	 * false)
	 */
	public Boolean getAutoAbort() {
		if (null != this.autoAbort) {
			return this.autoAbort;
		}
		ValueExpression _ve = getValueExpression("autoAbort");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>autoAbort</code> property.
	 * </p>
	 */
	public void setAutoAbort(Boolean autoAbort) {
		this.autoAbort = autoAbort;
		this.handleConfig("autoAbort", autoAbort);
	}

	private Object defaultHeaders;

	/**
	 * An object containing request headers which areadded to each request made
	 * by this object. (defaults to undefined)
	 */
	@ClientConfig(JsonMode.Object)
	public Object getDefaultHeaders() {
		if (null != this.defaultHeaders) {
			return this.defaultHeaders;
		}
		ValueExpression _ve = getValueExpression("defaultHeaders");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>defaultHeaders</code> property.
	 * </p>
	 */
	public void setDefaultHeaders(Object defaultHeaders) {
		this.defaultHeaders = defaultHeaders;
		this.handleConfig("defaultHeaders", defaultHeaders);
	}

	private Boolean disableCaching;

	/**
	 * True to add a unique cache-buster param to GETrequests. (defaults to
	 * true)
	 */
	public Boolean getDisableCaching() {
		if (null != this.disableCaching) {
			return this.disableCaching;
		}
		ValueExpression _ve = getValueExpression("disableCaching");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>disableCaching</code> property.
	 * </p>
	 */
	public void setDisableCaching(Boolean disableCaching) {
		this.disableCaching = disableCaching;
		this.handleConfig("disableCaching", disableCaching);
	}

	private String disableCachingParam;

	/**
	 * Change the parameter which is sent wentdisabling caching through a cache
	 * buster. Defaults to '_dc'
	 */
	public String getDisableCachingParam() {
		if (null != this.disableCachingParam) {
			return this.disableCachingParam;
		}
		ValueExpression _ve = getValueExpression("disableCachingParam");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>disableCachingParam</code> property.
	 * </p>
	 */
	public void setDisableCachingParam(String disableCachingParam) {
		this.disableCachingParam = disableCachingParam;
		this.handleConfig("disableCachingParam", disableCachingParam);
	}

	private Object extraParams;

	/**
	 * An object containing properties which are used asextra parameters to each
	 * request made by this object. (defaults to undefined)
	 */
	@ClientConfig(JsonMode.Object)
	public Object getExtraParams() {
		if (null != this.extraParams) {
			return this.extraParams;
		}
		ValueExpression _ve = getValueExpression("extraParams");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>extraParams</code> property.
	 * </p>
	 */
	public void setExtraParams(Object extraParams) {
		this.extraParams = extraParams;
		this.handleConfig("extraParams", extraParams);
	}

	private String method;

	/**
	 * The default HTTP method to be used for requests.(defaults to undefined;
	 * if not set, but <a
	 * href="output/Ext.data.Connection.html#Ext.data.Connection-request"
	 * ext:member="request" ext:cls="Ext.data.Connection">request</a> params are
	 * present, POST will be used; otherwise, GET will be used.)
	 */
	public String getMethod() {
		if (null != this.method) {
			return this.method;
		}
		ValueExpression _ve = getValueExpression("method");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>method</code> property.
	 * </p>
	 */
	public void setMethod(String method) {
		this.method = method;
		this.handleConfig("method", method);
	}

	private Integer timeout;

	/**
	 * The timeout in milliseconds to be used forrequests. (defaults to 30000)
	 */
	public Integer getTimeout() {
		if (null != this.timeout) {
			return this.timeout;
		}
		ValueExpression _ve = getValueExpression("timeout");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>timeout</code> property.
	 * </p>
	 */
	public void setTimeout(Integer timeout) {
		this.timeout = timeout;
		this.handleConfig("timeout", timeout);
	}

	private String url;

	/**
	 * <p>
	 * The default URL to be used for requests to the server. Defaults to
	 * undefined.
	 * </p>
	 * 
	 * <p>
	 * The <code>url</code> config may be a function which <i>returns</i> the
	 * URL to use for the Ajax request. The scope (<code><b>this</b></code>
	 * reference) of the function is the <code>scope</code> option passed to the
	 * <a href="output/Ext.data.Connection.html#Ext.data.Connection-request"
	 * ext:member="request" ext:cls="Ext.data.Connection">request</a> method.
	 * </p>
	 */
	public String getUrl() {
		if (null != this.url) {
			return this.url;
		}
		ValueExpression _ve = getValueExpression("url");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>url</code> property.
	 * </p>
	 */
	public void setUrl(String url) {
		this.url = url;
		this.handleConfig("url", url);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[9];
		}
		_values[0] = super.saveState(_context);
		_values[1] = autoAbort;
		_values[2] = defaultHeaders;
		_values[3] = disableCaching;
		_values[4] = disableCachingParam;
		_values[5] = extraParams;
		_values[6] = method;
		_values[7] = timeout;
		_values[8] = url;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.autoAbort = (Boolean) _values[1];
		this.handleConfig("autoAbort", this.autoAbort);
		this.defaultHeaders = (Object) _values[2];
		this.handleConfig("defaultHeaders", this.defaultHeaders);
		this.disableCaching = (Boolean) _values[3];
		this.handleConfig("disableCaching", this.disableCaching);
		this.disableCachingParam = (String) _values[4];
		this.handleConfig("disableCachingParam", this.disableCachingParam);
		this.extraParams = (Object) _values[5];
		this.handleConfig("extraParams", this.extraParams);
		this.method = (String) _values[6];
		this.handleConfig("method", this.method);
		this.timeout = (Integer) _values[7];
		this.handleConfig("timeout", this.timeout);
		this.url = (String) _values[8];
		this.handleConfig("url", this.url);

	}
}
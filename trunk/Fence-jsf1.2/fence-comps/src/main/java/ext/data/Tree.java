package ext.data;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.util.Observable;

/**
 *Note:This java code is auto generated by abner,do not edit it. Represents a
 * tree data structure and bubbles all the events for its nodes. The nodes in
 * the tree have most standard DOM functionality.
 */
@InstanceOf("Ext.data.Tree")
public class Tree extends Observable {
	public static final String COMPONENT_TYPE = "Ext.data.Tree";
	public static final String COMPONENT_FAMILY = "Ext.data.Tree";

	/**
	 * <p>
	 * Create a new {@link Tree} instance with default property values.
	 * </p>
	 */
	public Tree() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private String pathSeparator;

	/**
	 * The token used to separate paths in node ids(defaults to '/').
	 */
	public String getPathSeparator() {
		if (null != this.pathSeparator) {
			return this.pathSeparator;
		}
		ValueExpression _ve = getValueExpression("pathSeparator");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>pathSeparator</code> property.
	 * </p>
	 */
	public void setPathSeparator(String pathSeparator) {
		this.pathSeparator = pathSeparator;
		this.handleConfig("pathSeparator", pathSeparator);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[2];
		}
		_values[0] = super.saveState(_context);
		_values[1] = pathSeparator;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.pathSeparator = (String) _values[1];
		this.handleConfig("pathSeparator", this.pathSeparator);

	}
}
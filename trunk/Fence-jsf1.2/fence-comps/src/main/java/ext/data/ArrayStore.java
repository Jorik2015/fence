package ext.data;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;
import ext.annotation.XType;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * Formerly known as "SimpleStore".
 * </p>
 * 
 * <p>
 * Small helper class to make creating <a href="output/Ext.data.Store.html"
 * ext:cls="Ext.data.Store">Ext.data.Store</a>s from Array data easier. An
 * ArrayStore will be automatically configured with a <a
 * href="output/Ext.data.ArrayReader.html"
 * ext:cls="Ext.data.ArrayReader">Ext.data.ArrayReader</a>.
 * </p>
 * 
 * <p>
 * A store configuration would be something like:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;var&lt;/b&gt; store = &lt;b&gt;new&lt;/b&gt; Ext.data.ArrayStore({
 *     &lt;i&gt;// store configs&lt;/i&gt;
 *     autoDestroy: true,
 *     storeId: &lt;em&gt;'myStore'&lt;/em&gt;,
 *     &lt;i&gt;// reader configs&lt;/i&gt;
 *     idIndex: 0,  
 *     fields: [
 *        &lt;em&gt;'company'&lt;/em&gt;,
 *        {name: &lt;em&gt;'price'&lt;/em&gt;, type: &lt;em&gt;'float'&lt;/em&gt;},
 *        {name: &lt;em&gt;'change'&lt;/em&gt;, type: &lt;em&gt;'float'&lt;/em&gt;},
 *        {name: &lt;em&gt;'pctChange'&lt;/em&gt;, type: &lt;em&gt;'float'&lt;/em&gt;},
 *        {name: &lt;em&gt;'lastChange'&lt;/em&gt;, type: &lt;em&gt;'date'&lt;/em&gt;, dateFormat: &lt;em&gt;'n/j h:ia'&lt;/em&gt;}
 *     ]
 * });&lt;/code&gt;
 * </pre>
 * 
 * <br>
 * <br>
 * 
 * 
 * <p>
 * This store is configured to consume a returned object of the form:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;var&lt;/b&gt; myData = [
 *     [&lt;em&gt;'3m Co'&lt;/em&gt;,71.72,0.02,0.03,&lt;em&gt;'9/1 12:00am'&lt;/em&gt;],
 *     [&lt;em&gt;'Alcoa Inc'&lt;/em&gt;,29.01,0.42,1.47,&lt;em&gt;'9/1 12:00am'&lt;/em&gt;],
 *     [&lt;em&gt;'Boeing Co.'&lt;/em&gt;,75.43,0.53,0.71,&lt;em&gt;'9/1 12:00am'&lt;/em&gt;],
 *     [&lt;em&gt;'Hewlett-Packard Co.'&lt;/em&gt;,36.53,-0.03,-0.08,&lt;em&gt;'9/1 12:00am'&lt;/em&gt;],
 *     [&lt;em&gt;'Wal-Mart Stores, Inc.'&lt;/em&gt;,45.45,0.73,1.63,&lt;em&gt;'9/1 12:00am'&lt;/em&gt;]
 * ];&lt;/code&gt;
 * </pre>
 * 
 * An object literal of this form could also be used as the <a
 * href="output/Ext.data.ArrayStore.html#Ext.data.ArrayStore-data"
 * ext:member="data" ext:cls="Ext.data.ArrayStore">data</a> config option.<br>
 * <br>
 * 
 * 
 * <p>
 * <b>*Note:</b> Although not listed here, this class accepts all of the
 * configuration options of <b><a href="output/Ext.data.ArrayReader.html"
 * ext:cls="Ext.data.ArrayReader">ArrayReader</a></b>.
 * </p>
 */
@XType("arraystore")
@InstanceOf("Ext.data.ArrayStore")
@ParseConfigMode(ui = false, name = "store", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Var)
public class ArrayStore extends Store {
	private static final long serialVersionUID = 7764373892887338504L;
	public static final String COMPONENT_TYPE = "Ext.data.ArrayStore";
	public static final String COMPONENT_FAMILY = "Ext.data.ArrayStore";

	/**
	 * <p>
	 * Create a new {@link ArrayStore} instance with default property values.
	 * </p>
	 */
	public ArrayStore() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}
	
	private Object fields;

	/**
	 * <p>
	 * Either an Array of <a href="output/Ext.data.Field.html"
	 * ext:cls="Ext.data.Field">Field</a> definition objects (which will be
	 * passed to <a href="output/Ext.data.Record.html#Ext.data.Record-create"
	 * ext:member="create" ext:cls="Ext.data.Record">Ext.data.Record.create</a>,
	 * or a <a href="output/Ext.data.Record.html"
	 * ext:cls="Ext.data.Record">Record</a> constructor created from <a
	 * href="output/Ext.data.Record.html#Ext.data.Record-create"
	 * ext:member="create" ext:cls="Ext.data.Record">Ext.data.Record.create</a>.
	 * </p>
	 */
	@ClientConfig(JsonMode.Array)
	public Object getFields() {
		if (null != this.fields) {
			return this.fields;
		}
		ValueExpression _ve = getValueExpression("fields");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>fields</code> property.
	 * </p>
	 */
	public void setFields(Object fields) {
		this.fields = fields;
		this.handleConfig("fields", fields);
	}
	
	private Integer idIndex;

	/**
	 * The subscript within row Array that provides anID for the Record.
	 */
	public Integer getIdIndex() {
		if (null != this.idIndex) {
			return this.idIndex;
		}
		ValueExpression _ve = getValueExpression("idIndex");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>idIndex</code> property.
	 * </p>
	 */
	public void setIdIndex(Integer idIndex) {
		this.idIndex = idIndex;
		this.handleConfig("idIndex", idIndex);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[3];
		}
		_values[0] = super.saveState(_context);
		_values[1] = this.idIndex;
		_values[2] = this.fields;
		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.idIndex = (Integer)_values[1];
		this.handleConfig("idIndex", idIndex);
		this.fields = _values[2];
		this.handleConfig("fields", this.fields);

	}
}
package ext.data;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;
import ext.annotation.XType;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * Small helper class to make creating <a href="output/Ext.data.Store.html"
 * ext:cls="Ext.data.Store">Ext.data.Store</a>s from JSON data easier. A
 * JsonStore will be automatically configured with a <a
 * href="output/Ext.data.JsonReader.html"
 * ext:cls="Ext.data.JsonReader">Ext.data.JsonReader</a>.
 * </p>
 * 
 * <p>
 * A store configuration would be something like:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;var&lt;/b&gt; store = &lt;b&gt;new&lt;/b&gt; Ext.data.JsonStore({
 *     &lt;i&gt;// store configs&lt;/i&gt;
 *     autoDestroy: true,
 *     url: &lt;em&gt;'get-images.php'&lt;/em&gt;,
 *     storeId: &lt;em&gt;'myStore'&lt;/em&gt;,
 *     &lt;i&gt;// reader configs&lt;/i&gt;
 *     root: &lt;em&gt;'images'&lt;/em&gt;,
 *     idProperty: &lt;em&gt;'name'&lt;/em&gt;,  
 *     fields: [&lt;em&gt;'name'&lt;/em&gt;, &lt;em&gt;'url'&lt;/em&gt;, {name:&lt;em&gt;'size'&lt;/em&gt;, type: &lt;em&gt;'float'&lt;/em&gt;}, {name:&lt;em&gt;'lastmod'&lt;/em&gt;, type:&lt;em&gt;'date'&lt;/em&gt;}]
 * });&lt;/code&gt;
 * </pre>
 * 
 * <br>
 * <br>
 * 
 * 
 * <p>
 * This store is configured to consume a returned object of the form:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;{
 *     images: [
 *         {name: &lt;em&gt;'Image one'&lt;/em&gt;, url:&lt;em&gt;'/GetImage.php?id=1'&lt;/em&gt;, size:46.5, lastmod: &lt;b&gt;new&lt;/b&gt; Date(2007, 10, 29)},
 *         {name: &lt;em&gt;'Image Two'&lt;/em&gt;, url:&lt;em&gt;'/GetImage.php?id=2'&lt;/em&gt;, size:43.2, lastmod: &lt;b&gt;new&lt;/b&gt; Date(2007, 10, 30)}
 *     ]
 * }&lt;/code&gt;
 * </pre>
 * 
 * An object literal of this form could also be used as the <a
 * href="output/Ext.data.JsonStore.html#Ext.data.JsonStore-data"
 * ext:member="data" ext:cls="Ext.data.JsonStore">data</a> config option.<br>
 * <br>
 * 
 * 
 * <p>
 * <b>*Note:</b> Although not listed here, this class accepts all of the
 * configuration options of <b><a href="output/Ext.data.JsonReader.html"
 * ext:cls="Ext.data.JsonReader">JsonReader</a></b>.
 * </p>
 */
@XType("jsonstore")
@InstanceOf("Ext.data.JsonStore")
@ParseConfigMode(ui = false, name = "store", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Var)
public class JsonStore extends Store {
	private static final long serialVersionUID = -1415951837484325805L;
	public static final String COMPONENT_TYPE = "Ext.data.JsonStore";
	public static final String COMPONENT_FAMILY = "Ext.data.JsonStore";
	
	public final static String ROOT_KEY = "data";
	public final static String TOTALPROPERTY_KEY = "total";
	public final static String SUCCESSPROPERTY_KEY = "success";

	/**
	 * <p>
	 * Create a new {@link JsonStore} instance with default property values.
	 * </p>
	 */
	public JsonStore() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private String idProperty;

	/**
	 * [id] Name of the property within a row objectthat contains a record
	 * identifier value. Defaults to <tt>id</tt>
	 */
	public String getIdProperty() {
		if (null != this.idProperty) {
			return this.idProperty;
		}
		ValueExpression _ve = getValueExpression("idProperty");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>idProperty</code> property.
	 * </p>
	 */
	public void setIdProperty(String idProperty) {
		this.idProperty = idProperty;
		this.handleConfig("idProperty", idProperty);
	}

	private String root = ROOT_KEY;

	/**
	 * [undefined] <b>Required</b>. The name of theproperty which contains the
	 * Array of row objects. Defaults to <tt>undefined</tt>. An exception will
	 * be thrown if the root property is undefined. The data packet value for
	 * this property should be an empty array to clear the data or show no data.
	 */
	public String getRoot() {
		if (null != this.root) {
			return this.root;
		}
		ValueExpression _ve = getValueExpression("root");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>root</code> property.
	 * </p>
	 */
	public void setRoot(String root) {
		this.root = root;
		this.handleConfig("root", root);
	}

	private String successProperty = SUCCESSPROPERTY_KEY;

	/**
	 * [success] Name of the property from which toretrieve the success
	 * attribute. Defaults to <tt>success</tt>. See <a
	 * href="output/Ext.data.DataProxy.html"
	 * ext:cls="Ext.data.DataProxy">Ext.data.DataProxy</a>.<a
	 * href="output/Ext.data.DataProxy.html#Ext.data.DataProxy-exception"
	 * ext:member="exception" ext:cls="Ext.data.DataProxy">exception</a> for
	 * additional information.
	 */
	public String getSuccessProperty() {
		if (null != this.successProperty) {
			return this.successProperty;
		}
		ValueExpression _ve = getValueExpression("successProperty");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>successProperty</code> property.
	 * </p>
	 */
	public void setSuccessProperty(String successProperty) {
		this.successProperty = successProperty;
		this.handleConfig("successProperty", successProperty);
	}

	private String totalProperty = TOTALPROPERTY_KEY;

	/**
	 * [total] Name of the property from which toretrieve the total number of
	 * records in the dataset. This is only needed if the whole dataset is not
	 * passed in one go, but is being paged from the remote server. Defaults to
	 * <tt>total</tt>.
	 */
	public String getTotalProperty() {
		if (null != this.totalProperty) {
			return this.totalProperty;
		}
		ValueExpression _ve = getValueExpression("totalProperty");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>totalProperty</code> property.
	 * </p>
	 */
	public void setTotalProperty(String totalProperty) {
		this.totalProperty = totalProperty;
		this.handleConfig("totalProperty", totalProperty);
	}

	
	private Object fields;

	/**
	 * <p>
	 * Either an Array of <a href="output/Ext.data.Field.html"
	 * ext:cls="Ext.data.Field">Field</a> definition objects (which will be
	 * passed to <a href="output/Ext.data.Record.html#Ext.data.Record-create"
	 * ext:member="create" ext:cls="Ext.data.Record">Ext.data.Record.create</a>,
	 * or a <a href="output/Ext.data.Record.html"
	 * ext:cls="Ext.data.Record">Record</a> constructor created from <a
	 * href="output/Ext.data.Record.html#Ext.data.Record-create"
	 * ext:member="create" ext:cls="Ext.data.Record">Ext.data.Record.create</a>.
	 * </p>
	 */
	@ClientConfig(JsonMode.Array)
	public Object getFields() {
		if (null != this.fields) {
			return this.fields;
		}
		ValueExpression _ve = getValueExpression("fields");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>fields</code> property.
	 * </p>
	 */
	public void setFields(Object fields) {
		this.fields = fields;
		this.handleConfig("fields", fields);
	}
	
	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[6];
		}
		_values[0] = super.saveState(_context);
		_values[1] = idProperty;
		_values[2] = root;
		_values[3] = successProperty;
		_values[4] = totalProperty;
		_values[5] = fields;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.idProperty = (String) _values[1];
		this.handleConfig("idProperty", this.idProperty);
		this.root = (String) _values[2];
		this.handleConfig("root", this.root);
		this.successProperty = (String) _values[3];
		this.handleConfig("successProperty", this.successProperty);
		this.totalProperty = (String) _values[4];
		this.handleConfig("totalProperty", this.totalProperty);
		this.fields = _values[5];
		this.handleConfig("fields",this.fields);

	}
}
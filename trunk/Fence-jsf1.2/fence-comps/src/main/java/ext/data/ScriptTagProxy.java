package ext.data;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;

/**
 *Note:This java code is auto generated by abner,do not edit it. An
 * implementation of Ext.data.DataProxy that reads a data object from a URL
 * which may be in a domain other than the originating domain of the running
 * page.<br>
 * <p>
 * <b>Note that if you are retrieving data from a page that is in a domain that
 * is NOT the same as the originating domain of the running page, you must use
 * this class, rather than HttpProxy.</b><br>
 * </p>
 * 
 * <p>
 * The content passed back from a server resource requested by a ScriptTagProxy
 * <b>must</b> be executable JavaScript source code because it is used as the
 * source inside a &lt;script&gt; tag.<br>
 * </p>
 * 
 * <p>
 * In order for the browser to process the returned data, the server must wrap
 * the data object with a call to a callback function, the name of which is
 * passed as a parameter by the ScriptTagProxy. Below is a Java example for a
 * servlet which returns data for either a ScriptTagProxy, or an HttpProxy
 * depending on whether the callback name was passed:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;boolean scriptTag = false;
 * String cb = request.getParameter(&lt;em&gt;&quot;callback&quot;&lt;/em&gt;);
 * &lt;b&gt;if&lt;/b&gt; (cb != null) {
 *     scriptTag = true;
 *     response.setContentType(&lt;em&gt;&quot;text/javascript&quot;&lt;/em&gt;);
 * } &lt;b&gt;else&lt;/b&gt; {
 *     response.setContentType(&lt;em&gt;&quot;application/x-json&quot;&lt;/em&gt;);
 * }
 * Writer out = response.getWriter();
 * &lt;b&gt;if&lt;/b&gt; (scriptTag) {
 *     out.write(cb + &lt;em&gt;&quot;(&quot;&lt;/em&gt;);
 * }
 * out.print(dataBlock.toJsonString());
 * &lt;b&gt;if&lt;/b&gt; (scriptTag) {
 *     out.write(&lt;em&gt;&quot;);&quot;&lt;/em&gt;);
 * }&lt;/code&gt;
 * </pre>
 */
@InstanceOf("Ext.data.ScriptTagProxy")
@ParseConfigMode(ui = false, name = "proxy", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Var)
public class ScriptTagProxy extends DataProxy {
	public static final String COMPONENT_TYPE = "Ext.data.ScriptTagProxy";
	public static final String COMPONENT_FAMILY = "Ext.data.ScriptTagProxy";

	/**
	 * <p>
	 * Create a new {@link ScriptTagProxy} instance with default property
	 * values.
	 * </p>
	 */
	public ScriptTagProxy() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private String callbackParam;

	/**
	 * The name of the parameter to pass to the serverwhich tells the server the
	 * name of the callback function set up by the load call to process the
	 * returned data object. Defaults to "callback".
	 * 
	 * <p>
	 * The server-side processing must read this parameter value, and generate
	 * javascript output which calls this named function passing the data object
	 * as its only parameter.
	 * </p>
	 */
	public String getCallbackParam() {
		if (null != this.callbackParam) {
			return this.callbackParam;
		}
		ValueExpression _ve = getValueExpression("callbackParam");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>callbackParam</code> property.
	 * </p>
	 */
	public void setCallbackParam(String callbackParam) {
		this.callbackParam = callbackParam;
		this.handleConfig("callbackParam", callbackParam);
	}

	private Boolean nocache;

	/**
	 * Defaults to true. Disable caching by adding aunique parameter name to the
	 * request.
	 */
	public Boolean getNocache() {
		if (null != this.nocache) {
			return this.nocache;
		}
		ValueExpression _ve = getValueExpression("nocache");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>nocache</code> property.
	 * </p>
	 */
	public void setNocache(Boolean nocache) {
		this.nocache = nocache;
		this.handleConfig("nocache", nocache);
	}

	private Integer timeout;

	/**
	 * The number of milliseconds to wait for aresponse. Defaults to 30 seconds.
	 */
	public Integer getTimeout() {
		if (null != this.timeout) {
			return this.timeout;
		}
		ValueExpression _ve = getValueExpression("timeout");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>timeout</code> property.
	 * </p>
	 */
	public void setTimeout(Integer timeout) {
		this.timeout = timeout;
		this.handleConfig("timeout", timeout);
	}

	private String url;

	/**
	 * The URL from which to request the dataobject.
	 */
	public String getUrl() {
		if (null != this.url) {
			return this.url;
		}
		ValueExpression _ve = getValueExpression("url");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>url</code> property.
	 * </p>
	 */
	public void setUrl(String url) {
		this.url = url;
		this.handleConfig("url", url);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[5];
		}
		_values[0] = super.saveState(_context);
		_values[1] = callbackParam;
		_values[2] = nocache;
		_values[3] = timeout;
		_values[4] = url;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.callbackParam = (String) _values[1];
		this.handleConfig("callbackParam", this.callbackParam);
		this.nocache = (Boolean) _values[2];
		this.handleConfig("nocache", this.nocache);
		this.timeout = (Integer) _values[3];
		this.handleConfig("timeout", this.timeout);
		this.url = (String) _values[4];
		this.handleConfig("url", this.url);

	}
}
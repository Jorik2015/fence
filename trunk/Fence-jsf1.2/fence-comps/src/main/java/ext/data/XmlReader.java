package ext.data;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * Data reader class to create an Array of <a href="output/Ext.data.Record.html"
 * ext:cls="Ext.data.Record">Ext.data.Record</a> objects from an XML document
 * based on mappings in a provided <a href="output/Ext.data.Record.html"
 * ext:cls="Ext.data.Record">Ext.data.Record</a> constructor.
 * </p>
 * 
 * <p>
 * <b>Note</b>: that in order for the browser to parse a returned XML document,
 * the Content-Type header in the HTTP response must be set to "text/xml" or
 * "application/xml".
 * </p>
 * 
 * <p>
 * Example code:
 * </p>
 * 
 * <pre>
 * <code><b>var</b> Employee = Ext.data.Record.create([
 *    {name: <em>'name'</em>, mapping: <em>'name'</em>},     <i>// <em>"mapping"</em> property not needed <b>if</b> it is the same as <em>"name"</em></i>
 *    {name: <em>'occupation'</em>}                 <i>// This field will use <em>"occupation"</em> as the mapping.</i>
 * ]);
 * <b>var</b> myReader = <b>new</b> Ext.data.XmlReader({
 *    totalProperty: <em>"results"</em>, <i>// The element which contains the total dataset size (optional)</i>
 *    record: <em>"row"</em>,           <i>// The repeated element which contains row information</i>
 *    idProperty: <em>"id"</em>         <i>// The element within the row that provides an ID <b>for</b> the record (optional)</i>
 *    messageProperty: <em>"msg"</em>   <i>// The element within the response that provides a user-feedback message (optional)</i>
 * }, Employee);</code>
 * </pre>
 * 
 * <p>
 * This would consume an XML file like this:
 * </p>
 * 
 * <pre>
 * <code>&lt;?xml version=<em>"1.0"</em> encoding=<em>"UTF-8"</em>?&gt;
 * &lt;dataset&gt;
 *  &lt;results&gt;2&lt;/results&gt;
 *  &lt;row&gt;
 *    &lt;id&gt;1&lt;/id&gt;
 *    &lt;name&gt;Bill&lt;/name&gt;
 *    &lt;occupation&gt;Gardener&lt;/occupation&gt;
 *  &lt;/row&gt;
 *  &lt;row&gt;
 *    &lt;id&gt;2&lt;/id&gt;
 *    &lt;name&gt;Ben&lt;/name&gt;
 *    &lt;occupation&gt;Horticulturalist&lt;/occupation&gt;
 *  &lt;/row&gt;
 * &lt;/dataset&gt;</code>
 * </pre>
 */
@InstanceOf("Ext.data.XmlReader")
@ParseConfigMode(ui = false, name = "reader", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Var)
public class XmlReader extends DataReader {
	public static final String COMPONENT_TYPE = "Ext.data.XmlReader";
	public static final String COMPONENT_FAMILY = "Ext.data.XmlReader";

	/**
	 * <p>
	 * Create a new {@link XmlReader} instance with default property values.
	 * </p>
	 */
	public XmlReader() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private String idPath;

	/**
	 * The DomQuery path relative from the recordelement to the element that
	 * contains a record identifier value.
	 */
	public String getIdPath() {
		if (null != this.idPath) {
			return this.idPath;
		}
		ValueExpression _ve = getValueExpression("idPath");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>idPath</code> property.
	 * </p>
	 */
	public void setIdPath(String idPath) {
		this.idPath = idPath;
		this.handleConfig("idPath", idPath);
	}

	private String record;

	/**
	 * The DomQuery path to the repeated element whichcontains record
	 * information.
	 */
	public String getRecord() {
		if (null != this.record) {
			return this.record;
		}
		ValueExpression _ve = getValueExpression("record");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>record</code> property.
	 * </p>
	 */
	public void setRecord(String record) {
		this.record = record;
		this.handleConfig("record", record);
	}

	private String successProperty;

	/**
	 * The DomQuery path to the success attribute usedby forms.
	 */
	public String getSuccessProperty() {
		if (null != this.successProperty) {
			return this.successProperty;
		}
		ValueExpression _ve = getValueExpression("successProperty");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>successProperty</code> property.
	 * </p>
	 */
	public void setSuccessProperty(String successProperty) {
		this.successProperty = successProperty;
		this.handleConfig("successProperty", successProperty);
	}

	private String totalProperty;

	/**
	 * The DomQuery path from which to retrieve thetotal number of records in
	 * the dataset. This is only needed if the whole dataset is not passed in
	 * one go, but is being paged from the remote server.
	 */
	public String getTotalProperty() {
		if (null != this.totalProperty) {
			return this.totalProperty;
		}
		ValueExpression _ve = getValueExpression("totalProperty");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>totalProperty</code> property.
	 * </p>
	 */
	public void setTotalProperty(String totalProperty) {
		this.totalProperty = totalProperty;
		this.handleConfig("totalProperty", totalProperty);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[5];
		}
		_values[0] = super.saveState(_context);
		_values[1] = idPath;
		_values[2] = record;
		_values[3] = successProperty;
		_values[4] = totalProperty;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.idPath = (String) _values[1];
		this.handleConfig("idPath", this.idPath);
		this.record = (String) _values[2];
		this.handleConfig("record", this.record);
		this.successProperty = (String) _values[3];
		this.handleConfig("successProperty", this.successProperty);
		this.totalProperty = (String) _values[4];
		this.handleConfig("totalProperty", this.totalProperty);

	}
}
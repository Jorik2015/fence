package ext.data;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * Data reader class to create an Array of <a href="output/Ext.data.Record.html"
 * ext:cls="Ext.data.Record">Ext.data.Record</a> objects from a JSON response
 * based on mappings in a provided <a href="output/Ext.data.Record.html"
 * ext:cls="Ext.data.Record">Ext.data.Record</a> constructor.
 * </p>
 * 
 * <p>
 * Example code:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;var&lt;/b&gt; Employee = Ext.data.Record.create([
 *     {name: &lt;em&gt;'firstname'&lt;/em&gt;},                  &lt;i&gt;// map the Record&lt;em&gt;'s&lt;/em&gt; &quot;firstname&quot;&lt;/i&gt; field to the row object'&lt;/code&gt;s key of the same name
 *     {name: &lt;em&gt;'job'&lt;/em&gt;, mapping: &lt;em&gt;'occupation'&lt;/em&gt;}  &lt;i&gt;// map the Record&lt;em&gt;'s&lt;/em&gt; &quot;job&quot;&lt;/i&gt; field to the row object's &lt;em&gt;&quot;occupation&quot;&lt;/em&gt; key
 * ]);
 * &lt;b&gt;var&lt;/b&gt; myReader = &lt;b&gt;new&lt;/b&gt; Ext.data.JsonReader(
 *     {                             &lt;i&gt;// The metadata property, &lt;b&gt;with&lt;/b&gt; configuration options:&lt;/i&gt;
 *         totalProperty: &lt;em&gt;&quot;results&quot;&lt;/em&gt;, &lt;i&gt;//   the property which contains the total dataset size (optional)&lt;/i&gt;
 *         root: &lt;em&gt;&quot;rows&quot;&lt;/em&gt;,             &lt;i&gt;//   the property which contains an Array of record data objects&lt;/i&gt;
 *         idProperty: &lt;em&gt;&quot;id&quot;&lt;/em&gt;          &lt;i&gt;//   the property within each row object that provides an ID &lt;b&gt;for&lt;/b&gt; the record (optional)&lt;/i&gt;
 *     },
 *     Employee  &lt;i&gt;// &lt;a href=&quot;output/Ext.data.Record.html&quot; ext:cls=&quot;Ext.data.Record&quot;&gt;Ext.data.Record&lt;/a&gt; constructor that provides mapping &lt;b&gt;for&lt;/b&gt; JSON object&lt;/i&gt;
 * );
 * </pre>
 * 
 * <p>
 * This would consume a JSON data object of the form:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;{
 *     results: 2,  &lt;i&gt;// Reader&lt;em&gt;'s configured totalProperty&lt;/em&gt;
 *     rows: [     &lt;/i&gt; // Reader'&lt;/code&gt;s configured root
 *         { id: 1, firstname: &lt;em&gt;'Bill'&lt;/em&gt;, occupation: &lt;em&gt;'Gardener'&lt;/em&gt; },         &lt;i&gt;// a row object&lt;/i&gt;
 *         { id: 2, firstname: &lt;em&gt;'Ben'&lt;/em&gt; , occupation: &lt;em&gt;'Horticulturalist'&lt;/em&gt; }  &lt;i&gt;// another row object&lt;/i&gt;
 *     ]
 * }
 * </pre>
 * 
 * <p>
 * <b><u>Automatic configuration using metaData</u></b>
 * </p>
 * 
 * <p>
 * It is possible to change a JsonReader's metadata at any time by including a
 * <b><tt>metaData</tt></b> property in the JSON data object. If the JSON data
 * object has a <b><tt>metaData</tt></b> property, a <a
 * href="output/Ext.data.Store.html" ext:cls="Ext.data.Store">Store</a> object
 * using this Reader will reconfigure itself to use the newly provided field
 * definition and fire its <a
 * href="output/Ext.data.Store.html#Ext.data.Store-metachange"
 * ext:member="metachange" ext:cls="Ext.data.Store">metachange</a> event. The
 * metachange event handler may interrogate the <b><tt>metaData</tt></b>
 * property to perform any configuration required. Note that reconfiguring a
 * Store potentially invalidates objects which may refer to Fields or Records
 * which no longer exist.
 * </p>
 * 
 * <p>
 * The <b><tt>metaData</tt></b> property in the JSON data object may contain:
 * </p>
 * 
 * <div class="mdetail-params">
 * <ul>
 * <li>any of the configuration options for this class</li>
 * 
 * <li>a <b>
 * <tt><a href="output/Ext.data.Record.html#Ext.data.Record-fields" ext:member="fields" ext:cls="Ext.data.Record">fields</a></tt>
 * </b> property which the JsonReader will use as an argument to the <a
 * href="output/Ext.data.Record.html#Ext.data.Record-create" ext:member="create"
 * ext:cls="Ext.data.Record">data Record create method</a> in order to configure
 * the layout of the Records it will produce.</li>
 * 
 * <li>a <b>
 * <tt><a href="output/Ext.data.Store.html#Ext.data.Store-sortInfo" ext:member="sortInfo" ext:cls="Ext.data.Store">sortInfo</a></tt>
 * </b> property which the JsonReader will use to set the <a
 * href="output/Ext.data.Store.html"
 * ext:cls="Ext.data.Store">Ext.data.Store</a>'s <a
 * href="output/Ext.data.Store.html#Ext.data.Store-sortInfo"
 * ext:member="sortInfo" ext:cls="Ext.data.Store">sortInfo</a> property</li>
 * 
 * <li>any user-defined properties needed</li>
 * </ul>
 * </div>
 * 
 * <p>
 * To use this facility to send the same data as the example above (without
 * having to code the creation of the Record constructor), you would create the
 * JsonReader like this:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;var&lt;/b&gt; myReader = &lt;b&gt;new&lt;/b&gt; Ext.data.JsonReader();&lt;/code&gt;
 * </pre>
 * 
 * <p>
 * The first data packet from the server would configure the reader by
 * containing a <b><tt>metaData</tt></b> property <b>and</b> the data. For
 * example, the JSON data object might take the form:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;{
 *     metaData: {
 *         idProperty: &lt;em&gt;'id'&lt;/em&gt;,
 *         root: &lt;em&gt;'rows'&lt;/em&gt;,
 *         totalProperty: &lt;em&gt;'results'&lt;/em&gt;,
 *         fields: [
 *             {name: &lt;em&gt;'name'&lt;/em&gt;},
 *             {name: &lt;em&gt;'job'&lt;/em&gt;, mapping: &lt;em&gt;'occupation'&lt;/em&gt;}
 *         ],
 *         sortInfo: {field: &lt;em&gt;'name'&lt;/em&gt;, direction:&lt;em&gt;'ASC'&lt;/em&gt;}, &lt;i&gt;// used by store to set its sortInfo&lt;/i&gt;
 *         foo: &lt;em&gt;'bar'&lt;/em&gt; &lt;i&gt;// custom property&lt;/i&gt;
 *     },
 *     results: 2,
 *     rows: [ &lt;i&gt;// an Array&lt;/i&gt;
 *         { &lt;em&gt;'id'&lt;/em&gt;: 1, &lt;em&gt;'name'&lt;/em&gt;: &lt;em&gt;'Bill'&lt;/em&gt;, occupation: &lt;em&gt;'Gardener'&lt;/em&gt; },
 *         { &lt;em&gt;'id'&lt;/em&gt;: 2, &lt;em&gt;'name'&lt;/em&gt;: &lt;em&gt;'Ben'&lt;/em&gt;, occupation: &lt;em&gt;'Horticulturalist'&lt;/em&gt; }
 *     ]
 * }&lt;/code&gt;
 * </pre>
 */
@InstanceOf("Ext.data.JsonReader")
@ParseConfigMode(ui = false,id= false, name = "reader", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Var)
public class JsonReader extends DataReader {
	public static final String COMPONENT_TYPE = "Ext.data.JsonReader";
	public static final String COMPONENT_FAMILY = "Ext.data.JsonReader";

	/**
	 * <p>
	 * Create a new {@link JsonReader} instance with default property values.
	 * </p>
	 */
	public JsonReader() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private String idProperty;

	/**
	 * [id] Name of the property within a row objectthat contains a record
	 * identifier value. Defaults to <tt>id</tt>
	 */
	public String getIdProperty() {
		if (null != this.idProperty) {
			return this.idProperty;
		}
		ValueExpression _ve = getValueExpression("idProperty");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>idProperty</code> property.
	 * </p>
	 */
	public void setIdProperty(String idProperty) {
		this.idProperty = idProperty;
		this.handleConfig("idProperty", idProperty);
	}

	private String root;

	/**
	 * [undefined] <b>Required</b>. The name of theproperty which contains the
	 * Array of row objects. Defaults to <tt>undefined</tt>. An exception will
	 * be thrown if the root property is undefined. The data packet value for
	 * this property should be an empty array to clear the data or show no data.
	 */
	public String getRoot() {
		if (null != this.root) {
			return this.root;
		}
		ValueExpression _ve = getValueExpression("root");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>root</code> property.
	 * </p>
	 */
	public void setRoot(String root) {
		this.root = root;
		this.handleConfig("root", root);
	}

	private String successProperty = JsonStore.SUCCESSPROPERTY_KEY;

	/**
	 * [success] Name of the property from which toretrieve the success
	 * attribute. Defaults to <tt>success</tt>. See <a
	 * href="output/Ext.data.DataProxy.html"
	 * ext:cls="Ext.data.DataProxy">Ext.data.DataProxy</a>.<a
	 * href="output/Ext.data.DataProxy.html#Ext.data.DataProxy-exception"
	 * ext:member="exception" ext:cls="Ext.data.DataProxy">exception</a> for
	 * additional information.
	 */
	public String getSuccessProperty() {
		if (null != this.successProperty) {
			return this.successProperty;
		}
		ValueExpression _ve = getValueExpression("successProperty");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>successProperty</code> property.
	 * </p>
	 */
	public void setSuccessProperty(String successProperty) {
		this.successProperty = successProperty;
		this.handleConfig("successProperty", successProperty);
	}

	private String totalProperty = JsonStore.TOTALPROPERTY_KEY;

	/**
	 * [total] Name of the property from which toretrieve the total number of
	 * records in the dataset. This is only needed if the whole dataset is not
	 * passed in one go, but is being paged from the remote server. Defaults to
	 * <tt>total</tt>.
	 */
	public String getTotalProperty() {
		if (null != this.totalProperty) {
			return this.totalProperty;
		}
		ValueExpression _ve = getValueExpression("totalProperty");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>totalProperty</code> property.
	 * </p>
	 */
	public void setTotalProperty(String totalProperty) {
		this.totalProperty = totalProperty;
		this.handleConfig("totalProperty", totalProperty);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[5];
		}
		_values[0] = super.saveState(_context);
		_values[1] = idProperty;
		_values[2] = root;
		_values[3] = successProperty;
		_values[4] = totalProperty;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.idProperty = (String) _values[1];
		this.handleConfig("idProperty", this.idProperty);
		this.root = (String) _values[2];
		this.handleConfig("root", this.root);
		this.successProperty = (String) _values[3];
		this.handleConfig("successProperty", this.successProperty);
		this.totalProperty = (String) _values[4];
		this.handleConfig("totalProperty", this.totalProperty);

	}
}
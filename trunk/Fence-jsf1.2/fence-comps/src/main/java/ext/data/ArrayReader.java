package ext.data;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * Data reader class to create an Array of <a href="output/Ext.data.Record.html"
 * ext:cls="Ext.data.Record">Ext.data.Record</a> objects from an Array. Each
 * element of that Array represents a row of data fields. The fields are pulled
 * into a Record object using as a subscript, the <code>mapping</code> property
 * of the field definition if it exists, or the field's ordinal position in the
 * definition.
 * </p>
 * 
 * <p>
 * Example code:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;var&lt;/b&gt; Employee = Ext.data.Record.create([
 *     {name: &lt;em&gt;'name'&lt;/em&gt;, mapping: 1},         &lt;i&gt;// &lt;em&gt;&quot;mapping&quot;&lt;/em&gt; only needed &lt;b&gt;if&lt;/b&gt; an &lt;em&gt;&quot;id&quot;&lt;/em&gt; field is present which&lt;/i&gt;
 *     {name: &lt;em&gt;'occupation'&lt;/em&gt;, mapping: 2}    &lt;i&gt;// precludes using the ordinal position as the index.&lt;/i&gt;
 * ]);
 * &lt;b&gt;var&lt;/b&gt; myReader = &lt;b&gt;new&lt;/b&gt; Ext.data.ArrayReader({
 *     &lt;a href=&quot;output/Ext.data.ArrayReader.html#Ext.data.ArrayReader-idIndex&quot; ext:member=&quot;idIndex&quot; ext:cls=&quot;Ext.data.ArrayReader&quot;&gt;idIndex&lt;/a&gt;: 0
 * }, Employee);&lt;/code&gt;
 * </pre>
 * 
 * <p>
 * This would consume an Array like this:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;[ [1, &lt;em&gt;'Bill'&lt;/em&gt;, &lt;em&gt;'Gardener'&lt;/em&gt;], [2, &lt;em&gt;'Ben'&lt;/em&gt;, &lt;em&gt;'Horticulturalist'&lt;/em&gt;] ]&lt;/code&gt;
 * </pre>
 */
@InstanceOf("Ext.data.ArrayReader")
@ParseConfigMode(ui = false, id= false,name = "reader", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Var)
public class ArrayReader extends JsonReader {
	public static final String COMPONENT_TYPE = "Ext.data.ArrayReader";
	public static final String COMPONENT_FAMILY = "Ext.data.ArrayReader";

	/**
	 * <p>
	 * Create a new {@link ArrayReader} instance with default property values.
	 * </p>
	 */
	public ArrayReader() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Integer idIndex;

	/**
	 * The subscript within row Array that provides anID for the Record.
	 */
	public Integer getIdIndex() {
		if (null != this.idIndex) {
			return this.idIndex;
		}
		ValueExpression _ve = getValueExpression("idIndex");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>idIndex</code> property.
	 * </p>
	 */
	public void setIdIndex(Integer idIndex) {
		this.idIndex = idIndex;
		this.handleConfig("idIndex", idIndex);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[2];
		}
		_values[0] = super.saveState(_context);
		_values[1] = idIndex;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.idIndex = (Integer) _values[1];
		this.handleConfig("idIndex", this.idIndex);

	}
}
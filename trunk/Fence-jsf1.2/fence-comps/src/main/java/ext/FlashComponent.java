package ext;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.XType;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 */
@XType("flash")
@InstanceOf("Ext.FlashComponent")
public class FlashComponent extends BoxComponent {
	public static final String COMPONENT_TYPE = "Ext.FlashComponent";
	public static final String COMPONENT_FAMILY = "Ext.FlashComponent";

	/**
	 * <p>
	 * Create a new {@link FlashComponent} instance with default property
	 * values.
	 * </p>
	 */
	public FlashComponent() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private String backgroundColor;

	/**
	 * The background color of the chart. Defaults to<tt>'#ffffff'</tt>.
	 */
	public String getBackgroundColor() {
		if (null != this.backgroundColor) {
			return this.backgroundColor;
		}
		ValueExpression _ve = getValueExpression("backgroundColor");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>backgroundColor</code> property.
	 * </p>
	 */
	public void setBackgroundColor(String backgroundColor) {
		this.backgroundColor = backgroundColor;
		this.handleConfig("backgroundColor", backgroundColor);
	}

	private Boolean expressInstall;

	/**
	 * True to prompt the user to install flash if notinstalled. Note that this
	 * uses Ext.FlashComponent.EXPRESS_INSTALL_URL, which should be set to the
	 * local resource. Defaults to <tt>false</tt>.
	 */
	public Boolean getExpressInstall() {
		if (null != this.expressInstall) {
			return this.expressInstall;
		}
		ValueExpression _ve = getValueExpression("expressInstall");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>expressInstall</code> property.
	 * </p>
	 */
	public void setExpressInstall(Boolean expressInstall) {
		this.expressInstall = expressInstall;
		this.handleConfig("expressInstall", expressInstall);
	}

	private String flashVersion;

	/**
	 * Indicates the version the flash content waspublished for. Defaults to <tt>'9.0.45'</tt>
	 * .
	 */
	public String getFlashVersion() {
		if (null != this.flashVersion) {
			return this.flashVersion;
		}
		ValueExpression _ve = getValueExpression("flashVersion");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>flashVersion</code> property.
	 * </p>
	 */
	public void setFlashVersion(String flashVersion) {
		this.flashVersion = flashVersion;
		this.handleConfig("flashVersion", flashVersion);
	}

	private String url;

	/**
	 * The URL of the chart to include. Defaults to<tt>undefined</tt>.
	 */
	public String getUrl() {
		if (null != this.url) {
			return this.url;
		}
		ValueExpression _ve = getValueExpression("url");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>url</code> property.
	 * </p>
	 */
	public void setUrl(String url) {
		this.url = url;
		this.handleConfig("url", url);
	}

	private String wmode;

	/**
	 * The wmode of the flash object. This can be usedto control layering.
	 * Defaults to <tt>'opaque'</tt>.
	 */
	public String getWmode() {
		if (null != this.wmode) {
			return this.wmode;
		}
		ValueExpression _ve = getValueExpression("wmode");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>wmode</code> property.
	 * </p>
	 */
	public void setWmode(String wmode) {
		this.wmode = wmode;
		this.handleConfig("wmode", wmode);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[6];
		}
		_values[0] = super.saveState(_context);
		_values[1] = backgroundColor;
		_values[2] = expressInstall;
		_values[3] = flashVersion;
		_values[4] = url;
		_values[5] = wmode;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.backgroundColor = (String) _values[1];
		this.handleConfig("backgroundColor", this.backgroundColor);
		this.expressInstall = (Boolean) _values[2];
		this.handleConfig("expressInstall", this.expressInstall);
		this.flashVersion = (String) _values[3];
		this.handleConfig("flashVersion", this.flashVersion);
		this.url = (String) _values[4];
		this.handleConfig("url", this.url);
		this.wmode = (String) _values[5];
		this.handleConfig("wmode", this.wmode);

	}
}
package ext;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;
import ext.annotation.XType;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * Ext.ListView is a fast and light-weight implentation of a <a
 * href="output/Ext.grid.GridPanel.html" ext:cls="Ext.grid.GridPanel">Grid</a>
 * like view with the following characteristics:
 * </p>
 * 
 * <div class="mdetail-params">
 * <ul>
 * <li>resizable columns</li>
 * 
 * <li>selectable</li>
 * 
 * <li>column widths are initially proportioned by percentage based on the
 * container width and number of columns</li>
 * 
 * <li>uses templates to render the data in any required format</li>
 * 
 * <li>no horizontal scrolling</li>
 * 
 * <li>no editing</li>
 * </ul>
 * </div>
 * 
 * <p>
 * Example usage:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;i&gt;// consume JSON of this form:
 * &lt;/i&gt;
 * {
 *    &lt;em&gt;&quot;images&quot;&lt;/em&gt;:[
 *       {
 *          &lt;em&gt;&quot;name&quot;&lt;/em&gt;:&lt;em&gt;&quot;dance_fever.jpg&quot;&lt;/em&gt;,
 *          &lt;em&gt;&quot;size&quot;&lt;/em&gt;:2067,
 *          &lt;em&gt;&quot;lastmod&quot;&lt;/em&gt;:1236974993000,
 *          &lt;em&gt;&quot;url&quot;&lt;/em&gt;:&lt;em&gt;&quot;images\/thumbs\/dance_fever.jpg&quot;&lt;/em&gt;
 *       },
 *       {
 *          &lt;em&gt;&quot;name&quot;&lt;/em&gt;:&lt;em&gt;&quot;zack_sink.jpg&quot;&lt;/em&gt;,
 *          &lt;em&gt;&quot;size&quot;&lt;/em&gt;:2303,
 *          &lt;em&gt;&quot;lastmod&quot;&lt;/em&gt;:1236974993000,
 *          &lt;em&gt;&quot;url&quot;&lt;/em&gt;:&lt;em&gt;&quot;images\/thumbs\/zack_sink.jpg&quot;&lt;/em&gt;
 *       }
 *    ]
 * } 
 * &lt;b&gt;var&lt;/b&gt; store = &lt;b&gt;new&lt;/b&gt; Ext.data.JsonStore({
 *     url: &lt;em&gt;'get-images.php'&lt;/em&gt;,
 *     root: &lt;em&gt;'images'&lt;/em&gt;,
 *     fields: [
 *         &lt;em&gt;'name'&lt;/em&gt;, &lt;em&gt;'url'&lt;/em&gt;,
 *         {name:&lt;em&gt;'size'&lt;/em&gt;, type: &lt;em&gt;'float'&lt;/em&gt;},
 *         {name:&lt;em&gt;'lastmod'&lt;/em&gt;, type:&lt;em&gt;'date'&lt;/em&gt;, dateFormat:&lt;em&gt;'timestamp'&lt;/em&gt;}
 *     ]
 * });
 * store.load();
 * 
 * &lt;b&gt;var&lt;/b&gt; listView = &lt;b&gt;new&lt;/b&gt; Ext.ListView({
 *     store: store,
 *     multiSelect: true,
 *     emptyText: &lt;em&gt;'No images to display'&lt;/em&gt;,
 *     reserveScrollOffset: true,
 *     columns: [{
 *         header: &lt;em&gt;'File'&lt;/em&gt;,
 *         width: .5,
 *         dataIndex: &lt;em&gt;'name'&lt;/em&gt;
 *     },{
 *         header: &lt;em&gt;'Last Modified'&lt;/em&gt;,
 *         width: .35, 
 *         dataIndex: &lt;em&gt;'lastmod'&lt;/em&gt;,
 *         tpl: &lt;em&gt;'{lastmod:date(&lt;/em&gt;&quot;m-d h:i a&quot;&lt;/code&gt;)}'
 *     },{
 *         header: &lt;em&gt;'Size'&lt;/em&gt;,
 *         dataIndex: &lt;em&gt;'size'&lt;/em&gt;,
 *         tpl: &lt;em&gt;'{size:fileSize}'&lt;/em&gt;, &lt;i&gt;// format using Ext.util.Format.fileSize()
 * &lt;/i&gt;
 *         align: &lt;em&gt;'right'&lt;/em&gt;
 *     }]
 * });
 * 
 * &lt;i&gt;// put it &lt;b&gt;in&lt;/b&gt; a Panel so it looks pretty
 * &lt;/i&gt;
 * &lt;b&gt;var&lt;/b&gt; panel = &lt;b&gt;new&lt;/b&gt; Ext.Panel({
 *     id:&lt;em&gt;'images-view'&lt;/em&gt;,
 *     width:425,
 *     height:250,
 *     collapsible:true,
 *     layout:&lt;em&gt;'fit'&lt;/em&gt;,
 *     title:&lt;em&gt;'Simple ListView &lt;i&gt;(0 items selected)&lt;/i&gt;'&lt;/em&gt;,
 *     items: listView
 * });
 * panel.render(document.body);
 * 
 * &lt;i&gt;// little bit of feedback
 * &lt;/i&gt;
 * listView.on(&lt;em&gt;'selectionchange'&lt;/em&gt;, &lt;b&gt;function&lt;/b&gt;(view, nodes){
 *     &lt;b&gt;var&lt;/b&gt; l = nodes.length;
 *     &lt;b&gt;var&lt;/b&gt; s = l != 1 ? &lt;em&gt;'s'&lt;/em&gt; : &lt;em&gt;''&lt;/em&gt;;
 *     panel.setTitle(&lt;em&gt;'Simple ListView &lt;i&gt;('&lt;/i&gt;+l+&lt;/em&gt;' item'+s+&lt;em&gt;' selected)&lt;/em&gt;');
 * });
 * </pre>
 */
@XType("listview")
@InstanceOf("Ext.ListView")
@ParseConfigMode(name = "view", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Var)
public class ListView extends DataView {
	public static final String COMPONENT_TYPE = "Ext.ListView";
	public static final String COMPONENT_FAMILY = "Ext.ListView";

	/**
	 * <p>
	 * Create a new {@link ListView} instance with default property values.
	 * </p>
	 */
	public ListView() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Boolean columnResize;

	/**
	 * Specify <tt>true</tt> or specify a configurationobject for <a
	 * href="output/Ext.ListView.ColumnResizer.html"
	 * ext:cls="Ext.ListView.ColumnResizer">Ext.ListView.ColumnResizer</a> to
	 * enable the columns to be resizable (defaults to <tt>true</tt>).
	 */
	public Boolean getColumnResize() {
		if (null != this.columnResize) {
			return this.columnResize;
		}
		ValueExpression _ve = getValueExpression("columnResize");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>columnResize</code> property.
	 * </p>
	 */
	public void setColumnResize(Boolean columnResize) {
		this.columnResize = columnResize;
		this.handleConfig("columnResize", columnResize);
	}

	private Boolean columnSort;

	/**
	 * Specify <tt>true</tt> or specify a configurationobject for <a
	 * href="output/Ext.ListView.Sorter.html"
	 * ext:cls="Ext.ListView.Sorter">Ext.ListView.Sorter</a> to enable the
	 * columns to be sortable (defaults to <tt>true</tt>).
	 */
	public Boolean getColumnSort() {
		if (null != this.columnSort) {
			return this.columnSort;
		}
		ValueExpression _ve = getValueExpression("columnSort");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>columnSort</code> property.
	 * </p>
	 */
	public void setColumnSort(Boolean columnSort) {
		this.columnSort = columnSort;
		this.handleConfig("columnSort", columnSort);
	}

	private Object columns;

	/**
	 * An array of column configuration objects, forexample:
	 * 
	 * <pre>
	 * &lt;code&gt;{
	 *     align: &lt;em&gt;'right'&lt;/em&gt;,
	 *     dataIndex: &lt;em&gt;'size'&lt;/em&gt;,
	 *     header: &lt;em&gt;'Size'&lt;/em&gt;,
	 *     tpl: &lt;em&gt;'{size:fileSize}'&lt;/em&gt;,
	 *     width: .35
	 * }&lt;/code&gt;
	 * </pre>
	 * 
	 * Acceptable properties for each column configuration object are:
	 * 
	 * <div class="mdetail-params">
	 * <ul>
	 * <li><b><tt>align</tt></b> : String
	 * 
	 * <div class="sub-desc">Set the CSS text-align property of the column.
	 * Defaults to <tt>'left'</tt>.</div></li>
	 * 
	 * <li><b><tt>dataIndex</tt></b> : String
	 * 
	 * <div class="sub-desc">See <a href="output/Ext.grid.Column.html"
	 * ext:cls="Ext.grid.Column">Ext.grid.Column</a>. <a
	 * href="output/Ext.grid.Column.html#Ext.grid.Column-dataIndex"
	 * ext:member="dataIndex" ext:cls="Ext.grid.Column">dataIndex</a> for
	 * details.</div></li>
	 * 
	 * <li><b><tt>header</tt></b> : String
	 * 
	 * <div class="sub-desc">See <a href="output/Ext.grid.Column.html"
	 * ext:cls="Ext.grid.Column">Ext.grid.Column</a>. <a
	 * href="output/Ext.grid.Column.html#Ext.grid.Column-header"
	 * ext:member="header" ext:cls="Ext.grid.Column">header</a> for
	 * details.</div></li>
	 * 
	 * <li><b><tt>tpl</tt></b> : String
	 * 
	 * <div class="sub-desc">Specify a string to pass as the configuration
	 * string for <a href="output/Ext.XTemplate.html"
	 * ext:cls="Ext.XTemplate">Ext.XTemplate</a>. By default an <a
	 * href="output/Ext.XTemplate.html"
	 * ext:cls="Ext.XTemplate">Ext.XTemplate</a> will be implicitly created
	 * using the <tt>dataIndex</tt>.</div></li>
	 * 
	 * <li><b><tt>width</tt></b> : Number
	 * 
	 * <div class="sub-desc">Percentage of the container width this column
	 * should be allocated. Columns that have no width specified will be
	 * allocated with an equal percentage to fill 100% of the container width.
	 * To easily take advantage of the full container width, leave the width of
	 * at least one column undefined. Note that if you do not want to take up
	 * the full width of the container, the width of every column needs to be
	 * explicitly defined.</div></li>
	 * </ul>
	 * </div>
	 */
	@ClientConfig(JsonMode.Array)
	public Object getColumns() {
		if (null != this.columns) {
			return this.columns;
		}
		ValueExpression _ve = getValueExpression("columns");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>columns</code> property.
	 * </p>
	 */
	public void setColumns(Object columns) {
		this.columns = columns;
		this.handleConfig("columns", columns);
	}

	private Boolean hideHeaders;

	/**
	 * <tt>true</tt> to hide the <a
	 * href="output/Ext.ListView.html#Ext.ListView-internalTpl"
	 * ext:member="internalTpl" ext:cls="Ext.ListView">header row</a>(defaults
	 * to <tt>false</tt> so the <a
	 * href="output/Ext.ListView.html#Ext.ListView-internalTpl"
	 * ext:member="internalTpl" ext:cls="Ext.ListView">header row</a> will be
	 * shown).
	 */
	public Boolean getHideHeaders() {
		if (null != this.hideHeaders) {
			return this.hideHeaders;
		}
		ValueExpression _ve = getValueExpression("hideHeaders");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>hideHeaders</code> property.
	 * </p>
	 */
	public void setHideHeaders(Boolean hideHeaders) {
		this.hideHeaders = hideHeaders;
		this.handleConfig("hideHeaders", hideHeaders);
	}

	private Object internalTpl;

	/**
	 * The template to be used for the header row. See<a
	 * href="output/Ext.ListView.html#Ext.ListView-tpl" ext:member="tpl"
	 * ext:cls="Ext.ListView">tpl</a> for more details.
	 */
	@ClientConfig(JsonMode.Array)
	public Object getInternalTpl() {
		if (null != this.internalTpl) {
			return this.internalTpl;
		}
		ValueExpression _ve = getValueExpression("internalTpl");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>internalTpl</code> property.
	 * </p>
	 */
	public void setInternalTpl(Object internalTpl) {
		this.internalTpl = internalTpl;
		this.handleConfig("internalTpl", internalTpl);
	}

	private String itemSelector;

	/**
	 * Defaults to <tt>'dl'</tt> to work with thepreconfigured <b>
	 * <tt><a href="output/Ext.DataView.html#Ext.DataView-tpl" ext:member="tpl" ext:cls="Ext.DataView">tpl</a></tt>
	 * </b>. This setting specifies the CSS selector (e.g.
	 * <tt>div.some-class</tt> or <tt>span:first-child</tt>) that will be used
	 * to determine what nodes the ListView will be working with.
	 */
	public String getItemSelector() {
		if (null != this.itemSelector) {
			return this.itemSelector;
		}
		ValueExpression _ve = getValueExpression("itemSelector");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>itemSelector</code> property.
	 * </p>
	 */
	public void setItemSelector(String itemSelector) {
		this.itemSelector = itemSelector;
		this.handleConfig("itemSelector", itemSelector);
	}

	private String overClass;

	/**
	 * The CSS class applied when over a row (defaultsto <tt>'x-list-over'</tt>). An example
	 * overriding the default styling:
	 * 
	 * <pre>
	 * &lt;code&gt;.x-list-over {background-color: orange;}&lt;/code&gt;
	 * </pre>
	 */
	public String getOverClass() {
		if (null != this.overClass) {
			return this.overClass;
		}
		ValueExpression _ve = getValueExpression("overClass");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>overClass</code> property.
	 * </p>
	 */
	public void setOverClass(String overClass) {
		this.overClass = overClass;
		this.handleConfig("overClass", overClass);
	}

	private Boolean reserveScrollOffset;

	/**
	 * By default will defer accounting for theconfigured <b>
	 * <tt><a href="output/Ext.ListView.html#Ext.ListView-scrollOffset" ext:member="scrollOffset" ext:cls="Ext.ListView">scrollOffset</a></tt>
	 * </b> for 10 milliseconds. Specify <tt>true</tt> to account for the
	 * configured <b>
	 * <tt><a href="output/Ext.ListView.html#Ext.ListView-scrollOffset" ext:member="scrollOffset" ext:cls="Ext.ListView">scrollOffset</a></tt>
	 * </b> immediately.
	 */
	public Boolean getReserveScrollOffset() {
		if (null != this.reserveScrollOffset) {
			return this.reserveScrollOffset;
		}
		ValueExpression _ve = getValueExpression("reserveScrollOffset");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>reserveScrollOffset</code> property.
	 * </p>
	 */
	public void setReserveScrollOffset(Boolean reserveScrollOffset) {
		this.reserveScrollOffset = reserveScrollOffset;
		this.handleConfig("reserveScrollOffset", reserveScrollOffset);
	}

	private Integer scrollOffset;

	/**
	 * The amount of space to reserve for the scrollbar(defaults to <tt>19</tt>
	 * pixels)
	 */
	public Integer getScrollOffset() {
		if (null != this.scrollOffset) {
			return this.scrollOffset;
		}
		ValueExpression _ve = getValueExpression("scrollOffset");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>scrollOffset</code> property.
	 * </p>
	 */
	public void setScrollOffset(Integer scrollOffset) {
		this.scrollOffset = scrollOffset;
		this.handleConfig("scrollOffset", scrollOffset);
	}

	private String selectedClass;

	/**
	 * The CSS class applied to a selected row (defaultsto <tt>'x-list-selected'</tt>). An example
	 * overriding the default styling:
	 * 
	 * <pre>
	 * &lt;code&gt;.x-list-selected {background-color: yellow;}&lt;/code&gt;
	 * </pre>
	 */
	public String getSelectedClass() {
		if (null != this.selectedClass) {
			return this.selectedClass;
		}
		ValueExpression _ve = getValueExpression("selectedClass");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>selectedClass</code> property.
	 * </p>
	 */
	public void setSelectedClass(String selectedClass) {
		this.selectedClass = selectedClass;
		this.handleConfig("selectedClass", selectedClass);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[11];
		}
		_values[0] = super.saveState(_context);
		_values[1] = columnResize;
		_values[2] = columnSort;
		_values[3] = columns;
		_values[4] = hideHeaders;
		_values[5] = internalTpl;
		_values[6] = itemSelector;
		_values[7] = overClass;
		_values[8] = reserveScrollOffset;
		_values[9] = scrollOffset;
		_values[10] = selectedClass;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.columnResize = (Boolean) _values[1];
		this.handleConfig("columnResize", this.columnResize);
		this.columnSort = (Boolean) _values[2];
		this.handleConfig("columnSort", this.columnSort);
		this.columns = (Object) _values[3];
		this.handleConfig("columns", this.columns);
		this.hideHeaders = (Boolean) _values[4];
		this.handleConfig("hideHeaders", this.hideHeaders);
		this.internalTpl = (Object) _values[5];
		this.handleConfig("internalTpl", this.internalTpl);
		this.itemSelector = (String) _values[6];
		this.handleConfig("itemSelector", this.itemSelector);
		this.overClass = (String) _values[7];
		this.handleConfig("overClass", this.overClass);
		this.reserveScrollOffset = (Boolean) _values[8];
		this.handleConfig("reserveScrollOffset", this.reserveScrollOffset);
		this.scrollOffset = (Integer) _values[9];
		this.handleConfig("scrollOffset", this.scrollOffset);
		this.selectedClass = (String) _values[10];
		this.handleConfig("selectedClass", this.selectedClass);

	}
}
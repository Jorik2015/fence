package ext.layout;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.Layout;
import ext.annotation.LayoutType;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * This layout manager is specifically designed for rendering and managing child
 * Components of <a href="output/Ext.form.FormPanel.html"
 * ext:cls="Ext.form.FormPanel">forms</a>. It is responsible for rendering the
 * labels of <a href="output/Ext.form.Field.html"
 * ext:cls="Ext.form.Field">Field</a>s.
 * </p>
 * 
 * <p>
 * This layout manager is used when a Container is configured with the <tt>layout:'form'</tt>
 * <a href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout"
 * ext:cls="Ext.Container">layout</a> config option, and should generally not
 * need to be created directly via the new keyword. See
 * 
 * <tt><b><a href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout" ext:cls="Ext.Container">Ext.Container.layout</a></b></tt>
 * for additional details.
 * </p>
 * 
 * <p>
 * In an application, it will usually be preferrable to use a <a
 * href="output/Ext.form.FormPanel.html"
 * ext:cls="Ext.form.FormPanel">FormPanel</a> (which is configured with
 * FormLayout as its layout class by default) since it also provides built-in
 * functionality for <a
 * href="output/Ext.form.BasicForm.html#Ext.form.BasicForm-doAction"
 * ext:member="doAction" ext:cls="Ext.form.BasicForm">loading, validating and
 * submitting</a> the form.
 * </p>
 * 
 * <p>
 * A <a href="output/Ext.Container.html" ext:cls="Ext.Container">Container</a>
 * <i>using</i> the FormLayout layout manager (e.g. <a
 * href="output/Ext.form.FormPanel.html"
 * ext:cls="Ext.form.FormPanel">Ext.form.FormPanel</a> or specifying <tt>layout:'form'</tt>
 * ) can also accept the following layout-specific config properties:
 * </p>
 * 
 * <div class="mdetail-params">
 * <ul>
 * <li><b>
 * <tt><a href="output/Ext.form.FormPanel.html#Ext.form.FormPanel-hideLabels" ext:member="hideLabels" ext:cls="Ext.form.FormPanel">hideLabels</a></tt>
 * </b></li>
 * 
 * <li><b>
 * <tt><a href="output/Ext.form.FormPanel.html#Ext.form.FormPanel-labelAlign" ext:member="labelAlign" ext:cls="Ext.form.FormPanel">labelAlign</a></tt>
 * </b></li>
 * 
 * <li><b>
 * <tt><a href="output/Ext.form.FormPanel.html#Ext.form.FormPanel-labelPad" ext:member="labelPad" ext:cls="Ext.form.FormPanel">labelPad</a></tt>
 * </b></li>
 * 
 * <li><b>
 * 
 * <tt><a href="output/Ext.form.FormPanel.html#Ext.form.FormPanel-labelSeparator" ext:member="labelSeparator" ext:cls="Ext.form.FormPanel">labelSeparator</a></tt>
 * </b></li>
 * 
 * <li><b>
 * <tt><a href="output/Ext.form.FormPanel.html#Ext.form.FormPanel-labelWidth" ext:member="labelWidth" ext:cls="Ext.form.FormPanel">labelWidth</a></tt>
 * </b></li>
 * </ul>
 * </div>
 * 
 * <br>
 * <br>
 * 
 * 
 * <p>
 * Any Component (including Fields) managed by FormLayout accepts the following
 * as a config option:
 * </p>
 * 
 * <div class="mdetail-params">
 * <ul>
 * <li><b>
 * <tt><a href="output/Ext.Component.html#Ext.Component-anchor" ext:member="anchor" ext:cls="Ext.Component">anchor</a></tt>
 * </b></li>
 * </ul>
 * </div>
 * 
 * <br>
 * <br>
 * 
 * 
 * <p>
 * Any Component managed by FormLayout may be rendered as a form field (with an
 * associated label) by configuring it with a non-null <b>
 * <tt><a href="output/Ext.Component.html#Ext.Component-fieldLabel" ext:member="fieldLabel" ext:cls="Ext.Component">fieldLabel</a></tt>
 * </b>. Components configured in this way may be configured with the following
 * options which affect the way the FormLayout renders them:
 * </p>
 * 
 * <div class="mdetail-params">
 * <ul>
 * <li><b>
 * <tt><a href="output/Ext.Component.html#Ext.Component-clearCls" ext:member="clearCls" ext:cls="Ext.Component">clearCls</a></tt>
 * </b></li>
 * 
 * <li><b>
 * <tt><a href="output/Ext.Component.html#Ext.Component-fieldLabel" ext:member="fieldLabel" ext:cls="Ext.Component">fieldLabel</a></tt>
 * </b></li>
 * 
 * <li><b>
 * <tt><a href="output/Ext.Component.html#Ext.Component-hideLabel" ext:member="hideLabel" ext:cls="Ext.Component">hideLabel</a></tt>
 * </b></li>
 * 
 * <li><b>
 * <tt><a href="output/Ext.Component.html#Ext.Component-itemCls" ext:member="itemCls" ext:cls="Ext.Component">itemCls</a></tt>
 * </b></li>
 * 
 * <li><b>
 * <tt><a href="output/Ext.Component.html#Ext.Component-labelSeparator" ext:member="labelSeparator" ext:cls="Ext.Component">labelSeparator</a></tt>
 * </b></li>
 * 
 * <li><b>
 * <tt><a href="output/Ext.Component.html#Ext.Component-labelStyle" ext:member="labelStyle" ext:cls="Ext.Component">labelStyle</a></tt>
 * </b></li>
 * </ul>
 * </div>
 * 
 * <br>
 * <br>
 * 
 * 
 * <p>
 * Example usage:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;i&gt;// Required &lt;b&gt;if&lt;/b&gt; showing validation messages&lt;/i&gt;
 * Ext.QuickTips.init();
 * 
 * &lt;i&gt;// While you can create a basic Panel &lt;b&gt;with&lt;/b&gt; layout:&lt;em&gt;'form'&lt;/em&gt;, practically&lt;/i&gt;
 * &lt;i&gt;// you should usually use a FormPanel to also get its form functionality&lt;/i&gt;
 * &lt;i&gt;// since it already creates a FormLayout internally.&lt;/i&gt;
 * &lt;b&gt;var&lt;/b&gt; form = &lt;b&gt;new&lt;/b&gt; Ext.form.FormPanel({
 *     title: &lt;em&gt;'Form Layout'&lt;/em&gt;,
 *     bodyStyle: &lt;em&gt;'padding:15px'&lt;/em&gt;,
 *     width: 350,
 *     defaultType: &lt;em&gt;'textfield'&lt;/em&gt;,
 *     defaults: {
 *         &lt;i&gt;// applied to each contained item&lt;/i&gt;
 *         width: 230,
 *         msgTarget: &lt;em&gt;'side'&lt;/em&gt;
 *     },
 *     items: [{
 *             fieldLabel: &lt;em&gt;'First Name'&lt;/em&gt;,
 *             name: &lt;em&gt;'first'&lt;/em&gt;,
 *             allowBlank: false,
 *             &lt;a href=&quot;output/Ext.Component.html#Ext.Component-labelSeparator&quot; ext:member=&quot;labelSeparator&quot; ext:cls=&quot;Ext.Component&quot;&gt;labelSeparator&lt;/a&gt;: &lt;em&gt;':'&lt;/em&gt; &lt;i&gt;// override labelSeparator layout config&lt;/i&gt;
 *         },{
 *             fieldLabel: &lt;em&gt;'Last Name'&lt;/em&gt;,
 *             name: &lt;em&gt;'last'&lt;/em&gt;
 *         },{
 *             fieldLabel: &lt;em&gt;'Email'&lt;/em&gt;,
 *             name: &lt;em&gt;'email'&lt;/em&gt;,
 *             vtype:&lt;em&gt;'email'&lt;/em&gt;
 *         }, {
 *             xtype: &lt;em&gt;'textarea'&lt;/em&gt;,
 *             hideLabel: true,     &lt;i&gt;// override hideLabels layout config&lt;/i&gt;
 *             name: &lt;em&gt;'msg'&lt;/em&gt;,
 *             anchor: &lt;em&gt;'100% -53'&lt;/em&gt;
 *         }
 *     ],
 *     buttons: [
 *         {text: &lt;em&gt;'Save'&lt;/em&gt;},
 *         {text: &lt;em&gt;'Cancel'&lt;/em&gt;}
 *     ],
 *     layoutConfig: {
 *         &lt;a href=&quot;output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-labelSeparator&quot; ext:member=&quot;labelSeparator&quot; ext:cls=&quot;Ext.layout.FormLayout&quot;&gt;labelSeparator&lt;/a&gt;: &lt;em&gt;'&tilde;'&lt;/em&gt; &lt;i&gt;// superseded by assignment below&lt;/i&gt;
 *     },
 *     &lt;i&gt;// config options applicable to container when layout=&lt;em&gt;'form'&lt;/em&gt;:&lt;/i&gt;
 *     hideLabels: false,
 *     labelAlign: &lt;em&gt;'left'&lt;/em&gt;,   &lt;i&gt;// or &lt;em&gt;'right'&lt;/em&gt; or &lt;em&gt;'top'&lt;/em&gt;&lt;/i&gt;
 *     &lt;a href=&quot;output/Ext.form.FormPanel.html#Ext.form.FormPanel-labelSeparator&quot; ext:member=&quot;labelSeparator&quot; ext:cls=&quot;Ext.form.FormPanel&quot;&gt;labelSeparator&lt;/a&gt;: &lt;em&gt;'&gt;&gt;'&lt;/em&gt;, &lt;i&gt;// takes precedence over layoutConfig value&lt;/i&gt;
 *     labelWidth: 65,       &lt;i&gt;// defaults to 100&lt;/i&gt;
 *     labelPad: 8           &lt;i&gt;// defaults to 5, must specify labelWidth to be honored&lt;/i&gt;
 * });&lt;/code&gt;
 * </pre>
 */
@Layout(LayoutType.form)
@InstanceOf("Ext.layout.FormLayout")
@ParseConfigMode(ui = false, pmode = PersistenceMode.InnerProperty, rmode = ReferenceMode.Config)
public class FormLayout extends AnchorLayout {
	public static final String COMPONENT_TYPE = "Ext.layout.FormLayout";
	public static final String COMPONENT_FAMILY = "Ext.layout.FormLayout";

	/**
	 * <p>
	 * Create a new {@link FormLayout} instance with default property values.
	 * </p>
	 */
	public FormLayout() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Object fieldTpl;

	/**
	 * A <a href="output/Ext.Template.html#Ext.Template-compile"
	 * ext:member="compile" ext:cls="Ext.Template">compile</a>d <a
	 * href="output/Ext.Template.html" ext:cls="Ext.Template">Ext.Template</a>
	 * for rendering the fullywrapped, labeled and styled form Field. Defaults
	 * to:<br>
	 * <br>
	 * 
	 * <pre>
	 * &lt;code&gt;&lt;b&gt;new&lt;/b&gt; Ext.Template(
	 *     '&lt;div class=&lt;em&gt;&quot;x-form-item {itemCls}&quot;&lt;/em&gt; tabIndex=&lt;em&gt;&quot;-1&quot;&lt;/em&gt;&gt;',
	 *         '&lt;label &lt;b&gt;for&lt;/b&gt;=&lt;em&gt;&quot;{id}&quot;&lt;/em&gt; style=&lt;em&gt;&quot;{labelStyle}&quot;&lt;/em&gt; class=&lt;em&gt;&quot;x-form-item-label&quot;&lt;/em&gt;&gt;{label}{labelSeparator}&lt;/label&gt;',
	 *         '&lt;div class=&lt;em&gt;&quot;x-form-element&quot;&lt;/em&gt; id=&lt;em&gt;&quot;x-form-el-{id}&quot;&lt;/em&gt; style=&lt;em&gt;&quot;{elementStyle}&quot;&lt;/em&gt;&gt;',
	 *         '&lt;/div&gt;&lt;div class=&lt;em&gt;&quot;{clearCls}&quot;&lt;/em&gt;&gt;&lt;/div&gt;',
	 *     &lt;em&gt;'&lt;/div&gt;'&lt;/em&gt;
	 * );&lt;/code&gt;
	 * </pre>
	 * 
	 * <p>
	 * This may be specified to produce a different DOM structure when rendering
	 * form Fields.
	 * </p>
	 * 
	 * <p>
	 * A description of the properties within the template follows:
	 * </p>
	 * 
	 * <div class="mdetail-params">
	 * <ul>
	 * <li><b><tt>itemCls</tt></b> : String
	 * 
	 * <div class="sub-desc">The CSS class applied to the outermost div wrapper
	 * that contains this field label and field element (the default class is <tt>'x-form-item'</tt>
	 * and <tt>itemCls</tt> will be added to that). If supplied,
	 * <tt>itemCls</tt> at the field level will override the default
	 * <tt>itemCls</tt> supplied at the container level.</div></li>
	 * 
	 * <li><b><tt>id</tt></b> : String
	 * 
	 * <div class="sub-desc">The id of the Field</div></li>
	 * 
	 * <li><b>
	 * 
	 * <tt><a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-labelStyle" ext:member="labelStyle" ext:cls="Ext.layout.FormLayout">labelStyle</a></tt>
	 * </b> : String
	 * 
	 * <div class="sub-desc">A CSS style specification string to add to the
	 * field label for this field (defaults to <tt>''</tt> or the <a href=
	 * "output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-labelStyle"
	 * ext:member="labelStyle" ext:cls="Ext.layout.FormLayout">layout's value
	 * for <tt>labelStyle</tt></a>).</div></li>
	 * 
	 * <li><b><tt>label</tt></b> : String
	 * 
	 * <div class="sub-desc">The text to display as the label for this field
	 * (defaults to <tt>''</tt>)</div></li>
	 * 
	 * <li><b>
	 * 
	 * <tt><a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-labelSeparator" ext:member="labelSeparator" ext:cls="Ext.layout.FormLayout">labelSeparator</a></tt>
	 * </b> : String
	 * 
	 * <div class="sub-desc">The separator to display after the text of the
	 * label for this field (defaults to a colon <tt>':'</tt> or the <a href=
	 * "output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-labelSeparator"
	 * ext:member="labelSeparator" ext:cls="Ext.layout.FormLayout">layout's
	 * value for labelSeparator</a>). To hide the separator use empty string
	 * ''.</div></li>
	 * 
	 * <li><b><tt>elementStyle</tt></b> : String
	 * 
	 * <div class="sub-desc">The styles text for the input element's
	 * wrapper.</div></li>
	 * 
	 * <li><b><tt>clearCls</tt></b> : String
	 * 
	 * <div class="sub-desc">The CSS class to apply to the special clearing div
	 * rendered directly after each form field wrapper (defaults to <tt>'x-form-clear-left'</tt>)</div></li>
	 * </ul>
	 * </div>
	 * 
	 * <p>
	 * Also see
	 * 
	 * <tt><a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-getTemplateArgs" ext:member="getTemplateArgs" ext:cls="Ext.layout.FormLayout">getTemplateArgs</a></tt>
	 * </p>
	 */
	@ClientConfig(JsonMode.Object)
	public Object getFieldTpl() {
		if (null != this.fieldTpl) {
			return this.fieldTpl;
		}
		ValueExpression _ve = getValueExpression("fieldTpl");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>fieldTpl</code> property.
	 * </p>
	 */
	public void setFieldTpl(Object fieldTpl) {
		this.fieldTpl = fieldTpl;
		this.handleConfig("fieldTpl", fieldTpl);
	}

	private String labelSeparator;

	/**
	 * See <a href="output/Ext.form.FormPanel.html"
	 * ext:cls="Ext.form.FormPanel">Ext.form.FormPanel</a>.<a
	 * href="output/Ext.form.FormPanel.html#Ext.form.FormPanel-labelSeparator"
	 * ext:member="labelSeparator"
	 * ext:cls="Ext.form.FormPanel">labelSeparator</a>. Configuration ofthis
	 * property at the <b>container</b> level takes precedence.
	 */
	public String getLabelSeparator() {
		if (null != this.labelSeparator) {
			return this.labelSeparator;
		}
		ValueExpression _ve = getValueExpression("labelSeparator");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>labelSeparator</code> property.
	 * </p>
	 */
	public void setLabelSeparator(String labelSeparator) {
		this.labelSeparator = labelSeparator;
		this.handleConfig("labelSeparator", labelSeparator);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[3];
		}
		_values[0] = super.saveState(_context);
		_values[1] = fieldTpl;
		_values[2] = labelSeparator;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.fieldTpl = (Object) _values[1];
		this.handleConfig("fieldTpl", this.fieldTpl);
		this.labelSeparator = (String) _values[2];
		this.handleConfig("labelSeparator", this.labelSeparator);

	}
}
package ext.layout;

import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.Layout;
import ext.annotation.LayoutType;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * This is the layout style of choice for creating structural layouts in a
 * multi-column format where the width of each column can be specified as a
 * percentage or fixed width, but the height is allowed to vary based on the
 * content. This class is intended to be extended or created via the
 * layout:'column' <a href="output/Ext.Container.html#Ext.Container-layout"
 * ext:member="layout" ext:cls="Ext.Container">Ext.Container.layout</a> config,
 * and should generally not need to be created directly via the new keyword.
 * </p>
 * 
 * <p>
 * ColumnLayout does not have any direct config options (other than inherited
 * ones), but it does support a specific config property of <b>
 * <tt>columnWidth</tt></b> that can be included in the config of any panel
 * added to it. The layout will use the columnWidth (if present) or width of
 * each panel during layout to determine how to size each panel. If width or
 * columnWidth is not specified for a given panel, its width will default to the
 * panel's width (or auto).
 * </p>
 * 
 * <p>
 * The width property is always evaluated as pixels, and must be a number
 * greater than or equal to 1. The columnWidth property is always evaluated as a
 * percentage, and must be a decimal value greater than 0 and less than 1 (e.g.,
 * .25).
 * </p>
 * 
 * <p>
 * The basic rules for specifying column widths are pretty simple. The logic
 * makes two passes through the set of contained panels. During the first layout
 * pass, all panels that either have a fixed width or none specified (auto) are
 * skipped, but their widths are subtracted from the overall container width.
 * During the second pass, all panels with columnWidths are assigned pixel
 * widths in proportion to their percentages based on the total <b>remaining</b>
 * container width. In other words, percentage width panels are designed to fill
 * the space left over by all the fixed-width and/or auto-width panels. Because
 * of this, while you can specify any number of columns with different
 * percentages, the columnWidths must always add up to 1 (or 100%) when added
 * together, otherwise your layout may not render as expected. Example usage:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;i&gt;// All columns are percentages -- they must add up to 1
 * &lt;/i&gt;
 * &lt;b&gt;var&lt;/b&gt; p = &lt;b&gt;new&lt;/b&gt; Ext.Panel({
 *     title: &lt;em&gt;'Column Layout - Percentage Only'&lt;/em&gt;,
 *     layout:&lt;em&gt;'column'&lt;/em&gt;,
 *     items: [{
 *         title: &lt;em&gt;'Column 1'&lt;/em&gt;,
 *         columnWidth: .25 
 *     },{
 *         title: &lt;em&gt;'Column 2'&lt;/em&gt;,
 *         columnWidth: .6
 *     },{
 *         title: &lt;em&gt;'Column 3'&lt;/em&gt;,
 *         columnWidth: .15
 *     }]
 * });
 * 
 * &lt;i&gt;// Mix of width and columnWidth -- all columnWidth values must add up
 * &lt;/i&gt;
 * &lt;i&gt;// to 1. The first column will take up exactly 120px, and the last two
 * &lt;/i&gt;
 * &lt;i&gt;// columns will fill the remaining container width.
 * &lt;/i&gt;
 * &lt;b&gt;var&lt;/b&gt; p = &lt;b&gt;new&lt;/b&gt; Ext.Panel({
 *     title: &lt;em&gt;'Column Layout - Mixed'&lt;/em&gt;,
 *     layout:&lt;em&gt;'column'&lt;/em&gt;,
 *     items: [{
 *         title: &lt;em&gt;'Column 1'&lt;/em&gt;,
 *         width: 120
 *     },{
 *         title: &lt;em&gt;'Column 2'&lt;/em&gt;,
 *         columnWidth: .8
 *     },{
 *         title: &lt;em&gt;'Column 3'&lt;/em&gt;,
 *         columnWidth: .2
 *     }]
 * });&lt;/code&gt;
 * </pre>
 */
@Layout(LayoutType.column)
@InstanceOf("Ext.layout.ColumnLayout")
@ParseConfigMode(ui = false, pmode = PersistenceMode.InnerProperty, rmode = ReferenceMode.Config)
public class ColumnLayout extends ContainerLayout {
	public static final String COMPONENT_TYPE = "Ext.layout.ColumnLayout";
	public static final String COMPONENT_FAMILY = "Ext.layout.ColumnLayout";

	/**
	 * <p>
	 * Create a new {@link ColumnLayout} instance with default property values.
	 * </p>
	 */
	public ColumnLayout() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[1];
		}
		_values[0] = super.saveState(_context);

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);

	}
}
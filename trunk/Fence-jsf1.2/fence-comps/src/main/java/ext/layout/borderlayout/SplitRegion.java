package ext.layout.borderlayout;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;

/**
*Note:This java code is auto generated by abner,do not edit it.
* 
<p>This is a specialized type of <a href="output/Ext.layout.BorderLayout.Region.html" ext:cls="Ext.layout.BorderLayout.Region">BorderLayout region</a>
that has a built-in <a href="output/Ext.SplitBar.html" ext:cls="Ext.SplitBar">Ext.SplitBar</a> for user resizing of
regions. The movement of the split bar is configurable to move
either <a href="output/Ext.layout.BorderLayout.SplitRegion.html#Ext.layout.BorderLayout.SplitRegion-tickSize" ext:member="tickSize" ext:cls="Ext.layout.BorderLayout.SplitRegion">smooth or
incrementally</a>.</p>

*/
@InstanceOf("Ext.layout.BorderLayout.SplitRegion")
@ParseConfigMode(ui = false, pmode = PersistenceMode.InnerProperty, rmode = ReferenceMode.Config)
public class SplitRegion extends Region{
public static final String COMPONENT_TYPE = "Ext.layout.BorderLayout.SplitRegion";
public static final String COMPONENT_FAMILY = "Ext.layout.BorderLayout.SplitRegion";/**
 * <p>Create a new {@link SplitRegion} instance with default property
 * values.</p>
 */
public SplitRegion() {
    super();
    setRendererType(COMPONENT_FAMILY);
}
public String getFamily() {
    return (COMPONENT_FAMILY);
}

 private String collapsibleSplitTip;
 /**
  * The tooltip to display when the user hovers overa <a href="output/Ext.layout.BorderLayout.Region.html#Ext.layout.BorderLayout.Region-collapsible" ext:member="collapsible" ext:cls="Ext.layout.BorderLayout.Region">collapsible</a> region's
split bar (defaults to "Drag to resize. Double click to hide.").
Only applies if <tt><a href="output/Ext.layout.BorderLayout.SplitRegion.html#Ext.layout.BorderLayout.SplitRegion-useSplitTips" ext:member="useSplitTips" ext:cls="Ext.layout.BorderLayout.SplitRegion">useSplitTips</a> =
true</tt>.
  */
  public String getCollapsibleSplitTip() {
     if (null != this.collapsibleSplitTip) {
         return this.collapsibleSplitTip;
     }
     ValueExpression _ve = getValueExpression("collapsibleSplitTip");
     if (_ve != null) {
         return (String) _ve.getValue(getFacesContext().getELContext());
     } else {
         return null;
     }
 }

 /**
  * <p>Set the value of the <code>collapsibleSplitTip</code> property.</p>
  */
 public void setCollapsibleSplitTip(String collapsibleSplitTip) {
     this.collapsibleSplitTip = collapsibleSplitTip;
     this.handleConfig("collapsibleSplitTip", collapsibleSplitTip);
 }

 private String splitTip;
 /**
  * The tooltip to display when the user hovers overa <a href="output/Ext.layout.BorderLayout.Region.html#Ext.layout.BorderLayout.Region-collapsible" ext:member="collapsible" ext:cls="Ext.layout.BorderLayout.Region">non-collapsible</a>
region's split bar (defaults to <tt>"Drag to resize."</tt>). Only
applies if <tt><a href="output/Ext.layout.BorderLayout.SplitRegion.html#Ext.layout.BorderLayout.SplitRegion-useSplitTips" ext:member="useSplitTips" ext:cls="Ext.layout.BorderLayout.SplitRegion">useSplitTips</a> =
true</tt>.
  */
  public String getSplitTip() {
     if (null != this.splitTip) {
         return this.splitTip;
     }
     ValueExpression _ve = getValueExpression("splitTip");
     if (_ve != null) {
         return (String) _ve.getValue(getFacesContext().getELContext());
     } else {
         return null;
     }
 }

 /**
  * <p>Set the value of the <code>splitTip</code> property.</p>
  */
 public void setSplitTip(String splitTip) {
     this.splitTip = splitTip;
     this.handleConfig("splitTip", splitTip);
 }

 private Integer tickSize;
 /**
  * The increment, in pixels by which to move thisRegion's <a href="output/Ext.SplitBar.html" ext:cls="Ext.SplitBar">SplitBar</a>. By default, the <a href="output/Ext.SplitBar.html" ext:cls="Ext.SplitBar">SplitBar</a>
moves smoothly.
  */
  public Integer getTickSize() {
     if (null != this.tickSize) {
         return this.tickSize;
     }
     ValueExpression _ve = getValueExpression("tickSize");
     if (_ve != null) {
         return (Integer) _ve.getValue(getFacesContext().getELContext());
     } else {
         return null;
     }
 }

 /**
  * <p>Set the value of the <code>tickSize</code> property.</p>
  */
 public void setTickSize(Integer tickSize) {
     this.tickSize = tickSize;
     this.handleConfig("tickSize", tickSize);
 }

 private Boolean useSplitTips;
 /**
  * <tt>true</tt> to display a tooltip when the userhovers over a region's split bar (defaults to <tt>false</tt>). The
tooltip text will be the value of either <tt><a href="output/Ext.layout.BorderLayout.SplitRegion.html#Ext.layout.BorderLayout.SplitRegion-splitTip" ext:member="splitTip" ext:cls="Ext.layout.BorderLayout.SplitRegion">splitTip</a></tt> or
<tt><a href="output/Ext.layout.BorderLayout.SplitRegion.html#Ext.layout.BorderLayout.SplitRegion-collapsibleSplitTip" ext:member="collapsibleSplitTip" ext:cls="Ext.layout.BorderLayout.SplitRegion">collapsibleSplitTip</a></tt>
as appropriate.
  */
  public Boolean getUseSplitTips() {
     if (null != this.useSplitTips) {
         return this.useSplitTips;
     }
     ValueExpression _ve = getValueExpression("useSplitTips");
     if (_ve != null) {
         return (Boolean) _ve.getValue(getFacesContext().getELContext());
     } else {
         return null;
     }
 }

 /**
  * <p>Set the value of the <code>useSplitTips</code> property.</p>
  */
 public void setUseSplitTips(Boolean useSplitTips) {
     this.useSplitTips = useSplitTips;
     this.handleConfig("useSplitTips", useSplitTips);
 }
private Object[] _values;

public Object saveState(FacesContext _context) {
  if (_values == null) {
      _values = new Object[5];
  }
  _values[0] = super.saveState(_context);
  _values[1] = collapsibleSplitTip;
_values[2] = splitTip;
_values[3] = tickSize;
_values[4] = useSplitTips;

return _values;
}

public void restoreState(FacesContext _context, Object _state) {
      _values = (Object[]) _state;
      super.restoreState(_context, _values[0]);
      this.collapsibleSplitTip = (String) _values[1];
 this.handleConfig("collapsibleSplitTip",this.collapsibleSplitTip);
this.splitTip = (String) _values[2];
 this.handleConfig("splitTip",this.splitTip);
this.tickSize = (Integer) _values[3];
 this.handleConfig("tickSize",this.tickSize);
this.useSplitTips = (Boolean) _values[4];
 this.handleConfig("useSplitTips",this.useSplitTips);

}
}
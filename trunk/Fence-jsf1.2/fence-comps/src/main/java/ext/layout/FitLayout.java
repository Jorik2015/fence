package ext.layout;

import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.Layout;
import ext.annotation.LayoutType;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * This is a base class for layouts that contain <b>a single item</b> that
 * automatically expands to fill the layout's container. This class is intended
 * to be extended or created via the <tt>layout:'fit'</tt> <a
 * href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout"
 * ext:cls="Ext.Container">Ext.Container.layout</a> config, and should generally
 * not need to be created directly via the new keyword.
 * </p>
 * 
 * <p>
 * FitLayout does not have any direct config options (other than inherited
 * ones). To fit a panel to a container using FitLayout, simply set layout:'fit'
 * on the container and add a single panel to it. If the container has multiple
 * panels, only the first one will be displayed. Example usage:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;var&lt;/b&gt; p = &lt;b&gt;new&lt;/b&gt; Ext.Panel({
 *     title: &lt;em&gt;'Fit Layout'&lt;/em&gt;,
 *     layout:&lt;em&gt;'fit'&lt;/em&gt;,
 *     items: {
 *         title: &lt;em&gt;'Inner Panel'&lt;/em&gt;,
 *         html: &lt;em&gt;'&lt;p&gt;This is the inner panel content&lt;/p&gt;'&lt;/em&gt;,
 *         border: false
 *     }
 * });&lt;/code&gt;
 * </pre>
 */
@Layout(LayoutType.fit)
@InstanceOf("Ext.layout.FitLayout")
@ParseConfigMode(ui = false, pmode = PersistenceMode.InnerProperty, rmode = ReferenceMode.Config)
public class FitLayout extends ContainerLayout {
	public static final String COMPONENT_TYPE = "Ext.layout.FitLayout";
	public static final String COMPONENT_FAMILY = "Ext.layout.FitLayout";

	/**
	 * <p>
	 * Create a new {@link FitLayout} instance with default property values.
	 * </p>
	 */
	public FitLayout() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[1];
		}
		_values[0] = super.saveState(_context);

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);

	}
}
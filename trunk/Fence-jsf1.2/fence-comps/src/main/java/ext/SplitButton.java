package ext;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.XType;

/**
 *Note:This java code is auto generated by abner,do not edit it. A split button
 * that provides a built-in dropdown arrow that can fire an event separately
 * from the default click event of the button. Typically this would be used to
 * display a dropdown menu that provides additional options to the primary
 * button action, but any custom handler can provide the arrowclick
 * implementation. Example usage:
 * 
 * <pre>
 * &lt;code&gt;&lt;i&gt;// display a dropdown menu:
 * &lt;/i&gt;
 * &lt;b&gt;new&lt;/b&gt; Ext.SplitButton({
 *     renderTo: &lt;em&gt;'button-ct'&lt;/em&gt;, &lt;i&gt;// the container id
 * &lt;/i&gt;
 *     text: &lt;em&gt;'Options'&lt;/em&gt;,
 *     handler: optionsHandler, &lt;i&gt;// handle a click on the button itself
 * &lt;/i&gt;
 *     menu: &lt;b&gt;new&lt;/b&gt; Ext.menu.Menu({
 *         items: [
 *             &lt;i&gt;// these items will render as dropdown menu items when the arrow is clicked:
 * &lt;/i&gt;
 *             {text: &lt;em&gt;'Item 1'&lt;/em&gt;, handler: item1Handler},
 *             {text: &lt;em&gt;'Item 2'&lt;/em&gt;, handler: item2Handler}
 *         ]
 *     })
 * });
 * 
 * &lt;i&gt;// Instead of showing a menu, you provide any type of custom
 * &lt;/i&gt;
 * &lt;i&gt;// functionality you want when the dropdown arrow is clicked:
 * &lt;/i&gt;
 * &lt;b&gt;new&lt;/b&gt; Ext.SplitButton({
 *     renderTo: &lt;em&gt;'button-ct'&lt;/em&gt;,
 *     text: &lt;em&gt;'Options'&lt;/em&gt;,
 *     handler: optionsHandler,
 *     arrowHandler: myCustomHandler
 * });&lt;/code&gt;
 * </pre>
 */
@XType("splitbutton")
@InstanceOf("Ext.SplitButton")
public class SplitButton extends Button {
	private static final long serialVersionUID = 585415831001437078L;
	public static final String COMPONENT_TYPE = "Ext.SplitButton";
	public static final String COMPONENT_FAMILY = "Ext.SplitButton";

	/**
	 * <p>
	 * Create a new {@link SplitButton} instance with default property values.
	 * </p>
	 */
	public SplitButton() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Object arrowHandler;

	/**
	 * A function called when the arrow button isclicked (can be used instead of
	 * click event)
	 */
	@ClientConfig(JsonMode.Function)
	public Object getArrowHandler() {
		if (null != this.arrowHandler) {
			return this.arrowHandler;
		}
		ValueExpression _ve = getValueExpression("arrowHandler");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>arrowHandler</code> property.
	 * </p>
	 */
	public void setArrowHandler(Object arrowHandler) {
		this.arrowHandler = arrowHandler;
		this.handleConfig("arrowHandler", arrowHandler);
	}

	private String arrowTooltip;

	/**
	 * The title attribute of the arrow
	 */
	public String getArrowTooltip() {
		if (null != this.arrowTooltip) {
			return this.arrowTooltip;
		}
		ValueExpression _ve = getValueExpression("arrowTooltip");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>arrowTooltip</code> property.
	 * </p>
	 */
	public void setArrowTooltip(String arrowTooltip) {
		this.arrowTooltip = arrowTooltip;
		this.handleConfig("arrowTooltip", arrowTooltip);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[3];
		}
		_values[0] = super.saveState(_context);
		_values[1] = arrowHandler;
		_values[2] = arrowTooltip;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.arrowHandler = (Object) _values[1];
		this.handleConfig("arrowHandler", this.arrowHandler);
		this.arrowTooltip = (String) _values[2];
		this.handleConfig("arrowTooltip", this.arrowTooltip);

	}
}
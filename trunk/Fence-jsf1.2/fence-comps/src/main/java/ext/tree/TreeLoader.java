package ext.tree;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;
import ext.util.Observable;

/**
 *Note:This java code is auto generated by abner,do not edit it. A TreeLoader
 * provides for lazy loading of an <a href="output/Ext.tree.TreeNode.html"
 * ext:cls="Ext.tree.TreeNode">Ext.tree.TreeNode</a>'s child nodes from a
 * specified URL. The response must be a JavaScript Array definition whose
 * elements are node definition objects. e.g.:
 * 
 * <pre>
 * &lt;code&gt;[{
 *         id: 1,
 *         text: &lt;em&gt;'A leaf Node'&lt;/em&gt;,
 *         leaf: true
 *     },{
 *         id: 2,
 *         text: &lt;em&gt;'A folder Node'&lt;/em&gt;,
 *         children: [{
 *             id: 3,
 *             text: &lt;em&gt;'A child Node'&lt;/em&gt;,
 *             leaf: true
 *         }]
 *    }]&lt;/code&gt;
 * </pre>
 * 
 * <br>
 * <br>
 * A server request is sent, and child nodes are loaded only when a node is
 * expanded. The loading node's id is passed to the server under the parameter
 * name "node" to enable the server to produce the correct child nodes.<br>
 * <br>
 * To pass extra parameters, an event handler may be attached to the
 * "beforeload" event, and the parameters specified in the TreeLoader's
 * baseParams property:
 * 
 * <pre>
 * &lt;code&gt;myTreeLoader.on(&lt;em&gt;&quot;beforeload&quot;&lt;/em&gt;, &lt;b&gt;function&lt;/b&gt;(treeLoader, node) {
 *         this.baseParams.category = node.attributes.category;
 *     }, this);&lt;/code&gt;
 * </pre>
 * 
 * This would pass an HTTP parameter called "category" to the server containing
 * the value of the Node's "category" attribute.
 */
@InstanceOf("Ext.tree.TreeLoader")
@ParseConfigMode(name = "loader", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Var)
public class TreeLoader extends Observable {
	public static final String COMPONENT_TYPE = "Ext.tree.TreeLoader";
	public static final String COMPONENT_FAMILY = "Ext.tree.TreeLoader";

	/**
	 * <p>
	 * Create a new {@link TreeLoader} instance with default property values.
	 * </p>
	 */
	public TreeLoader() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Object baseAttrs;

	/**
	 * An object containing attributes to be added toall nodes created by this
	 * loader. If the attributes sent by the server have an attribute in this
	 * object, they take priority.
	 */
	@ClientConfig(JsonMode.Object)
	public Object getBaseAttrs() {
		if (null != this.baseAttrs) {
			return this.baseAttrs;
		}
		ValueExpression _ve = getValueExpression("baseAttrs");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>baseAttrs</code> property.
	 * </p>
	 */
	public void setBaseAttrs(Object baseAttrs) {
		this.baseAttrs = baseAttrs;
		this.handleConfig("baseAttrs", baseAttrs);
	}

	private Object baseParams;

	/**
	 * An object containing properties which specifyHTTP parameters to be passed
	 * to each request for child nodes.
	 */
	@ClientConfig(JsonMode.Object)
	public Object getBaseParams() {
		if (null != this.baseParams) {
			return this.baseParams;
		}
		ValueExpression _ve = getValueExpression("baseParams");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>baseParams</code> property.
	 * </p>
	 */
	public void setBaseParams(Object baseParams) {
		this.baseParams = baseParams;
		this.handleConfig("baseParams", baseParams);
	}

	private Boolean clearOnLoad;

	/**
	 * Default to true. Remove previously existingchild nodes before loading.
	 */
	public Boolean getClearOnLoad() {
		if (null != this.clearOnLoad) {
			return this.clearOnLoad;
		}
		ValueExpression _ve = getValueExpression("clearOnLoad");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>clearOnLoad</code> property.
	 * </p>
	 */
	public void setClearOnLoad(Boolean clearOnLoad) {
		this.clearOnLoad = clearOnLoad;
		this.handleConfig("clearOnLoad", clearOnLoad);
	}

	private String dataUrl;

	/**
	 * The URL from which to request a Json string whichspecifies an array of
	 * node definition objects representing the child nodes to be loaded.
	 */
	public String getDataUrl() {
		if (null != this.dataUrl) {
			return this.dataUrl;
		}
		ValueExpression _ve = getValueExpression("dataUrl");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>dataUrl</code> property.
	 * </p>
	 */
	public void setDataUrl(String dataUrl) {
		this.dataUrl = dataUrl;
		this.handleConfig("dataUrl", dataUrl);
	}

	private Object directFn;

	/**
	 * Function to call when executing a request.
	 */
	@ClientConfig(JsonMode.Function)
	public Object getDirectFn() {
		if (null != this.directFn) {
			return this.directFn;
		}
		ValueExpression _ve = getValueExpression("directFn");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>directFn</code> property.
	 * </p>
	 */
	public void setDirectFn(Object directFn) {
		this.directFn = directFn;
		this.handleConfig("directFn", directFn);
	}

	private Object paramOrder;

	/**
	 * Defaults to <tt>undefined</tt>. Only used whenusing directFn. A list of
	 * params to be executed server side. Specify the params in the order in
	 * which they must be executed on the server-side as either (1) an Array of
	 * String values, or (2) a String of params delimited by either whitespace,
	 * comma, or pipe. For example, any of the following would be acceptable:
	 * 
	 * <pre>
	 * &lt;code&gt;paramOrder: [&lt;em&gt;'param1'&lt;/em&gt;,&lt;em&gt;'param2'&lt;/em&gt;,&lt;em&gt;'param3'&lt;/em&gt;]
	 * paramOrder: &lt;em&gt;'param1 param2 param3'&lt;/em&gt;
	 * paramOrder: &lt;em&gt;'param1,param2,param3'&lt;/em&gt;
	 * paramOrder: &lt;em&gt;'param1|param2|param'&lt;/em&gt;&lt;/code&gt;
	 * </pre>
	 */
	@ClientConfig(JsonMode.Array)
	public Object getParamOrder() {
		if (null != this.paramOrder) {
			return this.paramOrder;
		}
		ValueExpression _ve = getValueExpression("paramOrder");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>paramOrder</code> property.
	 * </p>
	 */
	public void setParamOrder(Object paramOrder) {
		this.paramOrder = paramOrder;
		this.handleConfig("paramOrder", paramOrder);
	}

	private Boolean paramsAsHash;

	/**
	 * Only used when using directFn. Send parameters asa collection of named
	 * arguments (defaults to <tt>false</tt>). Providing a
	 * 
	 * <tt><a href="output/Ext.tree.TreeLoader.html#Ext.tree.TreeLoader-paramOrder" ext:member="paramOrder" ext:cls="Ext.tree.TreeLoader">paramOrder</a></tt>
	 * nullifies this configuration.
	 */
	public Boolean getParamsAsHash() {
		if (null != this.paramsAsHash) {
			return this.paramsAsHash;
		}
		ValueExpression _ve = getValueExpression("paramsAsHash");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>paramsAsHash</code> property.
	 * </p>
	 */
	public void setParamsAsHash(Boolean paramsAsHash) {
		this.paramsAsHash = paramsAsHash;
		this.handleConfig("paramsAsHash", paramsAsHash);
	}

	private Boolean preloadChildren;

	/**
	 * If set to true, the loader recursively loads"children" attributes when
	 * doing the first load on nodes.
	 */
	public Boolean getPreloadChildren() {
		if (null != this.preloadChildren) {
			return this.preloadChildren;
		}
		ValueExpression _ve = getValueExpression("preloadChildren");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>preloadChildren</code> property.
	 * </p>
	 */
	public void setPreloadChildren(Boolean preloadChildren) {
		this.preloadChildren = preloadChildren;
		this.handleConfig("preloadChildren", preloadChildren);
	}

	private String requestMethod;

	/**
	 * The HTTP request method for loading data(defaults to the value of <a
	 * href="output/Ext.Ajax.html#Ext.Ajax-method" ext:member="method"
	 * ext:cls="Ext.Ajax">Ext.Ajax.method</a>).
	 */
	public String getRequestMethod() {
		if (null != this.requestMethod) {
			return this.requestMethod;
		}
		ValueExpression _ve = getValueExpression("requestMethod");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>requestMethod</code> property.
	 * </p>
	 */
	public void setRequestMethod(String requestMethod) {
		this.requestMethod = requestMethod;
		this.handleConfig("requestMethod", requestMethod);
	}

	private Object uiProviders;

	/**
	 * An object containing properties which specifycustom <a
	 * href="output/Ext.tree.TreeNodeUI.html"
	 * ext:cls="Ext.tree.TreeNodeUI">Ext.tree.TreeNodeUI</a> implementations. If
	 * the optional <i>uiProvider</i> attribute of a returned child node is a
	 * string rather than a reference to a TreeNodeUI implementation, then that
	 * string value is used as a property name in the uiProviders object.
	 */
	@ClientConfig(JsonMode.Object)
	public Object getUiProviders() {
		if (null != this.uiProviders) {
			return this.uiProviders;
		}
		ValueExpression _ve = getValueExpression("uiProviders");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>uiProviders</code> property.
	 * </p>
	 */
	public void setUiProviders(Object uiProviders) {
		this.uiProviders = uiProviders;
		this.handleConfig("uiProviders", uiProviders);
	}

	private String url;

	/**
	 * Equivalent to <a
	 * href="output/Ext.tree.TreeLoader.html#Ext.tree.TreeLoader-dataUrl"
	 * ext:member="dataUrl" ext:cls="Ext.tree.TreeLoader">dataUrl</a>.
	 */
	public String getUrl() {
		if (null != this.url) {
			return this.url;
		}
		ValueExpression _ve = getValueExpression("url");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>url</code> property.
	 * </p>
	 */
	public void setUrl(String url) {
		this.url = url;
		this.handleConfig("url", url);
	}

	private Object data;

	@ClientConfig(JsonMode.Ignore)
	public Object getData() {
		if (null != this.data) {
			return this.data;
		}
		ValueExpression _ve = getValueExpression("data");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>baseAttrs</code> property.
	 * </p>
	 */
	public void setData(Object data) {
		this.data = data;
		this.handleConfig("data", data);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[13];
		}
		_values[0] = super.saveState(_context);
		_values[1] = baseAttrs;
		_values[2] = baseParams;
		_values[3] = clearOnLoad;
		_values[4] = dataUrl;
		_values[5] = directFn;
		_values[6] = paramOrder;
		_values[7] = paramsAsHash;
		_values[8] = preloadChildren;
		_values[9] = requestMethod;
		_values[10] = uiProviders;
		_values[11] = url;
		_values[12] = data;
		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.baseAttrs = (Object) _values[1];
		this.handleConfig("baseAttrs", this.baseAttrs);
		this.baseParams = (Object) _values[2];
		this.handleConfig("baseParams", this.baseParams);
		this.clearOnLoad = (Boolean) _values[3];
		this.handleConfig("clearOnLoad", this.clearOnLoad);
		this.dataUrl = (String) _values[4];
		this.handleConfig("dataUrl", this.dataUrl);
		this.directFn = (Object) _values[5];
		this.handleConfig("directFn", this.directFn);
		this.paramOrder = (Object) _values[6];
		this.handleConfig("paramOrder", this.paramOrder);
		this.paramsAsHash = (Boolean) _values[7];
		this.handleConfig("paramsAsHash", this.paramsAsHash);
		this.preloadChildren = (Boolean) _values[8];
		this.handleConfig("preloadChildren", this.preloadChildren);
		this.requestMethod = (String) _values[9];
		this.handleConfig("requestMethod", this.requestMethod);
		this.uiProviders = (Object) _values[10];
		this.handleConfig("uiProviders", this.uiProviders);
		this.url = (String) _values[11];
		this.handleConfig("url", this.url);

		this.data = _values[12];
	}
}
package ext.menu;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;
import ext.annotation.XType;

/**
 *Note:This java code is auto generated by abner,do not edit it. A base class
 * for all menu items that require menu-related functionality (like sub-menus)
 * and are not static display items. Item extends the base functionality of <a
 * href="output/Ext.menu.BaseItem.html"
 * ext:cls="Ext.menu.BaseItem">Ext.menu.BaseItem</a> by adding menu-specific
 * activation and click handling.
 */
@XType("menuitem")
@InstanceOf("Ext.menu.Item")
@ParseConfigMode(name = "items", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Config)
public class Item extends BaseItem {
	private static final long serialVersionUID = 7299859154796957440L;
	public static final String COMPONENT_TYPE = "Ext.menu.Item";
	public static final String COMPONENT_FAMILY = "Ext.menu.Item";

	/**
	 * <p>
	 * Create a new {@link Item} instance with default property values.
	 * </p>
	 */
	public Item() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Boolean canActivate;

	/**
	 * True if this item can be visually activated(defaults to true)
	 */
	public Boolean getCanActivate() {
		if (null != this.canActivate) {
			return this.canActivate;
		}
		ValueExpression _ve = getValueExpression("canActivate");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>canActivate</code> property.
	 * </p>
	 */
	public void setCanActivate(Boolean canActivate) {
		this.canActivate = canActivate;
		this.handleConfig("canActivate", canActivate);
	}

	private String href;

	/**
	 * The href attribute to use for the underlyinganchor link (defaults to
	 * '#').
	 */
	public String getHref() {
		if (null != this.href) {
			return this.href;
		}
		ValueExpression _ve = getValueExpression("href");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>href</code> property.
	 * </p>
	 */
	public void setHref(String href) {
		this.href = href;
		this.handleConfig("href", href);
	}

	private String hrefTarget;

	/**
	 * The target attribute to use for the underlyinganchor link (defaults to
	 * '').
	 */
	public String getHrefTarget() {
		if (null != this.hrefTarget) {
			return this.hrefTarget;
		}
		ValueExpression _ve = getValueExpression("hrefTarget");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>hrefTarget</code> property.
	 * </p>
	 */
	public void setHrefTarget(String hrefTarget) {
		this.hrefTarget = hrefTarget;
		this.handleConfig("hrefTarget", hrefTarget);
	}

	private String icon;

	/**
	 * The path to an icon to display in this item(defaults to
	 * Ext.BLANK_IMAGE_URL). If icon is specified <a
	 * href="output/Ext.menu.Item.html#Ext.menu.Item-iconCls"
	 * ext:member="iconCls" ext:cls="Ext.menu.Item">iconCls</a> should not be.
	 */
	public String getIcon() {
		if (null != this.icon) {
			return this.icon;
		}
		ValueExpression _ve = getValueExpression("icon");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>icon</code> property.
	 * </p>
	 */
	public void setIcon(String icon) {
		this.icon = icon;
		this.handleConfig("icon", icon);
	}

	private String iconCls;

	/**
	 * A CSS class that specifies a background imagethat will be used as the
	 * icon for this item (defaults to ''). If iconCls is specified <a
	 * href="output/Ext.menu.Item.html#Ext.menu.Item-icon" ext:member="icon"
	 * ext:cls="Ext.menu.Item">icon</a> should not be.
	 */
	public String getIconCls() {
		if (null != this.iconCls) {
			return this.iconCls;
		}
		ValueExpression _ve = getValueExpression("iconCls");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>iconCls</code> property.
	 * </p>
	 */
	public void setIconCls(String iconCls) {
		this.iconCls = iconCls;
		this.handleConfig("iconCls", iconCls);
	}

	private String itemCls;

	/**
	 * The default CSS class to use for menu items(defaults to 'x-menu-item')
	 */
	public String getItemCls() {
		if (null != this.itemCls) {
			return this.itemCls;
		}
		ValueExpression _ve = getValueExpression("itemCls");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>itemCls</code> property.
	 * </p>
	 */
	public void setItemCls(String itemCls) {
		this.itemCls = itemCls;
		this.handleConfig("itemCls", itemCls);
	}

	private Object menu;

	/**
	 * Either an instance of <a href="output/Ext.menu.Menu.html"
	 * ext:cls="Ext.menu.Menu">Ext.menu.Menu</a> or the config object foran <a
	 * href="output/Ext.menu.Menu.html"
	 * ext:cls="Ext.menu.Menu">Ext.menu.Menu</a> which acts as the submenu when
	 * this item is activated.
	 */
	@ClientConfig(JsonMode.Object)
	public Object getMenu() {
		if (null != this.menu) {
			return this.menu;
		}
		ValueExpression _ve = getValueExpression("menu");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>menu</code> property.
	 * </p>
	 */
	public void setMenu(Object menu) {
		this.menu = menu;
		this.handleConfig("menu", menu);
	}

	private Integer showDelay;

	/**
	 * Length of time in milliseconds to wait beforeshowing this item (defaults
	 * to 200)
	 */
	public Integer getShowDelay() {
		if (null != this.showDelay) {
			return this.showDelay;
		}
		ValueExpression _ve = getValueExpression("showDelay");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>showDelay</code> property.
	 * </p>
	 */
	public void setShowDelay(Integer showDelay) {
		this.showDelay = showDelay;
		this.handleConfig("showDelay", showDelay);
	}

	private String text;

	/**
	 * The text to display in this item (defaults to'').
	 */
	public String getText() {
		if (null != this.text) {
			return this.text;
		}
		ValueExpression _ve = getValueExpression("text");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>text</code> property.
	 * </p>
	 */
	public void setText(String text) {
		this.text = text;
		this.handleConfig("text", text);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[10];
		}
		_values[0] = super.saveState(_context);
		_values[1] = canActivate;
		_values[2] = href;
		_values[3] = hrefTarget;
		_values[4] = icon;
		_values[5] = iconCls;
		_values[6] = itemCls;
		_values[7] = menu;
		_values[8] = showDelay;
		_values[9] = text;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.canActivate = (Boolean) _values[1];
		this.handleConfig("canActivate", this.canActivate);
		this.href = (String) _values[2];
		this.handleConfig("href", this.href);
		this.hrefTarget = (String) _values[3];
		this.handleConfig("hrefTarget", this.hrefTarget);
		this.icon = (String) _values[4];
		this.handleConfig("icon", this.icon);
		this.iconCls = (String) _values[5];
		this.handleConfig("iconCls", this.iconCls);
		this.itemCls = (String) _values[6];
		this.handleConfig("itemCls", this.itemCls);
		this.menu = (Object) _values[7];
		this.handleConfig("menu", this.menu);
		this.showDelay = (Integer) _values[8];
		this.handleConfig("showDelay", this.showDelay);
		this.text = (String) _values[9];
		this.handleConfig("text", this.text);

	}
}
package ext.menu;

import java.io.Serializable;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;
import ext.annotation.XType;
import ext.base.ExtCommand;

/**
 *Note:This java code is auto generated by abner,do not edit it. The base class
 * for all items that render into menus. BaseItem provides default rendering,
 * activated state management and base configuration options shared by all menu
 * components.
 */
@XType("menubaseitem")
@InstanceOf("Ext.menu.BaseItem")
@ParseConfigMode(name = "items", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Config)
public class BaseItem extends ExtCommand implements Serializable {
	private static final long serialVersionUID = 5602950845989583428L;
	public static final String COMPONENT_TYPE = "Ext.menu.BaseItem";
	public static final String COMPONENT_FAMILY = "Ext.menu.BaseItem";

	/**
	 * <p>
	 * Create a new {@link BaseItem} instance with default property values.
	 * </p>
	 */
	public BaseItem() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private String activeClass;

	/**
	 * The CSS class to use when the item becomesactivated (defaults to
	 * "x-menu-item-active")
	 */
	public String getActiveClass() {
		if (null != this.activeClass) {
			return this.activeClass;
		}
		ValueExpression _ve = getValueExpression("activeClass");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>activeClass</code> property.
	 * </p>
	 */
	public void setActiveClass(String activeClass) {
		this.activeClass = activeClass;
		this.handleConfig("activeClass", activeClass);
	}

	private Boolean canActivate;

	/**
	 * True if this item can be visually activated(defaults to false)
	 */
	public Boolean getCanActivate() {
		if (null != this.canActivate) {
			return this.canActivate;
		}
		ValueExpression _ve = getValueExpression("canActivate");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>canActivate</code> property.
	 * </p>
	 */
	public void setCanActivate(Boolean canActivate) {
		this.canActivate = canActivate;
		this.handleConfig("canActivate", canActivate);
	}

	private Integer clickHideDelay;

	/**
	 * Length of time in milliseconds to wait beforehiding after a click
	 * (defaults to 100)
	 */
	public Integer getClickHideDelay() {
		if (null != this.clickHideDelay) {
			return this.clickHideDelay;
		}
		ValueExpression _ve = getValueExpression("clickHideDelay");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>clickHideDelay</code> property.
	 * </p>
	 */
	public void setClickHideDelay(Integer clickHideDelay) {
		this.clickHideDelay = clickHideDelay;
		this.handleConfig("clickHideDelay", clickHideDelay);
	}

	private Object handler;

	/**
	 * A function that will handle the click event ofthis menu item (optional).
	 * The handler is passed the following parameters:
	 * 
	 * <div class="mdetail-params">
	 * <ul>
	 * <li><code>b</code> : Item
	 * 
	 * <div class="sub-desc">This menu Item.</div></li>
	 * 
	 * <li><code>e</code> : EventObject
	 * 
	 * <div class="sub-desc">The click event.</div></li>
	 * </ul>
	 * </div>
	 */
	@ClientConfig(JsonMode.Function)
	public Object getHandler() {
		if (null != this.handler) {
			return this.handler;
		}
		ValueExpression _ve = getValueExpression("handler");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>handler</code> property.
	 * </p>
	 */
	public void setHandler(Object handler) {
		this.handler = handler;
		this.handleConfig("handler", handler);
	}

	private Boolean hideOnClick;

	/**
	 * True to hide the containing menu after this itemis clicked (defaults to
	 * true)
	 */
	public Boolean getHideOnClick() {
		if (null != this.hideOnClick) {
			return this.hideOnClick;
		}
		ValueExpression _ve = getValueExpression("hideOnClick");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>hideOnClick</code> property.
	 * </p>
	 */
	public void setHideOnClick(Boolean hideOnClick) {
		this.hideOnClick = hideOnClick;
		this.handleConfig("hideOnClick", hideOnClick);
	}

	private Object scope;

	/**
	 * The scope (<tt><b>this</b></tt> reference) inwhich the handler function
	 * will be called.
	 */
	@ClientConfig(JsonMode.Object)
	public Object getScope() {
		if (null != this.scope) {
			return this.scope;
		}
		ValueExpression _ve = getValueExpression("scope");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>scope</code> property.
	 * </p>
	 */
	public void setScope(Object scope) {
		this.scope = scope;
		this.handleConfig("scope", scope);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[7];
		}
		_values[0] = super.saveState(_context);
		_values[1] = activeClass;
		_values[2] = canActivate;
		_values[3] = clickHideDelay;
		_values[4] = handler;
		_values[5] = hideOnClick;
		_values[6] = scope;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.activeClass = (String) _values[1];
		this.handleConfig("activeClass", this.activeClass);
		this.canActivate = (Boolean) _values[2];
		this.handleConfig("canActivate", this.canActivate);
		this.clickHideDelay = (Integer) _values[3];
		this.handleConfig("clickHideDelay", this.clickHideDelay);
		this.handler = (Object) _values[4];
		this.handleConfig("handler", this.handler);
		this.hideOnClick = (Boolean) _values[5];
		this.handleConfig("hideOnClick", this.hideOnClick);
		this.scope = (Object) _values[6];
		this.handleConfig("scope", this.scope);

	}
}
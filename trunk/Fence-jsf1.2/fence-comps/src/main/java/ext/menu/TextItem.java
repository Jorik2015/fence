package ext.menu;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;

/**
 *Note:This java code is auto generated by abner,do not edit it. Adds a static
 * text string to a menu, usually used as either a heading or group separator.
 */
//@XType("menutextitem") //ext bug
@InstanceOf("Ext.menu.TextItem")
@ParseConfigMode(name = "items", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Config)
public class TextItem extends BaseItem{
	public static final String COMPONENT_TYPE = "Ext.menu.TextItem";
	public static final String COMPONENT_FAMILY = "Ext.menu.TextItem";

	/**
	 * <p>
	 * Create a new {@link TextItem} instance with default property values.
	 * </p>
	 */
	public TextItem() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Boolean hideOnClick;

	/**
	 * True to hide the containing menu after this itemis clicked (defaults to
	 * false)
	 */
	public Boolean getHideOnClick() {
		if (null != this.hideOnClick) {
			return this.hideOnClick;
		}
		ValueExpression _ve = getValueExpression("hideOnClick");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>hideOnClick</code> property.
	 * </p>
	 */
	public void setHideOnClick(Boolean hideOnClick) {
		this.hideOnClick = hideOnClick;
		this.handleConfig("hideOnClick", hideOnClick);
	}

	private String itemCls;

	/**
	 * The default CSS class to use for text items(defaults to "x-menu-text")
	 */
	public String getItemCls() {
		if (null != this.itemCls) {
			return this.itemCls;
		}
		ValueExpression _ve = getValueExpression("itemCls");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>itemCls</code> property.
	 * </p>
	 */
	public void setItemCls(String itemCls) {
		this.itemCls = itemCls;
		this.handleConfig("itemCls", itemCls);
	}

	private String text;

	/**
	 * The text to display for this item (defaults to'')
	 */
	public String getText() {
		if (null != this.text) {
			return this.text;
		}
		ValueExpression _ve = getValueExpression("text");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>text</code> property.
	 * </p>
	 */
	public void setText(String text) {
		this.text = text;
		this.handleConfig("text", text);
	}
	
	

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[4];
		}
		_values[0] = super.saveState(_context);
		_values[1] = hideOnClick;
		_values[2] = itemCls;
		_values[3] = text;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.hideOnClick = (Boolean) _values[1];
		this.handleConfig("hideOnClick", this.hideOnClick);
		this.itemCls = (String) _values[2];
		this.handleConfig("itemCls", this.itemCls);
		this.text = (String) _values[3];
		this.handleConfig("text", this.text);

	}
}
package ext.toolbar;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.BoxComponent;
import ext.annotation.InstanceOf;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;
import ext.annotation.XType;

/**
 *Note:This java code is auto generated by abner,do not edit it. The base class
 * that other non-interacting Toolbar Item classes should extend in order to get
 * some basic common toolbar item functionality.
 */
@XType("tbitem")
@InstanceOf("Ext.Toolbar.Item")
@ParseConfigMode(name = "items", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Config)
public class Item extends BoxComponent {
	public static final String COMPONENT_TYPE = "Ext.Toolbar.Item";
	public static final String COMPONENT_FAMILY = "Ext.Toolbar.Item";

	/**
	 * <p>
	 * Create a new {@link Item} instance with default property values.
	 * </p>
	 */
	public Item() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private String overflowText;

	/**
	 * Text to be used for the menu if the item isoverflowed.
	 */
	public String getOverflowText() {
		if (null != this.overflowText) {
			return this.overflowText;
		}
		ValueExpression _ve = getValueExpression("overflowText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>overflowText</code> property.
	 * </p>
	 */
	public void setOverflowText(String overflowText) {
		this.overflowText = overflowText;
		this.handleConfig("overflowText", overflowText);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[2];
		}
		_values[0] = super.saveState(_context);
		_values[1] = overflowText;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.overflowText = (String) _values[1];
		this.handleConfig("overflowText", this.overflowText);

	}
}
package ext;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.XType;

/**
 *Note:This java code is auto generated by abner,do not edit it. A specialized
 * SplitButton that contains a menu of <a href="output/Ext.menu.CheckItem.html"
 * ext:cls="Ext.menu.CheckItem">Ext.menu.CheckItem</a> elements. The button
 * automatically cycles through each menu item on click, raising the button's <a
 * href="output/Ext.CycleButton.html#Ext.CycleButton-change" ext:member="change"
 * ext:cls="Ext.CycleButton">change</a> event (or calling the button's <a
 * href="output/Ext.CycleButton.html#Ext.CycleButton-changeHandler"
 * ext:member="changeHandler" ext:cls="Ext.CycleButton">changeHandler</a>
 * function, if supplied) for the active menu item. Clicking on the arrow
 * section of the button displays the dropdown menu just like a normal
 * SplitButton. Example usage:
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;var&lt;/b&gt; btn = &lt;b&gt;new&lt;/b&gt; Ext.CycleButton({
 *     showText: true,
 *     prependText: &lt;em&gt;'View as '&lt;/em&gt;,
 *     items: [{
 *         text:&lt;em&gt;'text only'&lt;/em&gt;,
 *         iconCls:&lt;em&gt;'view-text'&lt;/em&gt;,
 *         checked:true
 *     },{
 *         text:&lt;em&gt;'HTML'&lt;/em&gt;,
 *         iconCls:&lt;em&gt;'view-html'&lt;/em&gt;
 *     }],
 *     changeHandler:&lt;b&gt;function&lt;/b&gt;(btn, item){
 *         Ext.Msg.alert(&lt;em&gt;'Change View'&lt;/em&gt;, item.text);
 *     }
 * });&lt;/code&gt;
 * </pre>
 */
@XType("cycle")
@InstanceOf("Ext.CycleButton")
public class CycleButton extends SplitButton {
	private static final long serialVersionUID = 2591937568981105435L;
	public static final String COMPONENT_TYPE = "Ext.CycleButton";
	public static final String COMPONENT_FAMILY = "Ext.CycleButton";

	/**
	 * <p>
	 * Create a new {@link CycleButton} instance with default property values.
	 * </p>
	 */
	public CycleButton() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Object changeHandler;

	/**
	 * A callback function that will be invoked eachtime the active menu item in
	 * the button's menu has changed. If this callback is not supplied, the
	 * SplitButton will instead fire the <a
	 * href="output/Ext.CycleButton.html#Ext.CycleButton-change"
	 * ext:member="change" ext:cls="Ext.CycleButton">change</a> event on active
	 * item change. The changeHandler function will be called with the following
	 * argument list: (SplitButton this, Ext.menu.CheckItem item)
	 */
	@ClientConfig(JsonMode.Function)
	public Object getChangeHandler() {
		if (null != this.changeHandler) {
			return this.changeHandler;
		}
		ValueExpression _ve = getValueExpression("changeHandler");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>changeHandler</code> property.
	 * </p>
	 */
	public void setChangeHandler(Object changeHandler) {
		this.changeHandler = changeHandler;
		this.handleConfig("changeHandler", changeHandler);
	}

	private String forceIcon;

	/**
	 * A css class which sets an image to be used as thestatic icon for this
	 * button. This icon will always be displayed regardless of which item is
	 * selected in the dropdown list. This overrides the default behavior of
	 * changing the button's icon to match the selected item's icon on change.
	 */
	public String getForceIcon() {
		if (null != this.forceIcon) {
			return this.forceIcon;
		}
		ValueExpression _ve = getValueExpression("forceIcon");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>forceIcon</code> property.
	 * </p>
	 */
	public void setForceIcon(String forceIcon) {
		this.forceIcon = forceIcon;
		this.handleConfig("forceIcon", forceIcon);
	}

	private Object items;

	/**
	 * An array of <a href="output/Ext.menu.CheckItem.html"
	 * ext:cls="Ext.menu.CheckItem">Ext.menu.CheckItem</a> <b>config</b>objects
	 * to be used when creating the button's menu items (e.g., {text:'Foo',
	 * iconCls:'foo-icon'})
	 */
	@ClientConfig(JsonMode.Array)
	public Object getItems() {
		if (null != this.items) {
			return this.items;
		}
		ValueExpression _ve = getValueExpression("items");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>items</code> property.
	 * </p>
	 */
	public void setItems(Object items) {
		this.items = items;
		this.handleConfig("items", items);
	}

	private String prependText;

	/**
	 * A static string to prepend before the activeitem's text when displayed as
	 * the button's text (only applies when showText = true, defaults to '')
	 */
	public String getPrependText() {
		if (null != this.prependText) {
			return this.prependText;
		}
		ValueExpression _ve = getValueExpression("prependText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>prependText</code> property.
	 * </p>
	 */
	public void setPrependText(String prependText) {
		this.prependText = prependText;
		this.handleConfig("prependText", prependText);
	}

	private Boolean showText;

	/**
	 * True to display the active item's text as thebutton text (defaults to
	 * false)
	 */
	public Boolean getShowText() {
		if (null != this.showText) {
			return this.showText;
		}
		ValueExpression _ve = getValueExpression("showText");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>showText</code> property.
	 * </p>
	 */
	public void setShowText(Boolean showText) {
		this.showText = showText;
		this.handleConfig("showText", showText);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[6];
		}
		_values[0] = super.saveState(_context);
		_values[1] = changeHandler;
		_values[2] = forceIcon;
		_values[3] = items;
		_values[4] = prependText;
		_values[5] = showText;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.changeHandler = (Object) _values[1];
		this.handleConfig("changeHandler", this.changeHandler);
		this.forceIcon = (String) _values[2];
		this.handleConfig("forceIcon", this.forceIcon);
		this.items = (Object) _values[3];
		this.handleConfig("items", this.items);
		this.prependText = (String) _values[4];
		this.handleConfig("prependText", this.prependText);
		this.showText = (Boolean) _values[5];
		this.handleConfig("showText", this.showText);

	}
}
package ext;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.XType;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * As the amount of records increases, the time required for the browser to
 * render them increases. Paging is used to reduce the amount of data exchanged
 * with the client. Note: if there are more records/rows than can be viewed in
 * the available screen area, vertical scrollbars will be added.
 * </p>
 * 
 * <p>
 * Paging is typically handled on the server side (see exception below). The
 * client sends parameters to the server side, which the server needs to
 * interpret and then respond with the approprate data.
 * </p>
 * 
 * <p>
 * <b>Ext.PagingToolbar</b> is a specialized toolbar that is bound to a <a
 * href="output/Ext.data.Store.html" ext:cls="Ext.data.Store">Ext.data.Store</a>
 * and provides automatic paging control. This Component <a
 * href="output/Ext.data.Store.html#Ext.data.Store-load" ext:member="load"
 * ext:cls="Ext.data.Store">load</a>s blocks of data into the
 * <tt><a href="output/Ext.PagingToolbar.html#Ext.PagingToolbar-store" ext:member="store" ext:cls="Ext.PagingToolbar">store</a></tt>
 * by passing <a href="output/Ext.data.Store.html#Ext.data.Store-paramNames"
 * ext:member="paramNames" ext:cls="Ext.data.Store">paramNames</a> used for
 * paging criteria.
 * </p>
 * 
 * <p>
 * PagingToolbar is typically used as one of the Grid's toolbars:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;Ext.QuickTips.init(); &lt;i&gt;// to display button quicktips&lt;/i&gt;
 * 
 * &lt;b&gt;var&lt;/b&gt; myStore = &lt;b&gt;new&lt;/b&gt; Ext.data.Store({
 *     ...
 * });
 * 
 * &lt;b&gt;var&lt;/b&gt; myPageSize = 25;  &lt;i&gt;// server script should only send back 25 items&lt;/i&gt;
 * 
 * &lt;b&gt;var&lt;/b&gt; grid = &lt;b&gt;new&lt;/b&gt; Ext.grid.GridPanel({
 *     ...
 *     store: myStore,
 *     bbar: &lt;b&gt;new&lt;/b&gt; Ext.PagingToolbar({
 *         &lt;a href=&quot;output/Ext.PagingToolbar.html#Ext.PagingToolbar-store&quot; ext:member=&quot;store&quot; ext:cls=&quot;Ext.PagingToolbar&quot;&gt;store&lt;/a&gt;: myStore,       &lt;i&gt;// grid and PagingToolbar using same store&lt;/i&gt;
 *         &lt;a href=&quot;output/Ext.PagingToolbar.html#Ext.PagingToolbar-displayInfo&quot; ext:member=&quot;displayInfo&quot; ext:cls=&quot;Ext.PagingToolbar&quot;&gt;displayInfo&lt;/a&gt;: true,
 *         &lt;a href=&quot;output/Ext.PagingToolbar.html#Ext.PagingToolbar-pageSize&quot; ext:member=&quot;pageSize&quot; ext:cls=&quot;Ext.PagingToolbar&quot;&gt;pageSize&lt;/a&gt;: myPageSize,
 *         &lt;a href=&quot;output/Ext.PagingToolbar.html#Ext.PagingToolbar-prependButtons&quot; ext:member=&quot;prependButtons&quot; ext:cls=&quot;Ext.PagingToolbar&quot;&gt;prependButtons&lt;/a&gt;: true,
 *         items: [
 *             &lt;em&gt;'text 1'&lt;/em&gt;
 *         ]
 *     })
 * });&lt;/code&gt;
 * </pre>
 * 
 * <p>
 * To use paging, pass the paging requirements to the server when the store is
 * first loaded.
 * </p>
 * 
 * <pre>
 * &lt;code&gt;store.load({
 *     params: {
 *         start: 0,          &lt;i&gt;// specify params &lt;b&gt;for&lt;/b&gt; the first page load &lt;b&gt;if&lt;/b&gt; using paging&lt;/i&gt;
 *         limit: myPageSize,
 *         foo:   &lt;em&gt;'bar'&lt;/em&gt;
 *     }
 * });&lt;/code&gt;
 * </pre>
 * 
 * <p>
 * <u>Paging with Local Data</u>
 * </p>
 * 
 * <p>
 * Paging can also be accomplished with local data using extensions:
 * </p>
 * 
 * <div class="mdetail-params">
 * <ul>
 * <li><a href="http://extjs.com/forum/showthread.php?t=57386">Ext.ux.data.
 * PagingStore</a></li>
 * 
 * <li>Paging Memory Proxy (examples/ux/PagingMemoryProxy.js)</li>
 * </ul>
 * </div>
 */
@XType("paging")
@InstanceOf("Ext.PagingToolbar")
public class PagingToolbar extends Toolbar {
	public static final String COMPONENT_TYPE = "Ext.PagingToolbar";
	public static final String COMPONENT_FAMILY = "Ext.PagingToolbar";

	/**
	 * <p>
	 * Create a new {@link PagingToolbar} instance with default property values.
	 * </p>
	 */
	public PagingToolbar() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private String afterPageText;

	/**
	 * Customizable piece of the default paging text(defaults to <tt>'of {0}'</tt>). Note
	 * that this string is formatted using <tt>{0}</tt> as a token that is
	 * replaced by the number of total pages. This token should be preserved
	 * when overriding this string if showing the total page count is desired.
	 */
	public String getAfterPageText() {
		if (null != this.afterPageText) {
			return this.afterPageText;
		}
		ValueExpression _ve = getValueExpression("afterPageText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>afterPageText</code> property.
	 * </p>
	 */
	public void setAfterPageText(String afterPageText) {
		this.afterPageText = afterPageText;
		this.handleConfig("afterPageText", afterPageText);
	}

	private String beforePageText;

	/**
	 * The text displayed before the input item(defaults to <tt>'Page'</tt>).
	 */
	public String getBeforePageText() {
		if (null != this.beforePageText) {
			return this.beforePageText;
		}
		ValueExpression _ve = getValueExpression("beforePageText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>beforePageText</code> property.
	 * </p>
	 */
	public void setBeforePageText(String beforePageText) {
		this.beforePageText = beforePageText;
		this.handleConfig("beforePageText", beforePageText);
	}

	private Boolean displayInfo;

	/**
	 * <tt>true</tt> to display the displayMsg(defaults to <tt>false</tt>)
	 */
	public Boolean getDisplayInfo() {
		if (null != this.displayInfo) {
			return this.displayInfo;
		}
		ValueExpression _ve = getValueExpression("displayInfo");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>displayInfo</code> property.
	 * </p>
	 */
	public void setDisplayInfo(Boolean displayInfo) {
		this.displayInfo = displayInfo;
		this.handleConfig("displayInfo", displayInfo);
	}

	private String displayMsg;

	/**
	 * The paging status message to display (defaults to<tt>'Displaying {0} - {1} of {2}'</tt>). Note that this
	 * string is formatted using the braced numbers <tt>{0}-{2}</tt> as tokens
	 * that are replaced by the values for start, end and total respectively.
	 * These tokens should be preserved when overriding this string if showing
	 * those values is desired.
	 */
	public String getDisplayMsg() {
		if (null != this.displayMsg) {
			return this.displayMsg;
		}
		ValueExpression _ve = getValueExpression("displayMsg");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>displayMsg</code> property.
	 * </p>
	 */
	public void setDisplayMsg(String displayMsg) {
		this.displayMsg = displayMsg;
		this.handleConfig("displayMsg", displayMsg);
	}

	private String emptyMsg;

	/**
	 * The message to display when no records are found(defaults to 'No data to
	 * display')
	 */
	public String getEmptyMsg() {
		if (null != this.emptyMsg) {
			return this.emptyMsg;
		}
		ValueExpression _ve = getValueExpression("emptyMsg");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>emptyMsg</code> property.
	 * </p>
	 */
	public void setEmptyMsg(String emptyMsg) {
		this.emptyMsg = emptyMsg;
		this.handleConfig("emptyMsg", emptyMsg);
	}

	private String firstText;

	/**
	 * The quicktip text displayed for the first pagebutton (defaults to <tt>'First Page'</tt>).
	 * <b>Note</b>: quick tips must be initialized for the quicktip to show.
	 */
	public String getFirstText() {
		if (null != this.firstText) {
			return this.firstText;
		}
		ValueExpression _ve = getValueExpression("firstText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>firstText</code> property.
	 * </p>
	 */
	public void setFirstText(String firstText) {
		this.firstText = firstText;
		this.handleConfig("firstText", firstText);
	}

	private String lastText;

	/**
	 * The quicktip text displayed for the last pagebutton (defaults to <tt>'Last Page'</tt>).
	 * <b>Note</b>: quick tips must be initialized for the quicktip to show.
	 */
	public String getLastText() {
		if (null != this.lastText) {
			return this.lastText;
		}
		ValueExpression _ve = getValueExpression("lastText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>lastText</code> property.
	 * </p>
	 */
	public void setLastText(String lastText) {
		this.lastText = lastText;
		this.handleConfig("lastText", lastText);
	}

	private String nextText;

	/**
	 * The quicktip text displayed for the next pagebutton (defaults to <tt>'Next Page'</tt>).
	 * <b>Note</b>: quick tips must be initialized for the quicktip to show.
	 */
	public String getNextText() {
		if (null != this.nextText) {
			return this.nextText;
		}
		ValueExpression _ve = getValueExpression("nextText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>nextText</code> property.
	 * </p>
	 */
	public void setNextText(String nextText) {
		this.nextText = nextText;
		this.handleConfig("nextText", nextText);
	}

	private Integer pageSize;

	/**
	 * The number of records to display per page(defaults to <tt>20</tt>)
	 */
	public Integer getPageSize() {
		if (null != this.pageSize) {
			return this.pageSize;
		}
		ValueExpression _ve = getValueExpression("pageSize");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>pageSize</code> property.
	 * </p>
	 */
	public void setPageSize(Integer pageSize) {
		this.pageSize = pageSize;
		this.handleConfig("pageSize", pageSize);
	}

	private Boolean prependButtons;

	/**
	 * <tt>true</tt> to insert any configured<tt>items</tt> <i>before</i> the
	 * paging buttons. Defaults to <tt>false</tt>.
	 */
	public Boolean getPrependButtons() {
		if (null != this.prependButtons) {
			return this.prependButtons;
		}
		ValueExpression _ve = getValueExpression("prependButtons");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>prependButtons</code> property.
	 * </p>
	 */
	public void setPrependButtons(Boolean prependButtons) {
		this.prependButtons = prependButtons;
		this.handleConfig("prependButtons", prependButtons);
	}

	private String prevText;

	/**
	 * The quicktip text displayed for the previous pagebutton (defaults to <tt>'Previous Page'</tt>
	 * ). <b>Note</b>: quick tips must be initialized for the quicktip to show.
	 */
	public String getPrevText() {
		if (null != this.prevText) {
			return this.prevText;
		}
		ValueExpression _ve = getValueExpression("prevText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>prevText</code> property.
	 * </p>
	 */
	public void setPrevText(String prevText) {
		this.prevText = prevText;
		this.handleConfig("prevText", prevText);
	}

	private String refreshText;

	/**
	 * The quicktip text displayed for the Refreshbutton (defaults to <tt>'Refresh'</tt>).
	 * <b>Note</b>: quick tips must be initialized for the quicktip to show.
	 */
	public String getRefreshText() {
		if (null != this.refreshText) {
			return this.refreshText;
		}
		ValueExpression _ve = getValueExpression("refreshText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>refreshText</code> property.
	 * </p>
	 */
	public void setRefreshText(String refreshText) {
		this.refreshText = refreshText;
		this.handleConfig("refreshText", refreshText);
	}

	private Object store;

	/**
	 * The <a href="output/Ext.data.Store.html"
	 * ext:cls="Ext.data.Store">Ext.data.Store</a> the paging toolbarshould use
	 * as its data source (required).
	 */
	@ClientConfig(JsonMode.Object)
	public Object getStore() {
		if (null != this.store) {
			return this.store;
		}
		ValueExpression _ve = getValueExpression("store");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>store</code> property.
	 * </p>
	 */
	public void setStore(Object store) {
		this.store = store;
		this.handleConfig("store", store);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[14];
		}
		_values[0] = super.saveState(_context);
		_values[1] = afterPageText;
		_values[2] = beforePageText;
		_values[3] = displayInfo;
		_values[4] = displayMsg;
		_values[5] = emptyMsg;
		_values[6] = firstText;
		_values[7] = lastText;
		_values[8] = nextText;
		_values[9] = pageSize;
		_values[10] = prependButtons;
		_values[11] = prevText;
		_values[12] = refreshText;
		_values[13] = store;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.afterPageText = (String) _values[1];
		this.handleConfig("afterPageText", this.afterPageText);
		this.beforePageText = (String) _values[2];
		this.handleConfig("beforePageText", this.beforePageText);
		this.displayInfo = (Boolean) _values[3];
		this.handleConfig("displayInfo", this.displayInfo);
		this.displayMsg = (String) _values[4];
		this.handleConfig("displayMsg", this.displayMsg);
		this.emptyMsg = (String) _values[5];
		this.handleConfig("emptyMsg", this.emptyMsg);
		this.firstText = (String) _values[6];
		this.handleConfig("firstText", this.firstText);
		this.lastText = (String) _values[7];
		this.handleConfig("lastText", this.lastText);
		this.nextText = (String) _values[8];
		this.handleConfig("nextText", this.nextText);
		this.pageSize = (Integer) _values[9];
		this.handleConfig("pageSize", this.pageSize);
		this.prependButtons = (Boolean) _values[10];
		this.handleConfig("prependButtons", this.prependButtons);
		this.prevText = (String) _values[11];
		this.handleConfig("prevText", this.prevText);
		this.refreshText = (String) _values[12];
		this.handleConfig("refreshText", this.refreshText);
		this.store = (Object) _values[13];
		this.handleConfig("store", this.store);

	}
}
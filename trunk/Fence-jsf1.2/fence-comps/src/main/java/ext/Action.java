package ext;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.base.ExtCommand;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * An Action is a piece of reusable functionality that can be abstracted out of
 * any particular component so that it can be usefully shared among multiple
 * components. Actions let you share handlers, configuration options and UI
 * updates across any components that support the Action interface (primarily <a
 * href="output/Ext.Toolbar.html" ext:cls="Ext.Toolbar">Ext.Toolbar</a>, <a
 * href="output/Ext.Button.html" ext:cls="Ext.Button">Ext.Button</a> and <a
 * href="output/Ext.menu.Menu.html" ext:cls="Ext.menu.Menu">Ext.menu.Menu</a>
 * components).
 * </p>
 * 
 * <p>
 * Aside from supporting the config object interface, any component that needs
 * to use Actions must also support the following method list, as these will be
 * called as needed by the Action class: setText(string), setIconCls(string),
 * setDisabled(boolean), setVisible(boolean) and setHandler(function).
 * </p>
 * 
 * Example usage:<br>
 * 
 * <pre>
 * &lt;code&gt;&lt;i&gt;// Define the shared action.  Each component below will have the same
 * &lt;/i&gt;
 * &lt;i&gt;// display text and icon, and will display the same message on click.
 * &lt;/i&gt;
 * &lt;b&gt;var&lt;/b&gt; action = &lt;b&gt;new&lt;/b&gt; Ext.Action({
 *     &lt;a href=&quot;output/Ext.Action.html#Ext.Action-text&quot; ext:member=&quot;text&quot; ext:cls=&quot;Ext.Action&quot;&gt;text&lt;/a&gt;: &lt;em&gt;'Do something'&lt;/em&gt;,
 *     &lt;a href=&quot;output/Ext.Action.html#Ext.Action-handler&quot; ext:member=&quot;handler&quot; ext:cls=&quot;Ext.Action&quot;&gt;handler&lt;/a&gt;: &lt;b&gt;function&lt;/b&gt;(){
 *         Ext.Msg.alert(&lt;em&gt;'Click'&lt;/em&gt;, &lt;em&gt;'You did something.'&lt;/em&gt;);
 *     },
 *     &lt;a href=&quot;output/Ext.Action.html#Ext.Action-iconCls&quot; ext:member=&quot;iconCls&quot; ext:cls=&quot;Ext.Action&quot;&gt;iconCls&lt;/a&gt;: &lt;em&gt;'&lt;b&gt;do&lt;/b&gt;-something'&lt;/em&gt;,
 *     &lt;a href=&quot;output/Ext.Action.html#Ext.Action-itemId&quot; ext:member=&quot;itemId&quot; ext:cls=&quot;Ext.Action&quot;&gt;itemId&lt;/a&gt;: &lt;em&gt;'myAction'&lt;/em&gt;
 * });
 * 
 * &lt;b&gt;var&lt;/b&gt; panel = &lt;b&gt;new&lt;/b&gt; Ext.Panel({
 *     title: &lt;em&gt;'Actions'&lt;/em&gt;,
 *     width: 500,
 *     height: 300,
 *     tbar: [
 *         &lt;i&gt;// Add the action directly to a toolbar as a menu button
 * &lt;/i&gt;
 *         action,
 *         {
 *             text: &lt;em&gt;'Action Menu'&lt;/em&gt;,
 *             &lt;i&gt;// Add the action to a menu as a text item
 * &lt;/i&gt;
 *             menu: [action]
 *         }
 *     ],
 *     items: [
 *         &lt;i&gt;// Add the action to the panel body as a standard button
 * &lt;/i&gt;
 *         &lt;b&gt;new&lt;/b&gt; Ext.Button(action)
 *     ],
 *     renderTo: Ext.getBody()
 * });
 * 
 * &lt;i&gt;// Change the text &lt;b&gt;for&lt;/b&gt; all components using the action
 * &lt;/i&gt;
 * action.setText(&lt;em&gt;'Something &lt;b&gt;else&lt;/b&gt;'&lt;/em&gt;);
 * 
 * &lt;i&gt;// Reference an action through a container using the itemId
 * &lt;/i&gt;
 * &lt;b&gt;var&lt;/b&gt; btn = panel.getComponent(&lt;em&gt;'myAction'&lt;/em&gt;);
 * &lt;b&gt;var&lt;/b&gt; aRef = btn.baseAction;
 * aRef.setText(&lt;em&gt;'New text'&lt;/em&gt;);&lt;/code&gt;
 * </pre>
 */
@InstanceOf("Ext.Action")
public class Action extends ExtCommand {
	public static final String COMPONENT_TYPE = "Ext.Action";
	public static final String COMPONENT_FAMILY = "Ext.Action";

	/**
	 * <p>
	 * Create a new {@link Action} instance with default property values.
	 * </p>
	 */
	public Action() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Boolean disabled;

	/**
	 * True to disable all components using this action, false to enable them
	 * (defaults to false).
	 */
	public Boolean getDisabled() {
		if (null != this.disabled) {
			return this.disabled;
		}
		ValueExpression _ve = getValueExpression("disabled");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>disabled</code> property.
	 * </p>
	 */
	public void setDisabled(Boolean disabled) {
		this.disabled = disabled;
		this.handleConfig("disabled", disabled);
	}

	private Object handler;

	/**
	 * The function that will be invoked by each component tied to this action
	 * when the component's primary event is triggered (defaults to undefined).
	 */
	@ClientConfig(JsonMode.Function)
	public Object getHandler() {
		if (null != this.handler) {
			return this.handler;
		}
		ValueExpression _ve = getValueExpression("handler");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>handler</code> property.
	 * </p>
	 */
	public void setHandler(Object handler) {
		this.handler = handler;
		this.handleConfig("handler", handler);
	}

	private Boolean hidden;

	/**
	 * True to hide all components using this action, false to show them
	 * (defaults to false).
	 */
	public Boolean getHidden() {
		if (null != this.hidden) {
			return this.hidden;
		}
		ValueExpression _ve = getValueExpression("hidden");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>hidden</code> property.
	 * </p>
	 */
	public void setHidden(Boolean hidden) {
		this.hidden = hidden;
		this.handleConfig("hidden", hidden);
	}

	private String iconCls;

	/**
	 * The CSS class selector that specifies a background image to be used as
	 * the header icon for all components using this action (defaults to '').
	 * 
	 * <p>
	 * An example of specifying a custom icon class would be something like:
	 * </p>
	 * 
	 * <pre>
	 * &lt;code&gt;&lt;i&gt;// specify the property &lt;b&gt;in&lt;/b&gt; the config &lt;b&gt;for&lt;/b&gt; the class:
	 * &lt;/i&gt;
	 *      ...
	 *      iconCls: &lt;em&gt;'&lt;b&gt;do&lt;/b&gt;-something'&lt;/em&gt;
	 * 
	 * &lt;i&gt;// css class that specifies background image to be used as the icon image:
	 * &lt;/i&gt;
	 * .&lt;b&gt;do&lt;/b&gt;-something { background-image: url(../images/my-icon.gif) 0 6px no-repeat !important; }&lt;/code&gt;
	 * </pre>
	 */
	public String getIconCls() {
		if (null != this.iconCls) {
			return this.iconCls;
		}
		ValueExpression _ve = getValueExpression("iconCls");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>iconCls</code> property.
	 * </p>
	 */
	public void setIconCls(String iconCls) {
		this.iconCls = iconCls;
		this.handleConfig("iconCls", iconCls);
	}

	private String itemId;

	/**
	 * See <a href="output/Ext.Component.html"
	 * ext:cls="Ext.Component">Ext.Component</a>.<a
	 * href="output/Ext.Component.html#Ext.Component-itemId" ext:member="itemId"
	 * ext:cls="Ext.Component">itemId</a>.
	 */
	public String getItemId() {
		if (null != this.itemId) {
			return this.itemId;
		}
		ValueExpression _ve = getValueExpression("itemId");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>itemId</code> property.
	 * </p>
	 */
	public void setItemId(String itemId) {
		this.itemId = itemId;
		this.handleConfig("itemId", itemId);
	}

	private Object scope;

	/**
	 * The scope in which the <a
	 * href="output/Ext.Action.html#Ext.Action-handler" ext:member="handler"
	 * ext:cls="Ext.Action">handler</a> function will execute.
	 */
	@ClientConfig(JsonMode.Object)
	public Object getScope() {
		if (null != this.scope) {
			return this.scope;
		}
		ValueExpression _ve = getValueExpression("scope");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>scope</code> property.
	 * </p>
	 */
	public void setScope(Object scope) {
		this.scope = scope;
		this.handleConfig("scope", scope);
	}

	private String text;

	/**
	 * The text to set for all components using this action (defaults to '').
	 */
	public String getText() {
		if (null != this.text) {
			return this.text;
		}
		ValueExpression _ve = getValueExpression("text");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>text</code> property.
	 * </p>
	 */
	public void setText(String text) {
		this.text = text;
		this.handleConfig("text", text);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[8];
		}
		_values[0] = super.saveState(_context);
		_values[1] = disabled;
		_values[2] = handler;
		_values[3] = hidden;
		_values[4] = iconCls;
		_values[5] = itemId;
		_values[6] = scope;
		_values[7] = text;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.disabled = (Boolean) _values[1];
		this.handleConfig("disabled", this.disabled);
		this.handler = (Object) _values[2];
		this.handleConfig("handler", this.handler);
		this.hidden = (Boolean) _values[3];
		this.handleConfig("hidden", this.hidden);
		this.iconCls = (String) _values[4];
		this.handleConfig("iconCls", this.iconCls);
		this.itemId = (String) _values[5];
		this.handleConfig("itemId", this.itemId);
		this.scope = (Object) _values[6];
		this.handleConfig("scope", this.scope);
		this.text = (String) _values[7];
		this.handleConfig("text", this.text);

	}
}
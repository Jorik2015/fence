<tag><description>    <![CDATA[A custom selection model that renders a
column of checkboxes that can be toggled to select or deselect
rows.]]></description><name>checkboxselectionmodel</name><tag-class></tag-class><body-content>JSP</body-content><attribute>	<description>        <![CDATA[<tt>true</tt> if rows can only be selected byclicking on the checkbox column (defaults to <tt>false</tt>).]]>    </description>	<name>checkOnly</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Any valid text or HTML fragment to display in theheader cell for the checkbox column. Defaults to:

<pre><code><em>'&lt;div class=</em>"x-grid3-hd-checker"</code>&gt;&amp;#160;&lt;/div&gt;'
</pre>

The default CSS class of <tt>'x-grid3-hd-checker'</tt> displays a
checkbox in the header and provides support for automatic check
all/none behavior on header click. This string can be replaced by
any valid HTML fragment, including a simple text string (e.g.,
<tt>'Select Rows'</tt>), but the automatic check all/none behavior
will only work if the <tt>'x-grid3-hd-checker'</tt> class is
supplied.]]>    </description>	<name>header</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>A config object containing one or more event handlers to be
added to this object during initialization. This should be a valid
listeners config object as specified in the <a href="output/Ext.util.Observable.html#Ext.util.Observable-addListener" ext:member="addListener" ext:cls="Ext.util.Observable">addListener</a> example for attaching
multiple handlers at once.</p>

<br>
<p><b><u>DOM events from ExtJs <a href="output/Ext.Component.html" ext:cls="Ext.Component">Components</a></u></b></p>

<br>
<p>While <i>some</i> ExtJs Component classes export selected DOM
events (e.g. "click", "mouseover" etc), this is usually only done
when extra value can be added. For example the <a href="output/Ext.DataView.html" ext:cls="Ext.DataView">DataView</a>'s <b><code><a href="output/Ext.DataView.html#Ext.DataView-click" ext:member="click" ext:cls="Ext.DataView">click</a></code></b>
event passing the node clicked on. To access DOM events directly
from a Component's HTMLElement, listeners must be added to the
<i><a href="output/Ext.Component.html#Ext.Component-getEl" ext:member="getEl" ext:cls="Ext.Component">Element</a></i> after
the Component has been rendered. A plugin can simplify this
step:</p>

<pre><code><i>// Plugin is configured <b>with</b> a listeners config object.</i>
<i>// The Component is appended to the argument list of all handler functions.</i>
Ext.DomObserver = Ext.extend(Object, {
    constructor: <b>function</b>(config) {
        this.listeners = config.listeners ? config.listeners : config;
    },

    <i>// Component passes itself into plugin's init method</i>
    init: <b>function</b>(c) {
        <b>var</b> p, l = this.listeners;
        <b>for</b> (p <b>in</b> l) {
            <b>if</b> (Ext.isFunction(l[p])) {
                l[p] = this.createHandler(l[p], c);
            } <b>else</b> {
                l[p].fn = this.createHandler(l[p].fn, c);
            }
        }

        <i>// Add the listeners to the Element immediately following the render call</i>
        c.render = c.render.<a href="output/Function.html#Function-createSequence" ext:member="createSequence" ext:cls="Function">createSequence</a>(<b>function</b>() {
            <b>var</b> e = c.getEl();
            <b>if</b> (e) {
                e.on(l);
            }
        });
    },

    createHandler: <b>function</b>(fn, c) {
        <b>return</b> <b>function</b>(e) {
            fn.call(this, e, c);
        };
    }
});

<b>var</b> combo = <b>new</b> Ext.form.ComboBox({

    <i>// Collapse combo when its element is clicked on</i>
    plugins: [ <b>new</b> Ext.DomObserver({
        click: <b>function</b>(evt, comp) {
            comp.collapse();
        }
    })],
    store: myStore,
    typeAhead: true,
    mode: <em>'local'</em>,
    triggerAction: <em>'all'</em>
});</code>
</pre>

<br>
<br>
]]>    </description>	<name>listeners</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<tt>false</tt> to turn off moving the editor tothe next row down when the enter key is pressed or the next row up
when shift + enter keys are pressed.]]>    </description>	<name>moveEditorOnEnter</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<tt>true</tt> to allow selection of only one rowat a time (defaults to <tt>false</tt> allowing multiple
selections)]]>    </description>	<name>singleSelect</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<tt>true</tt> if the checkbox column is sortable(defaults to <tt>false</tt>).]]>    </description>	<name>sortable</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The default width in pixels of the checkboxcolumn (defaults to <tt>20</tt>).]]>    </description>	<name>width</name>	<required>false</required></attribute></tag>
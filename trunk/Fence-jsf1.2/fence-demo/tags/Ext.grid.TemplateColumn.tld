<tag><description>    <![CDATA[
<p>A Column definition class which renders a value by processing a
<a href="output/Ext.data.Record.html" ext:cls="Ext.data.Record">Record</a>'s <a href="output/Ext.data.Record.html#Ext.data.Record-data" ext:member="data" ext:cls="Ext.data.Record">data</a> using a <a href="output/Ext.grid.TemplateColumn.html#Ext.grid.TemplateColumn-tpl" ext:member="tpl" ext:cls="Ext.grid.TemplateColumn">configured</a>
<a href="output/Ext.XTemplate.html" ext:cls="Ext.XTemplate">XTemplate</a>. See the <a href="output/Ext.grid.Column.html#Ext.grid.Column-xtype" ext:member="xtype" ext:cls="Ext.grid.Column">xtype</a> config
option of <a href="output/Ext.grid.Column.html" ext:cls="Ext.grid.Column">Ext.grid.Column</a> for more details.</p>
]]></description><name>templatecolumn</name><tag-class></tag-class><body-content>JSP</body-content><attribute>	<description>        <![CDATA[Optional. Set the CSS text-align property of thecolumn. Defaults to undefined.]]>    </description>	<name>align</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Optional. An inline style definition string whichis applied to all table cells in the column (excluding headers).
Defaults to undefined.]]>    </description>	<name>css</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p><b>Required</b>. The name of the field in the grid's <a href="output/Ext.data.Store.html" ext:cls="Ext.data.Store">Ext.data.Store</a>'s <a href="output/Ext.data.Record.html" ext:cls="Ext.data.Record">Ext.data.Record</a> definition from which
to draw the column's value.</p>
]]>    </description>	<name>dataIndex</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Optional. Defaults to <tt>true</tt>, enabling theconfigured <tt><a href="output/Ext.grid.Column.html#Ext.grid.Column-editor" ext:member="editor" ext:cls="Ext.grid.Column">editor</a></tt>. Set
to <tt>false</tt> to initially disable editing on this column. The
initial configuration may be dynamically altered using <a href="output/Ext.grid.ColumnModel.html" ext:cls="Ext.grid.ColumnModel">Ext.grid.ColumnModel</a>.<a href="output/Ext.grid.ColumnModel.html#Ext.grid.ColumnModel-setEditable" ext:member="setEditable" ext:cls="Ext.grid.ColumnModel">setEditable()</a>.]]>    </description>	<name>editable</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Optional. The <a href="output/Ext.form.Field.html" ext:cls="Ext.form.Field">Ext.form.Field</a> to use when editingvalues in this column if editing is supported by the grid. See
<tt><a href="output/Ext.grid.Column.html#Ext.grid.Column-editable" ext:member="editable" ext:cls="Ext.grid.Column">editable</a></tt>
also.]]>    </description>	<name>editor</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Optional. If the grid is being rendered by an <a href="output/Ext.grid.GroupingView.html" ext:cls="Ext.grid.GroupingView">Ext.grid.GroupingView</a>, thisoption may be used to specify the text to display when there is an
empty group value. Defaults to the <a href="output/Ext.grid.GroupingView.html" ext:cls="Ext.grid.GroupingView">Ext.grid.GroupingView</a>.<a href="output/Ext.grid.GroupingView.html#Ext.grid.GroupingView-emptyGroupText" ext:member="emptyGroupText" ext:cls="Ext.grid.GroupingView">emptyGroupText</a>.]]>    </description>	<name>emptyGroupText</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Optional. <tt>true</tt> if the column widthcannot be changed. Defaults to <tt>false</tt>.]]>    </description>	<name>fixed</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Optional. If the grid is being rendered by an <a href="output/Ext.grid.GroupingView.html" ext:cls="Ext.grid.GroupingView">Ext.grid.GroupingView</a>, thisoption may be used to specify the text with which to prefix the
group field value in the group header line. See also <a href="output/Ext.grid.Column.html#Ext.grid.Column-groupRenderer" ext:member="groupRenderer" ext:cls="Ext.grid.Column">groupRenderer</a> and <a href="output/Ext.grid.GroupingView.html" ext:cls="Ext.grid.GroupingView">Ext.grid.GroupingView</a>.<a href="output/Ext.grid.GroupingView.html#Ext.grid.GroupingView-showGroupName" ext:member="showGroupName" ext:cls="Ext.grid.GroupingView">showGroupName</a>.]]>    </description>	<name>groupName</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>Optional. If the grid is being rendered by an <a href="output/Ext.grid.GroupingView.html" ext:cls="Ext.grid.GroupingView">Ext.grid.GroupingView</a>, this
option may be used to specify the function used to format the
grouping field value for display in the group <a href="output/Ext.grid.Column.html#Ext.grid.Column-groupName" ext:member="groupName" ext:cls="Ext.grid.Column">header</a>. If a
<tt><b>groupRenderer</b></tt> is not specified, the configured
<tt><b><a href="output/Ext.grid.Column.html#Ext.grid.Column-renderer" ext:member="renderer" ext:cls="Ext.grid.Column">renderer</a></b></tt> will be called; if
a <tt><b><a href="output/Ext.grid.Column.html#Ext.grid.Column-renderer" ext:member="renderer" ext:cls="Ext.grid.Column">renderer</a></b></tt> is also not
specified the new value of the group field will be used.</p>

<p>The called function (either the <tt><b>groupRenderer</b></tt> or
<tt><b><a href="output/Ext.grid.Column.html#Ext.grid.Column-renderer" ext:member="renderer" ext:cls="Ext.grid.Column">renderer</a></b></tt>) will be passed the
following parameters:</p>

<div class="mdetail-params">
<ul>
<li><b>v</b> : Object

<p class="sub-desc">The new value of the group field.</p>
</li>

<li><b>unused</b> : undefined

<p class="sub-desc">Unused parameter.</p>
</li>

<li><b>r</b> : Ext.data.Record

<p class="sub-desc">The Record providing the data for the row which
caused group change.</p>
</li>

<li><b>rowIndex</b> : Number

<p class="sub-desc">The row index of the Record which caused group
change.</p>
</li>

<li><b>colIndex</b> : Number

<p class="sub-desc">The column index of the group field.</p>
</li>

<li><b>ds</b> : Ext.data.Store

<p class="sub-desc">The Store which is providing the data
Model.</p>
</li>
</ul>
</div>

<br>
<br>
 

<p>The function should return a string value.</p>
]]>    </description>	<name>groupRenderer</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Optional. If the grid is being rendered by an <a href="output/Ext.grid.GroupingView.html" ext:cls="Ext.grid.GroupingView">Ext.grid.GroupingView</a>, thisoption may be used to disable the header menu item to group by the
column selected. Defaults to <tt>true</tt>, which enables the
header menu group option. Set to <tt>false</tt> to disable (but
still show) the group option in the header menu for the column. See
also <code><a href="output/Ext.grid.Column.html#Ext.grid.Column-groupName" ext:member="groupName" ext:cls="Ext.grid.Column">groupName</a></code>.]]>    </description>	<name>groupable</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Optional. The header text to be used as innerHTML(html tags are accepted) to display in the Grid view. <b>Note</b>:
to have a clickable header with no text displayed use
<tt>'&nbsp;'</tt>.]]>    </description>	<name>header</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Optional. <tt>true</tt> to initially hide thiscolumn. Defaults to <tt>false</tt>. A hidden column <a href="output/Ext.grid.GridPanel.html#Ext.grid.GridPanel-enableColumnHide" ext:member="enableColumnHide" ext:cls="Ext.grid.GridPanel">may be
shown via the header row menu</a>. If a column is never to be
shown, simply do not include this column in the Column Model at
all.]]>    </description>	<name>hidden</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Optional. Specify as <tt>false</tt> to preventthe user from hiding this column (defaults to true). To disallow
column hiding globally for all columns in the grid, use <a href="output/Ext.grid.GridPanel.html#Ext.grid.GridPanel-enableColumnHide" ext:member="enableColumnHide" ext:cls="Ext.grid.GridPanel">Ext.grid.GridPanel.enableColumnHide</a>
instead.]]>    </description>	<name>hideable</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Optional. A name which identifies this column(defaults to the column's initial ordinal position.) The
<tt>id</tt> is used to create a CSS <b>class</b> name which is
applied to all table cells (including headers) in that column (in
this context the <tt>id</tt> does not need to be unique). The class
name takes the form of 

<pre>x-grid3-td-<b>id</b>
</pre>

Header cells will also receive this class name, but will also have
the class 

<pre>x-grid3-hd
</pre>

So, to target header cells, use CSS selectors such as:

<pre>.x-grid3-hd-row .x-grid3-td-<b>id</b>
</pre>

The <a href="output/Ext.grid.GridPanel.html#Ext.grid.GridPanel-autoExpandColumn" ext:member="autoExpandColumn" ext:cls="Ext.grid.GridPanel">Ext.grid.GridPanel.autoExpandColumn</a>
grid config option references the column via this unique
identifier.]]>    </description>	<name>id</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Optional. <tt>true</tt> to disable the columnmenu. Defaults to <tt>false</tt>.]]>    </description>	<name>menuDisabled</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>For an alternative to specifying a renderer see <code><a href="output/Ext.grid.Column.html#Ext.grid.Column-xtype" ext:member="xtype" ext:cls="Ext.grid.Column">xtype</a></code></p>

<p>Optional. A renderer is an 'interceptor' method which can be
used transform data (value, appearance, etc.) before it is
rendered). This may be specified in either of three ways:</p>

<div class="mdetail-params">
<ul>
<li>A renderer function used to return HTML markup for a cell given
the cell's data value.</li>

<li>A string which references a property name of the <a href="output/Ext.util.Format.html" ext:cls="Ext.util.Format">Ext.util.Format</a> class which provides
a renderer function.</li>

<li>An object specifying both the renderer function, and its
execution scope (<tt><b>this</b></tt> reference) e.g.:

<pre style="margin-left: 1.2em;"><code>{
    fn: this.gridRenderer,
    scope: this
}</code>
</pre>
</li>
</ul>
</div>

If not specified, the default renderer uses the raw data
value.<br>
<br>
 

<p>For information about the renderer function (passed parameters,
etc.), see <a href="output/Ext.grid.ColumnModel.html#Ext.grid.ColumnModel-setRenderer" ext:member="setRenderer" ext:cls="Ext.grid.ColumnModel">Ext.grid.ColumnModel.setRenderer</a>.
An example of specifying renderer function inline:</p>

<pre><code><b>var</b> companyColumn = {
   header: <em>'Company Name'</em>,
   dataIndex: <em>'company'</em>,
   renderer: <b>function</b>(value, metaData, record, rowIndex, colIndex, store) {
      <i>// provide the logic depending on business rules
</i>
      <i>// name of your own choosing to manipulate the cell depending upon
</i>
      <i>// the data <b>in</b> the underlying Record object.
</i>
      <b>if</b> (value == <em>'whatever'</em>) {
          <i>//metaData.css : String : A CSS class name to add to the TD element of the cell.
</i>
          <i>//metaData.attr : String : An html attribute definition string to apply to
</i>
          <i>//                         the data container element within the table
</i>
          <i>//                         cell (e.g. <em>'style=</em>"color:red;"</i>'</code>).

          metaData.css = <em>'name-of-css-class-you-will-define'</em>;
      }
      <b>return</b> value;
   }
}
</pre>

See also <a href="output/Ext.grid.Column.html#Ext.grid.Column-scope" ext:member="scope" ext:cls="Ext.grid.Column">scope</a>.]]>    </description>	<name>renderer</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Optional. <tt>false</tt> to disable columnresizing. Defaults to <tt>true</tt>.]]>    </description>	<name>resizable</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Optional. The scope (<tt><b>this</b></tt>reference) in which to execute the renderer. Defaults to the Column
configuration object.]]>    </description>	<name>scope</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Optional. <tt>true</tt> if sorting is to beallowed on this column. Defaults to the value of the <code><a href="output/Ext.grid.ColumnModel.html#Ext.grid.ColumnModel-defaultSortable" ext:member="defaultSortable" ext:cls="Ext.grid.ColumnModel">Ext.grid.ColumnModel.defaultSortable</a></code>
property. Whether local/remote sorting is used is specified in
<code><a href="output/Ext.data.Store.html#Ext.data.Store-remoteSort" ext:member="remoteSort" ext:cls="Ext.data.Store">Ext.data.Store.remoteSort</a></code>.]]>    </description>	<name>sortable</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Optional. A text string to use as the columnheader's tooltip. If Quicktips are enabled, this value will be used
as the text of the quick tip, otherwise it will be set as the
header's HTML title attribute. Defaults to ''.]]>    </description>	<name>tooltip</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[An <a href="output/Ext.XTemplate.html" ext:cls="Ext.XTemplate">XTemplate</a>, or an XTemplate<i>definition string</i> to use to process a <a href="output/Ext.data.Record.html" ext:cls="Ext.data.Record">Record</a>'s <a href="output/Ext.data.Record.html#Ext.data.Record-data" ext:member="data" ext:cls="Ext.data.Record">data</a> to produce a
column's rendered value.]]>    </description>	<name>tpl</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Optional. The initial width in pixels of thecolumn. The width of each column can also be affected if any of the
following are configured: 

<div class="mdetail-params">
<ul>
<li><a href="output/Ext.grid.GridPanel.html" ext:cls="Ext.grid.GridPanel">Ext.grid.GridPanel</a>.<tt><a href="output/Ext.grid.GridPanel.html#Ext.grid.GridPanel-autoExpandColumn" ext:member="autoExpandColumn" ext:cls="Ext.grid.GridPanel">autoExpandColumn</a></tt></li>

<li><a href="output/Ext.grid.GridView.html" ext:cls="Ext.grid.GridView">Ext.grid.GridView</a>.<tt><a href="output/Ext.grid.GridView.html#Ext.grid.GridView-forceFit" ext:member="forceFit" ext:cls="Ext.grid.GridView">forceFit</a></tt>


<div class="sub-desc">
<p>By specifying <tt>forceFit:true</tt>, <a href="output/Ext.grid.Column.html#Ext.grid.Column-fixed" ext:member="fixed" ext:cls="Ext.grid.Column">non-fixed width</a>
columns will be re-proportioned (based on the relative initial
widths) to fill the width of the grid so that no horizontal
scrollbar is shown.</p>
</div>
</li>

<li><a href="output/Ext.grid.GridView.html" ext:cls="Ext.grid.GridView">Ext.grid.GridView</a>.<tt><a href="output/Ext.grid.GridView.html#Ext.grid.GridView-autoFill" ext:member="autoFill" ext:cls="Ext.grid.GridView">autoFill</a></tt></li>

<li><a href="output/Ext.grid.GridPanel.html" ext:cls="Ext.grid.GridPanel">Ext.grid.GridPanel</a>.<tt><a href="output/Ext.grid.GridPanel.html#Ext.grid.GridPanel-minColumnWidth" ext:member="minColumnWidth" ext:cls="Ext.grid.GridPanel">minColumnWidth</a></tt></li>

<li style="list-style-type: none; list-style-image: none; list-style-position: outside;"><br>
<p><b>Note</b>: when the width of each column is determined, a
space on the right side is reserved for the vertical scrollbar. The
<a href="output/Ext.grid.GridView.html" ext:cls="Ext.grid.GridView">Ext.grid.GridView</a>.<tt><a href="output/Ext.grid.GridView.html#Ext.grid.GridView-scrollOffset" ext:member="scrollOffset" ext:cls="Ext.grid.GridView">scrollOffset</a></tt> can be modified
to reduce or eliminate the reserved offset.</p>
</li>
</ul>
</div>
]]>    </description>	<name>width</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Optional. A String which references a predefined<a href="output/Ext.grid.Column.html" ext:cls="Ext.grid.Column">Ext.grid.Column</a> subclass type which
is preconfigured with an appropriate <code><a href="output/Ext.grid.Column.html#Ext.grid.Column-renderer" ext:member="renderer" ext:cls="Ext.grid.Column">renderer</a></code>
to be easily configured into a ColumnModel. The predefined <a href="output/Ext.grid.Column.html" ext:cls="Ext.grid.Column">Ext.grid.Column</a> subclass types are: 

<div class="mdetail-params">
<ul>
<li><b><tt>gridcolumn</tt></b> : <a href="output/Ext.grid.Column.html" ext:cls="Ext.grid.Column">Ext.grid.Column</a> (<b>Default</b>)</li>

<li><b><tt>booleancolumn</tt></b> : <a href="output/Ext.grid.BooleanColumn.html" ext:cls="Ext.grid.BooleanColumn">Ext.grid.BooleanColumn</a></li>

<li><b><tt>numbercolumn</tt></b> : <a href="output/Ext.grid.NumberColumn.html" ext:cls="Ext.grid.NumberColumn">Ext.grid.NumberColumn</a></li>

<li><b><tt>datecolumn</tt></b> : <a href="output/Ext.grid.DateColumn.html" ext:cls="Ext.grid.DateColumn">Ext.grid.DateColumn</a></li>

<li><b><tt>templatecolumn</tt></b> : <a href="output/Ext.grid.TemplateColumn.html" ext:cls="Ext.grid.TemplateColumn">Ext.grid.TemplateColumn</a></li>
</ul>
</div>

<p>Configuration properties for the specified <code>xtype</code>
may be specified with the Column configuration properties, for
example:</p>

<pre><code><b>var</b> grid = <b>new</b> Ext.grid.GridPanel({
    ...
    columns: [{
        header: <em>'Last Updated'</em>,
        dataIndex: <em>'lastChange'</em>,
        width: 85,
        sortable: true,
        <i>//renderer: Ext.util.Format.dateRenderer(<em>'m/d/Y'</em>),
</i>
        xtype: <em>'datecolumn'</em>, <i>// use xtype instead of renderer
</i>
        format: <em>'M/d/Y'</em> <i>// configuration property <b>for</b> <a href="output/Ext.grid.DateColumn.html" ext:cls="Ext.grid.DateColumn">Ext.grid.DateColumn</a>
</i>
    }, {
        ...
    }]
});</code>
</pre>
]]>    </description>	<name>xtype</name>	<required>false</required></attribute></tag>
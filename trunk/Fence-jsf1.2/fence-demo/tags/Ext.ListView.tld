<tag><description>    <![CDATA[
<p>Ext.ListView is a fast and light-weight implentation of a <a href="output/Ext.grid.GridPanel.html" ext:cls="Ext.grid.GridPanel">Grid</a> like view with the following
characteristics:</p>

<div class="mdetail-params">
<ul>
<li>resizable columns</li>

<li>selectable</li>

<li>column widths are initially proportioned by percentage based on
the container width and number of columns</li>

<li>uses templates to render the data in any required format</li>

<li>no horizontal scrolling</li>

<li>no editing</li>
</ul>
</div>

<p>Example usage:</p>

<pre><code><i>// consume JSON of this form:
</i>
{
   <em>"images"</em>:[
      {
         <em>"name"</em>:<em>"dance_fever.jpg"</em>,
         <em>"size"</em>:2067,
         <em>"lastmod"</em>:1236974993000,
         <em>"url"</em>:<em>"images\/thumbs\/dance_fever.jpg"</em>
      },
      {
         <em>"name"</em>:<em>"zack_sink.jpg"</em>,
         <em>"size"</em>:2303,
         <em>"lastmod"</em>:1236974993000,
         <em>"url"</em>:<em>"images\/thumbs\/zack_sink.jpg"</em>
      }
   ]
} 
<b>var</b> store = <b>new</b> Ext.data.JsonStore({
    url: <em>'get-images.php'</em>,
    root: <em>'images'</em>,
    fields: [
        <em>'name'</em>, <em>'url'</em>,
        {name:<em>'size'</em>, type: <em>'float'</em>},
        {name:<em>'lastmod'</em>, type:<em>'date'</em>, dateFormat:<em>'timestamp'</em>}
    ]
});
store.load();

<b>var</b> listView = <b>new</b> Ext.ListView({
    store: store,
    multiSelect: true,
    emptyText: <em>'No images to display'</em>,
    reserveScrollOffset: true,
    columns: [{
        header: <em>'File'</em>,
        width: .5,
        dataIndex: <em>'name'</em>
    },{
        header: <em>'Last Modified'</em>,
        width: .35, 
        dataIndex: <em>'lastmod'</em>,
        tpl: <em>'{lastmod:date(</em>"m-d h:i a"</code>)}'
    },{
        header: <em>'Size'</em>,
        dataIndex: <em>'size'</em>,
        tpl: <em>'{size:fileSize}'</em>, <i>// format using Ext.util.Format.fileSize()
</i>
        align: <em>'right'</em>
    }]
});

<i>// put it <b>in</b> a Panel so it looks pretty
</i>
<b>var</b> panel = <b>new</b> Ext.Panel({
    id:<em>'images-view'</em>,
    width:425,
    height:250,
    collapsible:true,
    layout:<em>'fit'</em>,
    title:<em>'Simple ListView <i>(0 items selected)</i>'</em>,
    items: listView
});
panel.render(document.body);

<i>// little bit of feedback
</i>
listView.on(<em>'selectionchange'</em>, <b>function</b>(view, nodes){
    <b>var</b> l = nodes.length;
    <b>var</b> s = l != 1 ? <em>'s'</em> : <em>''</em>;
    panel.setTitle(<em>'Simple ListView <i>('</i>+l+</em>' item'+s+<em>' selected)</em>');
});
</pre>
]]></description><name>listview</name><tag-class></tag-class><body-content>JSP</body-content><attribute>	<description>        <![CDATA[Whether the component can move the Dom node whenrendering (defaults to true).]]>    </description>	<name>allowDomMove</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p><b>Note</b>: this config is only used when this Component is
rendered by a Container which has been configured to use an <b><a href="output/Ext.layout.AnchorLayout.html" ext:cls="Ext.layout.AnchorLayout">AnchorLayout</a></b> based layout
manager, for example:</p>

<div class="mdetail-params">
<ul>
<li><a href="output/Ext.form.FormPanel.html" ext:cls="Ext.form.FormPanel">Ext.form.FormPanel</a></li>

<li>specifying <code>layout: <em>'anchor'</em> <i>// or
<em>'form'</em>, or <em>'absolute'</em></i></code></li>
</ul>
</div>

<br>
<br>
 

<p>See <a href="output/Ext.layout.AnchorLayout.html" ext:cls="Ext.layout.AnchorLayout">Ext.layout.AnchorLayout</a>.<a href="output/Ext.layout.AnchorLayout.html#Ext.layout.AnchorLayout-anchor" ext:member="anchor" ext:cls="Ext.layout.AnchorLayout">anchor</a>
also.</p>
]]>    </description>	<name>anchor</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>Specify the id of the element, a DOM element or an existing
Element corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component.</p>

<div>
<ul>
<li><b>Description</b> : 

<div style="margin-left: 2em;">
<div class="sub-desc">When <tt>applyTo</tt> is used, constituent
parts of the component can also be specified by id or CSS class
name within the main element, and the component being created may
attempt to create its subcomponents from that markup if
applicable.</div>
</div>
</li>

<li><b>Notes</b> : 

<div style="margin-left: 2em;">
<div class="sub-desc">When using this config, a call to render() is
not required.</div>

<div class="sub-desc">If applyTo is specified, any value passed for
<a href="output/Ext.Component.html#Ext.Component-renderTo" ext:member="renderTo" ext:cls="Ext.Component">renderTo</a> will be
ignored and the target element's parent node will automatically be
used as the component's container.</div>
</div>
</li>
</ul>
</div>
]]>    </description>	<name>applyTo</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>A tag name or <a href="output/Ext.DomHelper.html" ext:cls="Ext.DomHelper">DomHelper</a> spec used to create the <a href="output/Ext.Component.html#Ext.Component-getEl" ext:member="getEl" ext:cls="Ext.Component">Element</a> which will
encapsulate this Component.</p>

<p>You do not normally need to specify this. For the base classes
<a href="output/Ext.Component.html" ext:cls="Ext.Component">Ext.Component</a>, <a href="output/Ext.BoxComponent.html" ext:cls="Ext.BoxComponent">Ext.BoxComponent</a>, and <a href="output/Ext.Container.html" ext:cls="Ext.Container">Ext.Container</a>, this defaults to
<b><tt>'div'</tt></b>. The more complex Ext classes use a more
complex DOM structure created by their own onRender methods.</p>

<p>This is intended to allow the developer to create
application-specific utility Components encapsulated by different
DOM elements. Example usage:</p>

<pre><code>{
    xtype: <em>'box'</em>,
    autoEl: {
        tag: <em>'img'</em>,
        src: <em>'http:<i>//www.example.com/example.jpg'</i></em>
    }
}, {
    xtype: <em>'box'</em>,
    autoEl: {
        tag: <em>'blockquote'</em>,
        html: <em>'autoEl is cool!'</em>
    }
}, {
    xtype: <em>'container'</em>,
    autoEl: <em>'ul'</em>,
    cls: <em>'ux-unordered-list'</em>,
    items: {
        xtype: <em>'box'</em>,
        autoEl: <em>'li'</em>,
        html: <em>'First list item'</em>
    }
}</code>
</pre>
]]>    </description>	<name>autoEl</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>True to use height:'auto', false to use fixed height (or allow
it to be managed by its parent Container's <a href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout" ext:cls="Ext.Container">layout manager</a>.
Defaults to false.</p>

<p><b>Note</b>: Although many components inherit this config
option, not all will function as expected with a height of 'auto'.
Setting autoHeight:true means that the browser will manage height
based on the element's contents, and that Ext will not manage it at
all.</p>

<p>If the <i>browser</i> is managing the height, be aware that
resizes performed by the browser in response to changes within the
structure of the Component cannot be detected. Therefore changes to
the height might result in elements needing to be synchronized with
the new height. Example:</p>

<pre><code><b>var</b> w = <b>new</b> Ext.Window({
    title: <em>'Window'</em>,
    width: 600,
    autoHeight: true,
    items: {
        title: <em>'Collapse Me'</em>,
        height: 400,
        collapsible: true,
        border: false,
        listeners: {
            beforecollapse: <b>function</b>() {
                w.el.shadow.hide();
            },
            beforeexpand: <b>function</b>() {
                w.el.shadow.hide();
            },
            collapse: <b>function</b>() {
                w.syncShadow();
            },
            expand: <b>function</b>() {
                w.syncShadow();
            }
        }
    }
}).show();</code>
</pre>
]]>    </description>	<name>autoHeight</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[True if the component should check for hiddenclasses (e.g. 'x-hidden' or 'x-hide-display') and remove them on
render (defaults to false).]]>    </description>	<name>autoShow</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>True to use width:'auto', false to use fixed width (or allow it
to be managed by its parent Container's <a href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout" ext:cls="Ext.Container">layout manager</a>.
Defaults to false.</p>

<p><b>Note</b>: Although many components inherit this config
option, not all will function as expected with a width of 'auto'.
Setting autoWidth:true means that the browser will manage width
based on the element's contents, and that Ext will not manage it at
all.</p>

<p>If the <i>browser</i> is managing the width, be aware that
resizes performed by the browser in response to changes within the
structure of the Component cannot be detected. Therefore changes to
the width might result in elements needing to be synchronized with
the new width. For example, where the target element is:</p>

<pre><code>&lt;div id=<em>'grid-container'</em> style=<em>'margin-left:25%;width:50%'</em>&gt;&lt;/div&gt;</code>
</pre>

A Panel rendered into that target element must listen for browser
window resize in order to relay its child items when the browser
changes its width:

<pre><code><b>var</b> myPanel = <b>new</b> Ext.Panel({
    renderTo: <em>'grid-container'</em>,
    monitorResize: true, <i>// relay on browser resize</i>
    title: <em>'Panel'</em>,
    height: 400,
    autoWidth: true,
    layout: <em>'hbox'</em>,
    layoutConfig: {
        align: <em>'stretch'</em>
    },
    defaults: {
        flex: 1
    },
    items: [{
        title: <em>'Box 1'</em>,
    }, {
        title: <em>'Box 2'</em>
    }, {
        title: <em>'Box 3'</em>
    }],
});</code>
</pre>
]]>    </description>	<name>autoWidth</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>The CSS class used to to apply to the special clearing div
rendered directly after each form field wrapper to provide field
clearing (defaults to <tt>'x-form-clear-left'</tt>).</p>

<br>
<p><b>Note</b>: this config is only used when this Component is
rendered by a Container which has been configured to use the <b><a href="output/Ext.layout.FormLayout.html" ext:cls="Ext.layout.FormLayout">FormLayout</a></b> layout manager
(e.g. <a href="output/Ext.form.FormPanel.html" ext:cls="Ext.form.FormPanel">Ext.form.FormPanel</a> or specifying
<tt>layout:'form'</tt>) and either a <tt><a href="output/Ext.Component.html#Ext.Component-fieldLabel" ext:member="fieldLabel" ext:cls="Ext.Component">fieldLabel</a></tt>
is specified or <tt>isFormField=true</tt> is specified.</p>

<br>
<p>See <a href="output/Ext.layout.FormLayout.html" ext:cls="Ext.layout.FormLayout">Ext.layout.FormLayout</a>.<a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-fieldTpl" ext:member="fieldTpl" ext:cls="Ext.layout.FormLayout">fieldTpl</a>
also.</p>
]]>    </description>	<name>clearCls</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[An optional extra CSS class that will be added tothis component's Element (defaults to ''). This can be useful for
adding customized styles to the component or any of its children
using standard CSS rules.]]>    </description>	<name>cls</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Specify <tt>true</tt> or specify a configurationobject for <a href="output/Ext.ListView.ColumnResizer.html" ext:cls="Ext.ListView.ColumnResizer">Ext.ListView.ColumnResizer</a>
to enable the columns to be resizable (defaults to
<tt>true</tt>).]]>    </description>	<name>columnResize</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Specify <tt>true</tt> or specify a configurationobject for <a href="output/Ext.ListView.Sorter.html" ext:cls="Ext.ListView.Sorter">Ext.ListView.Sorter</a> to enable the
columns to be sortable (defaults to <tt>true</tt>).]]>    </description>	<name>columnSort</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[An array of column configuration objects, forexample: 

<pre><code>{
    align: <em>'right'</em>,
    dataIndex: <em>'size'</em>,
    header: <em>'Size'</em>,
    tpl: <em>'{size:fileSize}'</em>,
    width: .35
}</code>
</pre>

Acceptable properties for each column configuration object are: 

<div class="mdetail-params">
<ul>
<li><b><tt>align</tt></b> : String

<div class="sub-desc">Set the CSS text-align property of the
column. Defaults to <tt>'left'</tt>.</div>
</li>

<li><b><tt>dataIndex</tt></b> : String

<div class="sub-desc">See <a href="output/Ext.grid.Column.html" ext:cls="Ext.grid.Column">Ext.grid.Column</a>. <a href="output/Ext.grid.Column.html#Ext.grid.Column-dataIndex" ext:member="dataIndex" ext:cls="Ext.grid.Column">dataIndex</a> for
details.</div>
</li>

<li><b><tt>header</tt></b> : String

<div class="sub-desc">See <a href="output/Ext.grid.Column.html" ext:cls="Ext.grid.Column">Ext.grid.Column</a>. <a href="output/Ext.grid.Column.html#Ext.grid.Column-header" ext:member="header" ext:cls="Ext.grid.Column">header</a> for
details.</div>
</li>

<li><b><tt>tpl</tt></b> : String

<div class="sub-desc">Specify a string to pass as the configuration
string for <a href="output/Ext.XTemplate.html" ext:cls="Ext.XTemplate">Ext.XTemplate</a>. By default an <a href="output/Ext.XTemplate.html" ext:cls="Ext.XTemplate">Ext.XTemplate</a> will be implicitly
created using the <tt>dataIndex</tt>.</div>
</li>

<li><b><tt>width</tt></b> : Number

<div class="sub-desc">Percentage of the container width this column
should be allocated. Columns that have no width specified will be
allocated with an equal percentage to fill 100% of the container
width. To easily take advantage of the full container width, leave
the width of at least one column undefined. Note that if you do not
want to take up the full width of the container, the width of every
column needs to be explicitly defined.</div>
</li>
</ul>
</div>
]]>    </description>	<name>columns</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>An optional extra CSS class that will be added to this
component's container. This can be useful for adding customized
styles to the container or any of its children using standard CSS
rules. See <a href="output/Ext.layout.ContainerLayout.html" ext:cls="Ext.layout.ContainerLayout">Ext.layout.ContainerLayout</a>.<a href="output/Ext.layout.ContainerLayout.html#Ext.layout.ContainerLayout-extraCls" ext:member="extraCls" ext:cls="Ext.layout.ContainerLayout">extraCls</a> also.</p>

<p><b>Note</b>: <tt>ctCls</tt> defaults to <tt>''</tt> except for
the following class which assigns a value by default:</p>

<div class="mdetail-params">
<ul>
<li><a href="output/Ext.layout.Box.html" ext:cls="Ext.layout.Box">Box Layout</a> :
<tt>'x-box-layout-ct'</tt></li>
</ul>
</div>

To configure the above Class with an extra CSS class append to the
default. For example, for BoxLayout (Hbox and Vbox):

<pre><code>ctCls: <em>'x-box-layout-ct custom-class'</em></code>
</pre>

<br>
<br>
]]>    </description>	<name>ctCls</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[True to defer emptyText being applied until thestore's first load]]>    </description>	<name>deferEmptyText</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Render this component disabled (default isfalse).]]>    </description>	<name>disabled</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[CSS class added to the component when it isdisabled (defaults to 'x-item-disabled').]]>    </description>	<name>disabledClass</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The text to display in the view when there is nodata to display (defaults to '').]]>    </description>	<name>emptyText</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>The label text to display next to this Component (defaults to
'').</p>

<br>
<p><b>Note</b>: this config is only used when this Component is
rendered by a Container which has been configured to use the <b><a href="output/Ext.layout.FormLayout.html" ext:cls="Ext.layout.FormLayout">FormLayout</a></b> layout manager
(e.g. <a href="output/Ext.form.FormPanel.html" ext:cls="Ext.form.FormPanel">Ext.form.FormPanel</a> or specifying
<tt>layout:'form'</tt>).</p>

<br>
<p>Also see <tt><a href="output/Ext.Component.html#Ext.Component-hideLabel" ext:member="hideLabel" ext:cls="Ext.Component">hideLabel</a></tt>
and <a href="output/Ext.layout.FormLayout.html" ext:cls="Ext.layout.FormLayout">Ext.layout.FormLayout</a>.<a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-fieldTpl" ext:member="fieldTpl" ext:cls="Ext.layout.FormLayout">fieldTpl</a>.</p>

Example use:

<pre><code><b>new</b> Ext.FormPanel({
    height: 100,
    renderTo: Ext.getBody(),
    items: [{
        xtype: <em>'textfield'</em>,
        fieldLabel: <em>'Name'</em>
    }]
});</code>
</pre>
]]>    </description>	<name>fieldLabel</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The height of this component in pixels (defaultsto auto). <b>Note</b> to express this dimension as a percentage or
offset see <a href="output/Ext.Component.html#Ext.Component-anchor" ext:member="anchor" ext:cls="Ext.Component">Ext.Component.anchor</a>.]]>    </description>	<name>height</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Render this component hidden (default is false).If <tt>true</tt>, the <a href="output/Ext.Component.html#Ext.Component-hide" ext:member="hide" ext:cls="Ext.Component">hide</a> method will be
called internally.]]>    </description>	<name>hidden</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<tt>true</tt> to hide the <a href="output/Ext.ListView.html#Ext.ListView-internalTpl" ext:member="internalTpl" ext:cls="Ext.ListView">header row</a>(defaults to <tt>false</tt> so the <a href="output/Ext.ListView.html#Ext.ListView-internalTpl" ext:member="internalTpl" ext:cls="Ext.ListView">header row</a> will
be shown).]]>    </description>	<name>hideHeaders</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p><tt>true</tt> to completely hide the label element (<a href="output/Ext.Component.html#Ext.Component-fieldLabel" ext:member="fieldLabel" ext:cls="Ext.Component">label</a> and <a href="output/Ext.Component.html#Ext.Component-labelSeparator" ext:member="labelSeparator" ext:cls="Ext.Component">separator</a>).
Defaults to <tt>false</tt>. By default, even if you do not specify
a <tt><a href="output/Ext.Component.html#Ext.Component-fieldLabel" ext:member="fieldLabel" ext:cls="Ext.Component">fieldLabel</a></tt>
the space will still be reserved so that the field will line up
with other fields that do have labels. Setting this to
<tt>true</tt> will cause the field to not reserve that space.</p>

<br>
<p><b>Note</b>: see the note for <tt><a href="output/Ext.Component.html#Ext.Component-clearCls" ext:member="clearCls" ext:cls="Ext.Component">clearCls</a></tt>.</p>

<br>
Example use:

<pre><code><b>new</b> Ext.FormPanel({
    height: 100,
    renderTo: Ext.getBody(),
    items: [{
        xtype: <em>'textfield'</em>
        hideLabel: true
    }]
});</code>
</pre>
]]>    </description>	<name>hideLabel</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>How this component should be hidden. Supported values are
<tt>'visibility'</tt> (css visibility), <tt>'offsets'</tt>
(negative offset position) and <tt>'display'</tt> (css
display).</p>

<br>
<p><b>Note</b>: the default of <tt>'display'</tt> is generally
preferred since items are automatically laid out when they are
first shown (no sizing is done while hidden).</p>
]]>    </description>	<name>hideMode</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[True to hide and show the component's containerwhen hide/show is called on the component, false to hide and show
the component itself (defaults to false). For example, this can be
used as a shortcut for a hide button on a window by setting
hide:true on the button when adding it to its parent
container.]]>    </description>	<name>hideParent</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>The <b>unique</b> id of this component (defaults to an <a href="output/Ext.Component.html#Ext.Component-getId" ext:member="getId" ext:cls="Ext.Component">auto-assigned id</a>).
You should assign an id if you need to be able to access the
component later and you do not have an object reference available
(e.g., using <a href="output/Ext.html" ext:cls="Ext">Ext</a>.<a href="output/Ext.html#Ext-getCmp" ext:member="getCmp" ext:cls="Ext">getCmp</a>).</p>

<p>Note that this id will also be used as the element id for the
containing HTML element that is rendered to the page for this
component. This allows you to write id-based CSS rules to style the
specific instance of this component uniquely, and also to select
sub-elements using this component's id as the parent.</p>

<p><b>Note</b>: to avoid complications imposed by a unique
<tt>id</tt> also see <code><a href="output/Ext.Component.html#Ext.Component-itemId" ext:member="itemId" ext:cls="Ext.Component">itemId</a></code> and
<code><a href="output/Ext.Component.html#Ext.Component-ref" ext:member="ref" ext:cls="Ext.Component">ref</a></code>.</p>

<p><b>Note</b>: to access the container of an item see <code><a href="output/Ext.Component.html#Ext.Component-ownerCt" ext:member="ownerCt" ext:cls="Ext.Component">ownerCt</a></code>.</p>
]]>    </description>	<name>id</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The template to be used for the header row. See<a href="output/Ext.ListView.html#Ext.ListView-tpl" ext:member="tpl" ext:cls="Ext.ListView">tpl</a> for more
details.]]>    </description>	<name>internalTpl</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p><b>Note</b>: this config is only used when this Component is
rendered by a Container which has been configured to use the <b><a href="output/Ext.layout.FormLayout.html" ext:cls="Ext.layout.FormLayout">FormLayout</a></b> layout manager
(e.g. <a href="output/Ext.form.FormPanel.html" ext:cls="Ext.form.FormPanel">Ext.form.FormPanel</a> or specifying
<tt>layout:'form'</tt>).</p>

<br>
<p>An additional CSS class to apply to the div wrapping the form
item element of this field. If supplied, <tt>itemCls</tt> at the
<b>field</b> level will override the default <tt>itemCls</tt>
supplied at the <b>container</b> level. The value specified for
<tt>itemCls</tt> will be added to the default class
(<tt>'x-form-item'</tt>).</p>

<p>Since it is applied to the item wrapper (see <a href="output/Ext.layout.FormLayout.html" ext:cls="Ext.layout.FormLayout">Ext.layout.FormLayout</a>.<a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-fieldTpl" ext:member="fieldTpl" ext:cls="Ext.layout.FormLayout">fieldTpl</a>), it allows you to
write standard CSS rules that can apply to the field, the label (if
specified), or any other element within the markup for the
field.</p>

<br>
<p><b>Note</b>: see the note for <tt><a href="output/Ext.Component.html#Ext.Component-fieldLabel" ext:member="fieldLabel" ext:cls="Ext.Component">fieldLabel</a></tt>.</p>

<br>
Example use:

<pre><code><i>// Apply a style to the field's <b>label</b>:</i>
&lt;style&gt;
    .required .x-form-item-<b>label</b> {font-weight:bold;color:red;}
&lt;/style&gt;

<b>new</b> Ext.FormPanel({
    height: 100,
    renderTo: Ext.getBody(),
    items: [{
        xtype: <em>'textfield'</em>,
        fieldLabel: <em>'Name'</em>,
        itemCls: <em>'required'</em> <i>//this <b>label</b> will be styled</i>
    },{
        xtype: <em>'textfield'</em>,
        fieldLabel: <em>'Favorite Color'</em>
    }]
});</code>
</pre>
]]>    </description>	<name>itemCls</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>An <tt>itemId</tt> can be used as an alternative way to get a
reference to a component when no object reference is available.
Instead of using an <code><a href="output/Ext.Component.html#Ext.Component-id" ext:member="id" ext:cls="Ext.Component">id</a></code> with <a href="output/Ext.html" ext:cls="Ext">Ext</a>.<a href="output/Ext.html#Ext-getCmp" ext:member="getCmp" ext:cls="Ext">getCmp</a>, use <code>itemId</code> with <a href="output/Ext.Container.html" ext:cls="Ext.Container">Ext.Container</a>.<a href="output/Ext.Container.html#Ext.Container-getComponent" ext:member="getComponent" ext:cls="Ext.Container">getComponent</a>
which will retrieve <code>itemId</code>'s or <tt><a href="output/Ext.Component.html#Ext.Component-id" ext:member="id" ext:cls="Ext.Component">id</a></tt>'s. Since <code>itemId</code>'s
are an index to the container's internal MixedCollection, the
<code>itemId</code> is scoped locally to the container -- avoiding
potential conflicts with <a href="output/Ext.ComponentMgr.html" ext:cls="Ext.ComponentMgr">Ext.ComponentMgr</a> which requires a
<b>unique</b> <code><a href="output/Ext.Component.html#Ext.Component-id" ext:member="id" ext:cls="Ext.Component">id</a></code>.</p>

<pre><code><b>var</b> c = <b>new</b> Ext.Panel({ <i>//</i>
    <a href="output/Ext.BoxComponent.html#Ext.BoxComponent-height" ext:member="height" ext:cls="Ext.BoxComponent">height</a>: 300,
    <a href="output/Ext.Component.html#Ext.Component-renderTo" ext:member="renderTo" ext:cls="Ext.Component">renderTo</a>: document.body,
    <a href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout" ext:cls="Ext.Container">layout</a>: <em>'auto'</em>,
    <a href="output/Ext.Container.html#Ext.Container-items" ext:member="items" ext:cls="Ext.Container">items</a>: [
        {
            itemId: <em>'p1'</em>,
            <a href="output/Ext.Panel.html#Ext.Panel-title" ext:member="title" ext:cls="Ext.Panel">title</a>: <em>'Panel 1'</em>,
            <a href="output/Ext.BoxComponent.html#Ext.BoxComponent-height" ext:member="height" ext:cls="Ext.BoxComponent">height</a>: 150
        },
        {
            itemId: <em>'p2'</em>,
            <a href="output/Ext.Panel.html#Ext.Panel-title" ext:member="title" ext:cls="Ext.Panel">title</a>: <em>'Panel 2'</em>,
            <a href="output/Ext.BoxComponent.html#Ext.BoxComponent-height" ext:member="height" ext:cls="Ext.BoxComponent">height</a>: 150
        }
    ]
})
p1 = c.<a href="output/Ext.Container.html#Ext.Container-getComponent" ext:member="getComponent" ext:cls="Ext.Container">getComponent</a>(<em>'p1'</em>); <i>// not the same as <a href="output/Ext.html#Ext-getCmp" ext:member="getCmp" ext:cls="Ext">Ext.getCmp()</a></i>
p2 = p1.<a href="output/Ext.Component.html#Ext.Component-ownerCt" ext:member="ownerCt" ext:cls="Ext.Component">ownerCt</a>.<a href="output/Ext.Container.html#Ext.Container-getComponent" ext:member="getComponent" ext:cls="Ext.Container">getComponent</a>(<em>'p2'</em>); <i>// reference via a sibling</i></code>
</pre>

<p>Also see <tt><a href="output/Ext.Component.html#Ext.Component-id" ext:member="id" ext:cls="Ext.Component">id</a></tt> and <code><a href="output/Ext.Component.html#Ext.Component-ref" ext:member="ref" ext:cls="Ext.Component">ref</a></code>.</p>

<p><b>Note</b>: to access the container of an item see <tt><a href="output/Ext.Component.html#Ext.Component-ownerCt" ext:member="ownerCt" ext:cls="Ext.Component">ownerCt</a></tt>.</p>
]]>    </description>	<name>itemId</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Defaults to <tt>'dl'</tt> to work with thepreconfigured <b><tt><a href="output/Ext.DataView.html#Ext.DataView-tpl" ext:member="tpl" ext:cls="Ext.DataView">tpl</a></tt></b>. This setting specifies the
CSS selector (e.g. <tt>div.some-class</tt> or
<tt>span:first-child</tt>) that will be used to determine what
nodes the ListView will be working with.]]>    </description>	<name>itemSelector</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>The separator to display after the text of each <tt><a href="output/Ext.Component.html#Ext.Component-fieldLabel" ext:member="fieldLabel" ext:cls="Ext.Component">fieldLabel</a></tt>. This property may be
configured at various levels. The order of precedence is:</p>

<div class="mdetail-params">
<ul>
<li>field / component level</li>

<li>container level</li>

<li><a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-labelSeparator" ext:member="labelSeparator" ext:cls="Ext.layout.FormLayout">layout
level</a> (defaults to colon <tt>':'</tt>)</li>
</ul>
</div>

To display no separator for this field's label specify empty string
''.<br>
<br>
<br>
<p><b>Note</b>: see the note for <tt><a href="output/Ext.Component.html#Ext.Component-clearCls" ext:member="clearCls" ext:cls="Ext.Component">clearCls</a></tt>.</p>

<br>
<p>Also see <tt><a href="output/Ext.Component.html#Ext.Component-hideLabel" ext:member="hideLabel" ext:cls="Ext.Component">hideLabel</a></tt>
and <a href="output/Ext.layout.FormLayout.html" ext:cls="Ext.layout.FormLayout">Ext.layout.FormLayout</a>.<a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-fieldTpl" ext:member="fieldTpl" ext:cls="Ext.layout.FormLayout">fieldTpl</a>.</p>

Example use:

<pre><code><b>new</b> Ext.FormPanel({
    height: 100,
    renderTo: Ext.getBody(),
    layoutConfig: {
        labelSeparator: <em>'~'</em>   <i>// layout config has lowest priority (defaults to <em>':'</em>)</i>
    },
    <a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-labelSeparator" ext:member="labelSeparator" ext:cls="Ext.layout.FormLayout">labelSeparator</a>: <em>'&gt;&gt;'</em>,     <i>// config at container level</i>
    items: [{
        xtype: <em>'textfield'</em>,
        fieldLabel: <em>'Field 1'</em>,
        labelSeparator: <em>'...'</em> <i>// field/component level config supersedes others</i>
    },{
        xtype: <em>'textfield'</em>,
        fieldLabel: <em>'Field 2'</em> <i>// labelSeparator will be <em>'='</em></i>
    }]
});</code>
</pre>
]]>    </description>	<name>labelSeparator</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>A CSS style specification string to apply directly to this
field's label. Defaults to the container's labelStyle value if set
(e.g., <tt><a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-labelStyle" ext:member="labelStyle" ext:cls="Ext.layout.FormLayout">Ext.layout.FormLayout.labelStyle</a></tt>
, or '').</p>

<br>
<p><b>Note</b>: see the note for <code><a href="output/Ext.Component.html#Ext.Component-clearCls" ext:member="clearCls" ext:cls="Ext.Component">clearCls</a></code>.</p>

<br>
<p>Also see <code><a href="output/Ext.Component.html#Ext.Component-hideLabel" ext:member="hideLabel" ext:cls="Ext.Component">hideLabel</a></code>
and <code><a href="output/Ext.layout.FormLayout.html" ext:cls="Ext.layout.FormLayout">Ext.layout.FormLayout</a>.<a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-fieldTpl" ext:member="fieldTpl" ext:cls="Ext.layout.FormLayout">fieldTpl</a>.</code></p>

Example use:

<pre><code><b>new</b> Ext.FormPanel({
    height: 100,
    renderTo: Ext.getBody(),
    items: [{
        xtype: <em>'textfield'</em>,
        fieldLabel: <em>'Name'</em>,
        labelStyle: <em>'font-weight:bold;'</em>
    }]
});</code>
</pre>
]]>    </description>	<name>labelStyle</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>A config object containing one or more event handlers to be
added to this object during initialization. This should be a valid
listeners config object as specified in the <a href="output/Ext.util.Observable.html#Ext.util.Observable-addListener" ext:member="addListener" ext:cls="Ext.util.Observable">addListener</a> example for attaching
multiple handlers at once.</p>

<br>
<p><b><u>DOM events from ExtJs <a href="output/Ext.Component.html" ext:cls="Ext.Component">Components</a></u></b></p>

<br>
<p>While <i>some</i> ExtJs Component classes export selected DOM
events (e.g. "click", "mouseover" etc), this is usually only done
when extra value can be added. For example the <a href="output/Ext.DataView.html" ext:cls="Ext.DataView">DataView</a>'s <b><code><a href="output/Ext.DataView.html#Ext.DataView-click" ext:member="click" ext:cls="Ext.DataView">click</a></code></b>
event passing the node clicked on. To access DOM events directly
from a Component's HTMLElement, listeners must be added to the
<i><a href="output/Ext.Component.html#Ext.Component-getEl" ext:member="getEl" ext:cls="Ext.Component">Element</a></i> after
the Component has been rendered. A plugin can simplify this
step:</p>

<pre><code><i>// Plugin is configured <b>with</b> a listeners config object.</i>
<i>// The Component is appended to the argument list of all handler functions.</i>
Ext.DomObserver = Ext.extend(Object, {
    constructor: <b>function</b>(config) {
        this.listeners = config.listeners ? config.listeners : config;
    },

    <i>// Component passes itself into plugin's init method</i>
    init: <b>function</b>(c) {
        <b>var</b> p, l = this.listeners;
        <b>for</b> (p <b>in</b> l) {
            <b>if</b> (Ext.isFunction(l[p])) {
                l[p] = this.createHandler(l[p], c);
            } <b>else</b> {
                l[p].fn = this.createHandler(l[p].fn, c);
            }
        }

        <i>// Add the listeners to the Element immediately following the render call</i>
        c.render = c.render.<a href="output/Function.html#Function-createSequence" ext:member="createSequence" ext:cls="Function">createSequence</a>(<b>function</b>() {
            <b>var</b> e = c.getEl();
            <b>if</b> (e) {
                e.on(l);
            }
        });
    },

    createHandler: <b>function</b>(fn, c) {
        <b>return</b> <b>function</b>(e) {
            fn.call(this, e, c);
        };
    }
});

<b>var</b> combo = <b>new</b> Ext.form.ComboBox({

    <i>// Collapse combo when its element is clicked on</i>
    plugins: [ <b>new</b> Ext.DomObserver({
        click: <b>function</b>(evt, comp) {
            comp.collapse();
        }
    })],
    store: myStore,
    typeAhead: true,
    mode: <em>'local'</em>,
    triggerAction: <em>'all'</em>
});</code>
</pre>

<br>
<br>
]]>    </description>	<name>listeners</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[A string to display during data load operations(defaults to undefined). If specified, this text will be displayed
in a loading div and the view's contents will be cleared while
loading, otherwise the view's contents will continue to display
normally until the new data is loaded and the contents are
replaced.]]>    </description>	<name>loadingText</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p><b>Note</b>: this config is only used when this BoxComponent is
rendered by a Container which has been configured to use the <b><a href="output/Ext.layout.BorderLayout.html" ext:cls="Ext.layout.BorderLayout">BorderLayout</a></b> or one of
the two <b><a href="output/Ext.layout.BoxLayout.html" ext:cls="Ext.layout.BoxLayout">BoxLayout</a> subclasses.</b></p>

<p>An object containing margins to apply to this BoxComponent in
the format:</p>

<pre><code>{
    top: (top margin),
    right: (right margin),
    bottom: (bottom margin),
    left: (left margin)
}</code>
</pre>

<p>May also be a string containing space-separated, numeric margin
values. The order of the sides associated with each value matches
the way CSS processes margin values:</p>

<div class="mdetail-params">
<ul>
<li>If there is only one value, it applies to all sides.</li>

<li>If there are two values, the top and bottom borders are set to
the first value and the right and left are set to the second.</li>

<li>If there are three values, the top is set to the first value,
the left and right are set to the second, and the bottom is set to
the third.</li>

<li>If there are four values, they apply to the top, right, bottom,
and left, respectively.</li>
</ul>
</div>

<br>
<br>
 

<p>Defaults to:</p>

<pre><code>{top:0, right:0, bottom:0, left:0}</code>
</pre>
]]>    </description>	<name>margins</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[True to allow selection of more than one item ata time, false to allow selection of only a single item at a time or
no selection at all, depending on the value of <a href="output/Ext.DataView.html#Ext.DataView-singleSelect" ext:member="singleSelect" ext:cls="Ext.DataView">singleSelect</a>
(defaults to false).]]>    </description>	<name>multiSelect</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The CSS class applied when over a row (defaultsto <tt>'x-list-over'</tt>). An example overriding the default
styling: 

<pre><code>.x-list-over {background-color: orange;}</code>
</pre>
]]>    </description>	<name>overClass</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[An optional extra CSS class that will be added tothis component's Element when the mouse moves over the Element, and
removed when the mouse moves out. (defaults to ''). This can be
useful for adding customized 'active' or 'hover' styles to the
component or any of its children using standard CSS rules.]]>    </description>	<name>overCls</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The page level x coordinate for this componentif contained within a positioning container.]]>    </description>	<name>pageX</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The page level y coordinate for this componentif contained within a positioning container.]]>    </description>	<name>pageY</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[An object or array of objects that will providecustom functionality for this component. The only requirement for a
valid plugin is that it contain an init method that accepts a
reference of type Ext.Component. When a component is created, if
any plugins are available, the component will call the init method
on each plugin, passing a reference to itself. Each plugin can then
call methods or respond to events on the component as needed to
provide its functionality.]]>    </description>	<name>plugins</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The registered <tt>ptype</tt> to create. Thisconfig option is not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a Plugin is being specified not as
a fully instantiated Component, but as a <i>Component config
object</i>. The <tt>ptype</tt> will be looked up at render time up
to determine what type of Plugin to create.<br>
<br>
If you create your own Plugins, you may register them using <a href="output/Ext.ComponentMgr.html#Ext.ComponentMgr-registerPlugin" ext:member="registerPlugin" ext:cls="Ext.ComponentMgr">Ext.ComponentMgr.registerPlugin</a> in
order to be able to take advantage of lazy instantiation and
rendering.]]>    </description>	<name>ptype</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>A path specification, relative to the Component's <a href="output/Ext.Component.html#Ext.Component-ownerCt" ext:member="ownerCt" ext:cls="Ext.Component">ownerCt</a> specifying
into which ancestor Container to place a named reference to this
Component.</p>

<p>The ancestor axis can be traversed by using '/' characters in
the path. For example, to put a reference to a Toolbar Button into
<i>the Panel which owns the Toolbar</i>:</p>

<pre><code><b>var</b> myGrid = <b>new</b> Ext.grid.EditorGridPanel({
    title: <em>'My EditorGridPanel'</em>,
    store: myStore,
    colModel: myColModel,
    tbar: [{
        text: <em>'Save'</em>,
        handler: saveChanges,
        disabled: true,
        ref: <em>'../saveButton'</em>
    }],
    listeners: {
        afteredit: <b>function</b>() {
<i>//          The button reference is <b>in</b> the GridPanel</i>
            myGrid.saveButton.enable();
        }
    }
});</code>
</pre>

<p>In the code above, if the ref had been
<code><em>'saveButton'</em></code> the reference would have been
placed into the Toolbar. Each '/' in the ref moves up one level
from the Component's <a href="output/Ext.Component.html#Ext.Component-ownerCt" ext:member="ownerCt" ext:cls="Ext.Component">ownerCt</a>.</p>
]]>    </description>	<name>ref</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p><b>Note</b>: this config is only used when this BoxComponent is
rendered by a Container which has been configured to use the <b><a href="output/Ext.layout.BorderLayout.html" ext:cls="Ext.layout.BorderLayout">BorderLayout</a></b> layout
manager (e.g. specifying <tt>layout:'border'</tt>).</p>

<br>
<p>See <a href="output/Ext.layout.BorderLayout.html" ext:cls="Ext.layout.BorderLayout">Ext.layout.BorderLayout</a>
also.</p>
]]>    </description>	<name>region</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>Specify the id of the element, a DOM element or an existing
Element that this component will be rendered into.</p>

<div>
<ul>
<li><b>Notes</b> : 

<div style="margin-left: 2em;">
<div class="sub-desc">Do <u>not</u> use this option if the
Component is to be a child item of a <a href="output/Ext.Container.html" ext:cls="Ext.Container">Container</a>. It is the responsibility of
the <a href="output/Ext.Container.html" ext:cls="Ext.Container">Container</a>'s <a href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout" ext:cls="Ext.Container">layout manager</a> to
render and manage its child items.</div>

<div class="sub-desc">When using this config, a call to render() is
not required.</div>
</div>
</li>
</ul>
</div>

<p>See <tt><a href="output/Ext.Component.html#Ext.Component-render" ext:member="render" ext:cls="Ext.Component">render</a></tt>
also.</p>
]]>    </description>	<name>renderTo</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[By default will defer accounting for theconfigured <b><tt><a href="output/Ext.ListView.html#Ext.ListView-scrollOffset" ext:member="scrollOffset" ext:cls="Ext.ListView">scrollOffset</a></tt></b> for 10
milliseconds. Specify <tt>true</tt> to account for the configured
<b><tt><a href="output/Ext.ListView.html#Ext.ListView-scrollOffset" ext:member="scrollOffset" ext:cls="Ext.ListView">scrollOffset</a></tt></b> immediately.]]>    </description>	<name>reserveScrollOffset</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The amount of space to reserve for the scrollbar(defaults to <tt>undefined</tt>). If an explicit value isn't
specified, this will be automatically calculated.]]>    </description>	<name>scrollOffset</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The CSS class applied to a selected row (defaultsto <tt>'x-list-selected'</tt>). An example overriding the default
styling: 

<pre><code>.x-list-selected {background-color: yellow;}</code>
</pre>
]]>    </description>	<name>selectedClass</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[True to enable multiselection by clicking onmultiple items without requiring the user to hold Shift or Ctrl,
false to force the user to hold Ctrl or Shift to select more than
on item (defaults to false).]]>    </description>	<name>simpleSelect</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[True to allow selection of exactly one item at atime, false to allow no selection at all (defaults to false). Note
that if <a href="output/Ext.DataView.html#Ext.DataView-multiSelect" ext:member="multiSelect" ext:cls="Ext.DataView">multiSelect</a> =
true, this value will be ignored.]]>    </description>	<name>singleSelect</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>An array of events that, when fired, should trigger this
component to save its state (defaults to none).
<code>stateEvents</code> may be any type of event supported by this
component, including browser or custom events (e.g., <tt>['click',
'customerchange']</tt>).</p>

<p>See <code><a href="output/Ext.Component.html#Ext.Component-stateful" ext:member="stateful" ext:cls="Ext.Component">stateful</a></code>
for an explanation of saving and restoring Component state.</p>
]]>    </description>	<name>stateEvents</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The unique id for this component to use for statemanagement purposes (defaults to the component id if one was set,
otherwise null if the component is using a generated id). 

<p>See <code><a href="output/Ext.Component.html#Ext.Component-stateful" ext:member="stateful" ext:cls="Ext.Component">stateful</a></code>
for an explanation of saving and restoring Component state.</p>
]]>    </description>	<name>stateId</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>A flag which causes the Component to attempt to restore the
state of internal properties from a saved state on startup. The
component must have either a <code><a href="output/Ext.Component.html#Ext.Component-stateId" ext:member="stateId" ext:cls="Ext.Component">stateId</a></code> or
<code><a href="output/Ext.Component.html#Ext.Component-id" ext:member="id" ext:cls="Ext.Component">id</a></code> assigned for
state to be managed. Auto-generated ids are not guaranteed to be
stable across page loads and cannot be relied upon to save and
restore the same state for a component.</p>

<p>For state saving to work, the state manager's provider must have
been set to an implementation of <a href="output/Ext.state.Provider.html" ext:cls="Ext.state.Provider">Ext.state.Provider</a> which overrides
the <a href="output/Ext.state.Provider.html#Ext.state.Provider-set" ext:member="set" ext:cls="Ext.state.Provider">set</a> and <a href="output/Ext.state.Provider.html#Ext.state.Provider-get" ext:member="get" ext:cls="Ext.state.Provider">get</a> methods to
save and recall name/value pairs. A built-in implementation, <a href="output/Ext.state.CookieProvider.html" ext:cls="Ext.state.CookieProvider">Ext.state.CookieProvider</a> is
available.</p>

<p>To set the state provider for the current page:</p>

<pre><code>Ext.state.Manager.setProvider(<b>new</b> Ext.state.CookieProvider({
    expires: <b>new</b> Date(<b>new</b> Date().getTime()+(1000*60*60*24*7)), <i>//7 days from now</i>
}));</code>
</pre>

<p>A stateful Component attempts to save state when one of the
events listed in the <code><a href="output/Ext.Component.html#Ext.Component-stateEvents" ext:member="stateEvents" ext:cls="Ext.Component">stateEvents</a></code> configuration
fires.</p>

<p>To save state, a stateful Component first serializes its state
by calling <b><code>getState</code></b>. By default, this function
does nothing. The developer must provide an implementation which
returns an object hash which represents the Component's restorable
state.</p>

<p>The value yielded by getState is passed to <a href="output/Ext.state.Manager.html#Ext.state.Manager-set" ext:member="set" ext:cls="Ext.state.Manager">Ext.state.Manager.set</a> which uses
the configured <a href="output/Ext.state.Provider.html" ext:cls="Ext.state.Provider">Ext.state.Provider</a> to save the
object keyed by the Component's <code><a href="output/stateId.html" ext:cls="stateId">stateId</a></code>, or, if that is not specified,
its <code><a href="output/Ext.Component.html#Ext.Component-id" ext:member="id" ext:cls="Ext.Component">id</a></code>.</p>

<p>During construction, a stateful Component attempts to
<i>restore</i> its state by calling <a href="output/Ext.state.Manager.html#Ext.state.Manager-get" ext:member="get" ext:cls="Ext.state.Manager">Ext.state.Manager.get</a> passing the
<code><a href="output/Ext.Component.html#Ext.Component-stateId" ext:member="stateId" ext:cls="Ext.Component">stateId</a></code>,
or, if that is not specified, the <code><a href="output/Ext.Component.html#Ext.Component-id" ext:member="id" ext:cls="Ext.Component">id</a></code>.</p>

<p>The resulting object is passed to
<b><code>applyState</code></b>. The default implementation of
<code>applyState</code> simply copies properties into the object,
but a developer may override this to support more behaviour.</p>

<p>You can perform extra processing on state save and restore by
attaching handlers to the <a href="output/Ext.Component.html#Ext.Component-beforestaterestore" ext:member="beforestaterestore" ext:cls="Ext.Component">beforestaterestore</a>, <a href="output/Ext.Component.html#Ext.Component-staterestore" ext:member="staterestore" ext:cls="Ext.Component">staterestore</a>,
<a href="output/Ext.Component.html#Ext.Component-beforestatesave" ext:member="beforestatesave" ext:cls="Ext.Component">beforestatesave</a> and <a href="output/Ext.Component.html#Ext.Component-statesave" ext:member="statesave" ext:cls="Ext.Component">statesave</a>
events.</p>
]]>    </description>	<name>stateful</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The <a href="output/Ext.data.Store.html" ext:cls="Ext.data.Store">Ext.data.Store</a> to bind this DataViewto.]]>    </description>	<name>store</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[A custom style specification to be applied tothis component's Element. Should be a valid argument to <a href="output/Ext.Element.html#Ext.Element-applyStyles" ext:member="applyStyles" ext:cls="Ext.Element">Ext.Element.applyStyles</a>. 

<pre><code><b>new</b> Ext.Panel({
    title: <em>'Some Title'</em>,
    renderTo: Ext.getBody(),
    width: 400, height: 300,
    layout: <em>'form'</em>,
    items: [{
        xtype: <em>'textarea'</em>,
        style: {
            width: <em>'95%'</em>,
            marginBottom: <em>'10px'</em>
        }
    },
        <b>new</b> Ext.Button({
            text: <em>'Send'</em>,
            minWidth: <em>'100'</em>,
            style: {
                marginBottom: <em>'10px'</em>
            }
        })
    ]
});</code>
</pre>
]]>    </description>	<name>style</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p><b>Note</b>: this config is only used when this BoxComponent is
a child item of a TabPanel.</p>

A string to be used as innerHTML (html tags are accepted) to show
in a tooltip when mousing over the associated tab selector element.
<a href="output/Ext.QuickTips.html" ext:cls="Ext.QuickTips">Ext.QuickTips</a>.init() must be called in
order for the tips to render.]]>    </description>	<name>tabTip</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The HTML fragment or an array of fragments thatwill make up the template used by this DataView. This should be
specified in the same format expected by the constructor of <a href="output/Ext.XTemplate.html" ext:cls="Ext.XTemplate">Ext.XTemplate</a>.]]>    </description>	<name>tpl</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[True to enable mouseenter and mouseleaveevents]]>    </description>	<name>trackOver</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The width of this component in pixels (defaultsto auto). <b>Note</b> to express this dimension as a percentage or
offset see <a href="output/Ext.Component.html#Ext.Component-anchor" ext:member="anchor" ext:cls="Ext.Component">Ext.Component.anchor</a>.]]>    </description>	<name>width</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The local x (left) coordinate for this componentif contained within a positioning container.]]>    </description>	<name>x</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The registered <tt>xtype</tt> to create. Thisconfig option is not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a Container is
being specified not as a fully instantiated Component, but as a
<i>Component config object</i>. The <tt>xtype</tt> will be looked
up at render time up to determine what type of child Component to
create.<br>
<br>
The predefined xtypes are listed <a href="output/Ext.Component.html" ext:cls="Ext.Component">here</a>.<br>
<br>
If you subclass Components to create your own Components, you may
register them using <a href="output/Ext.ComponentMgr.html#Ext.ComponentMgr-registerType" ext:member="registerType" ext:cls="Ext.ComponentMgr">Ext.ComponentMgr.registerType</a> in
order to be able to take advantage of lazy instantiation and
rendering.]]>    </description>	<name>xtype</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The local y (top) coordinate for this componentif contained within a positioning container.]]>    </description>	<name>y</name>	<required>false</required></attribute></tag>
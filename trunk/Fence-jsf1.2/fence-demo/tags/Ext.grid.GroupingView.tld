<tag><description>    <![CDATA[Adds the ability for single level grouping
to the grid. A <a href="output/Ext.data.GroupingStore.html" ext:cls="Ext.data.GroupingStore">GroupingStore</a> must be used to
enable grouping. Some grouping characteristics may also be
configured at the <a href="output/Ext.grid.Column.html" ext:cls="Ext.grid.Column">Column level</a>
<div class="mdetail-params">
<ul>
<li><code><a href="output/Ext.grid.Column.html#Ext.grid.Column-emptyGroupText" ext:member="emptyGroupText" ext:cls="Ext.grid.Column">emptyGroupText</a></code></li>

<li><code><code><a href="output/Ext.grid.Column.html#Ext.grid.Column-groupable" ext:member="groupable" ext:cls="Ext.grid.Column">groupable</a></code></code></li>

<li><code><code><a href="output/Ext.grid.Column.html#Ext.grid.Column-groupName" ext:member="groupName" ext:cls="Ext.grid.Column">groupName</a></code></code></li>

<li><code><code><a href="output/Ext.grid.Column.html#Ext.grid.Column-groupRender" ext:member="groupRender" ext:cls="Ext.grid.Column">groupRender</a></code></code></li>
</ul>
</div>

<p><code>Sample usage:</code></p>

<pre><code><code><b>var</b> grid = <b>new</b> Ext.grid.GridPanel({
    <i>// A groupingStore is required <b>for</b> a GroupingView
</i>
    store: <b>new</b> <a href="output/Ext.data.GroupingStore.html" ext:cls="Ext.data.GroupingStore">Ext.data.GroupingStore</a>({
        autoDestroy: true,
        reader: reader,
        data: xg.dummyData,
        sortInfo: {field: <em>'company'</em>, direction: <em>'ASC'</em>},
        <a href="output/Ext.data.GroupingStore.html#Ext.data.GroupingStore-groupOnSort" ext:member="groupOnSort" ext:cls="Ext.data.GroupingStore">groupOnSort</a>: true,
        <a href="output/Ext.data.GroupingStore.html#Ext.data.GroupingStore-remoteGroup" ext:member="remoteGroup" ext:cls="Ext.data.GroupingStore">remoteGroup</a>: true,
        <a href="output/Ext.data.GroupingStore.html#Ext.data.GroupingStore-groupField" ext:member="groupField" ext:cls="Ext.data.GroupingStore">groupField</a>: <em>'industry'</em>
    }),
    colModel: <b>new</b> <a href="output/Ext.grid.ColumnModel.html" ext:cls="Ext.grid.ColumnModel">Ext.grid.ColumnModel</a>({
        columns:[
            {id:<em>'company'</em>,header: <em>'Company'</em>, width: 60, dataIndex: <em>'company'</em>},
            <i>// <a href="output/Ext.grid.Column.html#Ext.grid.Column-groupable" ext:member="groupable" ext:cls="Ext.grid.Column">groupable</a>, <a href="output/Ext.grid.Column.html#Ext.grid.Column-groupName" ext:member="groupName" ext:cls="Ext.grid.Column">groupName</a>, <a href="output/Ext.grid.Column.html#Ext.grid.Column-groupRender" ext:member="groupRender" ext:cls="Ext.grid.Column">groupRender</a> are also configurable at column level
</i>
            {header: <em>'Price'</em>, renderer: Ext.util.Format.usMoney, dataIndex: <em>'price'</em>, <a href="output/Ext.grid.Column.html#Ext.grid.Column-groupable" ext:member="groupable" ext:cls="Ext.grid.Column">groupable</a>: false},
            {header: <em>'Change'</em>, dataIndex: <em>'change'</em>, renderer: Ext.util.Format.usMoney},
            {header: <em>'Industry'</em>, dataIndex: <em>'industry'</em>},
            {header: <em>'Last Updated'</em>, renderer: Ext.util.Format.dateRenderer(<em>'m/d/Y'</em>), dataIndex: <em>'lastChange'</em>}
        ],
        defaults: {
            sortable: true,
            menuDisabled: false,
            width: 20
        }
    }),

    view: <b>new</b> Ext.grid.GroupingView({
        <a href="output/Ext.grid.GridView.html#Ext.grid.GridView-forceFit" ext:member="forceFit" ext:cls="Ext.grid.GridView">forceFit</a>: true,
        <i>// custom grouping text template to display the number of items per group
</i>
        <a href="output/Ext.grid.GroupingView.html#Ext.grid.GroupingView-groupTextTpl" ext:member="groupTextTpl" ext:cls="Ext.grid.GroupingView">groupTextTpl</a>: <em>'{text} ({[values.rs.length]} {[values.rs.length &gt; 1 ?</em> "Items"</code> : <em>"Item"</em>]})'</code>
    }),

    frame:true,
    width: 700,
    height: 450,
    collapsible: true,
    animCollapse: false,
    title: <em>'Grouping Example'</em>,
    iconCls: <em>'icon-grid'</em>,
    renderTo: document.body
});
</pre>
]]></description><name>groupingview</name><tag-class></tag-class><body-content>JSP</body-content><attribute>	<description>        <![CDATA[Defaults to <tt>false</tt>. Specify <tt>true</tt>to have the column widths re-proportioned when the grid is
<b>initially rendered</b>. The <a href="output/Ext.grid.Column.html#Ext.grid.Column-width" ext:member="width" ext:cls="Ext.grid.Column">initially configured
width</a> of each column will be adjusted to fit the grid width and
prevent horizontal scrolling. If columns are later resized
(manually or programmatically), the other columns in the grid will
<b>not</b> be resized to fit the grid width. See <tt><a href="output/Ext.grid.GridView.html#Ext.grid.GridView-forceFit" ext:member="forceFit" ext:cls="Ext.grid.GridView">forceFit</a></tt>
also.]]>    </description>	<name>autoFill</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The selector used to find cells internally(defaults to <tt>'td.x-grid3-cell'</tt>)]]>    </description>	<name>cellSelector</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The number of levels to search for cells inevent delegation (defaults to <tt>4</tt>)]]>    </description>	<name>cellSelectorDepth</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The text displayed in the 'Columns' menu item(defaults to <tt>'Columns'</tt>)]]>    </description>	<name>columnsText</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[True to defer <tt><a href="output/Ext.grid.GridView.html#Ext.grid.GridView-emptyText" ext:member="emptyText" ext:cls="Ext.grid.GridView">emptyText</a></tt> being applied untilthe store's first load (defaults to <tt>true</tt>).]]>    </description>	<name>deferEmptyText</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The text to display when there is an empty groupvalue (defaults to <tt>'(None)'</tt>). May also be specified per
column, see <a href="output/Ext.grid.Column.html" ext:cls="Ext.grid.Column">Ext.grid.Column</a>.<a href="output/Ext.grid.Column.html#Ext.grid.Column-emptyGroupText" ext:member="emptyGroupText" ext:cls="Ext.grid.Column">emptyGroupText</a>.]]>    </description>	<name>emptyGroupText</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Default text (html tags are accepted) to displayin the grid body when no rows are available (defaults to ''). This
value will be used to update the <tt><a href="output/Ext.grid.GridView.html#Ext.grid.GridView-mainBody" ext:member="mainBody" ext:cls="Ext.grid.GridView">mainBody</a></tt>: 

<pre><code>this.mainBody.update(<em>'&lt;div class=</em>"x-grid-empty"</code>&gt;' + this.emptyText + <em>'&lt;/div&gt;'</em>);
</pre>
]]>    </description>	<name>emptyText</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<tt>false</tt> to disable grouping functionality(defaults to <tt>true</tt>)]]>    </description>	<name>enableGrouping</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<tt>true</tt> to enable the grouping control inthe column menu (defaults to <tt>true</tt>)]]>    </description>	<name>enableGroupingMenu</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<tt>true</tt> to allow the user to turn offgrouping (defaults to <tt>true</tt>)]]>    </description>	<name>enableNoGroups</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[True to add a second TR element per row that canbe used to provide a row body that spans beneath the data row. Use
the <a href="output/Ext.grid.GridView.html#Ext.grid.GridView-getRowClass" ext:member="getRowClass" ext:cls="Ext.grid.GridView">getRowClass</a> method's rowParams
config to customize the row body.]]>    </description>	<name>enableRowBody</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Defaults to <tt>false</tt>. Specify <tt>true</tt>to have the column widths re-proportioned at <b>all times</b>. The
<a href="output/Ext.grid.Column.html#Ext.grid.Column-width" ext:member="width" ext:cls="Ext.grid.Column">initially configured
width</a> of each column will be adjusted to fit the grid width and
prevent horizontal scrolling. If columns are later resized
(manually or programmatically), the other columns in the grid
<b>will</b> be resized to fit the grid width. See <tt><a href="output/Ext.grid.GridView.html#Ext.grid.GridView-autoFill" ext:member="autoFill" ext:cls="Ext.grid.GridView">autoFill</a></tt>
also.]]>    </description>	<name>forceFit</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Text displayed in the grid header menu forgrouping by a column (defaults to 'Group By This Field').]]>    </description>	<name>groupByText</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Indicates how to construct the group identifier.<tt>'value'</tt> constructs the id using raw value,
<tt>'display'</tt> constructs the id using the rendered value.
Defaults to <tt>'value'</tt>.]]>    </description>	<name>groupMode</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[This property must be configured in the <a href="output/Ext.grid.Column.html" ext:cls="Ext.grid.Column">Ext.grid.Column</a> for eachcolumn.]]>    </description>	<name>groupRenderer</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The template used to render the group header(defaults to <tt>'{text}'</tt>). This is used to format an object
which contains the following properties: 

<div class="mdetail-params">
<ul>
<li><b>group</b> : String

<p class="sub-desc">The <i>rendered</i> value of the group field.
By default this is the unchanged value of the group field. If a
<tt><b><a href="output/Ext.grid.Column.html#Ext.grid.Column-groupRenderer" ext:member="groupRenderer" ext:cls="Ext.grid.Column">groupRenderer</a></b></tt> is specified,
it is the result of a call to that function.</p>
</li>

<li><b>gvalue</b> : Object

<p class="sub-desc">The <i>raw</i> value of the group field.</p>
</li>

<li><b>text</b> : String

<p class="sub-desc">The configured header (as described in <tt><a href="output/Ext.grid.GroupingView.html#Ext.grid.GroupingView-showGroupName" ext:member="showGroupName" ext:cls="Ext.grid.GroupingView">showGroupName</a>)</tt> if <tt><a href="output/Ext.grid.GroupingView.html#Ext.grid.GroupingView-showGroupName" ext:member="showGroupName" ext:cls="Ext.grid.GroupingView">showGroupName</a></tt> is
<tt>true</tt>) plus the <i>rendered</i> group field value.</p>
</li>

<li><b>groupId</b> : String

<p class="sub-desc">A unique, generated ID which is applied to the
View Element which contains the group.</p>
</li>

<li><b>startRow</b> : Number

<p class="sub-desc">The row index of the Record which caused group
change.</p>
</li>

<li><b>rs</b> : Array

<p class="sub-desc">Contains a single element: The Record providing
the data for the row which caused group change.</p>
</li>

<li><b>cls</b> : String

<p class="sub-desc">The generated class name string to apply to the
group header Element.</p>
</li>

<li><b>style</b> : String

<p class="sub-desc">The inline style rules to apply to the group
header Element.</p>
</li>
</ul>
</div>

<br>
<br>
 See <a href="output/Ext.XTemplate.html" ext:cls="Ext.XTemplate">Ext.XTemplate</a> for information on how to
format data using a template. Possible usage:

<pre><code><b>var</b> grid = <b>new</b> Ext.grid.GridPanel({
    ...
    view: <b>new</b> Ext.grid.GroupingView({
        groupTextTpl: <em>'{text} ({[values.rs.length]} {[values.rs.length &gt; 1 ?</em> "Items"</code> : <em>"Item"</em>]})'
    }),
});
</pre>
]]>    </description>	<name>groupTextTpl</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[True to disable the grid column headers (defaultsto <tt>false</tt>). Use the <a href="output/Ext.grid.ColumnModel.html" ext:cls="Ext.grid.ColumnModel">ColumnModel</a> <tt><a href="output/Ext.grid.ColumnModel.html#Ext.grid.ColumnModel-menuDisabled" ext:member="menuDisabled" ext:cls="Ext.grid.ColumnModel">menuDisabled</a></tt> config to
disable the <i>menu</i> for individual columns. While this config
is true the following will be disabled:

<div class="mdetail-params">
<ul>
<li>clicking on header to sort</li>

<li>the trigger to reveal the menu.</li>
</ul>
</div>
]]>    </description>	<name>headersDisabled</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<tt>true</tt> to hide the column that iscurrently grouped (defaults to <tt>false</tt>)]]>    </description>	<name>hideGroupedColumn</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<tt>true</tt> to skip refreshing the view whennew rows are added (defaults to <tt>false</tt>)]]>    </description>	<name>ignoreAdd</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>A config object containing one or more event handlers to be
added to this object during initialization. This should be a valid
listeners config object as specified in the <a href="output/Ext.util.Observable.html#Ext.util.Observable-addListener" ext:member="addListener" ext:cls="Ext.util.Observable">addListener</a> example for attaching
multiple handlers at once.</p>

<br>
<p><b><u>DOM events from ExtJs <a href="output/Ext.Component.html" ext:cls="Ext.Component">Components</a></u></b></p>

<br>
<p>While <i>some</i> ExtJs Component classes export selected DOM
events (e.g. "click", "mouseover" etc), this is usually only done
when extra value can be added. For example the <a href="output/Ext.DataView.html" ext:cls="Ext.DataView">DataView</a>'s <b><code><a href="output/Ext.DataView.html#Ext.DataView-click" ext:member="click" ext:cls="Ext.DataView">click</a></code></b>
event passing the node clicked on. To access DOM events directly
from a Component's HTMLElement, listeners must be added to the
<i><a href="output/Ext.Component.html#Ext.Component-getEl" ext:member="getEl" ext:cls="Ext.Component">Element</a></i> after
the Component has been rendered. A plugin can simplify this
step:</p>

<pre><code><i>// Plugin is configured <b>with</b> a listeners config object.</i>
<i>// The Component is appended to the argument list of all handler functions.</i>
Ext.DomObserver = Ext.extend(Object, {
    constructor: <b>function</b>(config) {
        this.listeners = config.listeners ? config.listeners : config;
    },

    <i>// Component passes itself into plugin's init method</i>
    init: <b>function</b>(c) {
        <b>var</b> p, l = this.listeners;
        <b>for</b> (p <b>in</b> l) {
            <b>if</b> (Ext.isFunction(l[p])) {
                l[p] = this.createHandler(l[p], c);
            } <b>else</b> {
                l[p].fn = this.createHandler(l[p].fn, c);
            }
        }

        <i>// Add the listeners to the Element immediately following the render call</i>
        c.render = c.render.<a href="output/Function.html#Function-createSequence" ext:member="createSequence" ext:cls="Function">createSequence</a>(<b>function</b>() {
            <b>var</b> e = c.getEl();
            <b>if</b> (e) {
                e.on(l);
            }
        });
    },

    createHandler: <b>function</b>(fn, c) {
        <b>return</b> <b>function</b>(e) {
            fn.call(this, e, c);
        };
    }
});

<b>var</b> combo = <b>new</b> Ext.form.ComboBox({

    <i>// Collapse combo when its element is clicked on</i>
    plugins: [ <b>new</b> Ext.DomObserver({
        click: <b>function</b>(evt, comp) {
            comp.collapse();
        }
    })],
    store: myStore,
    typeAhead: true,
    mode: <em>'local'</em>,
    triggerAction: <em>'all'</em>
});</code>
</pre>

<br>
<br>
]]>    </description>	<name>listeners</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The selector used to find rows internally(defaults to <tt>'div.x-grid3-row'</tt>)]]>    </description>	<name>rowSelector</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The number of levels to search for rows in eventdelegation (defaults to <tt>10</tt>)]]>    </description>	<name>rowSelectorDepth</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The amount of space to reserve for the verticalscrollbar (defaults to <tt>undefined</tt>). If an explicit value
isn't specified, this will be automatically calculated.]]>    </description>	<name>scrollOffset</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The CSS class applied to a selected row (defaultsto <tt>'x-grid3-row-selected'</tt>). An example overriding the
default styling: 

<pre><code>.x-grid3-row-selected {background-color: yellow;}</code>
</pre>

Note that this only controls the row, and will not do anything for
the text inside it. To style inner facets (like text) use something
like: 

<pre><code>.x-grid3-row-selected .x-grid3-cell-inner {
        color: #FFCC00;
    }</code>
</pre>
]]>    </description>	<name>selectedRowClass</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[If <tt>true</tt> will display a prefix plus a ':' before the group field value in the group header line. The prefix
will consist of the <tt><b><a href="output/Ext.grid.Column.html#Ext.grid.Column-groupName" ext:member="groupName" ext:cls="Ext.grid.Column">groupName</a></b></tt> (or the configured
<tt><b><a href="output/Ext.grid.Column.html#Ext.grid.Column-header" ext:member="header" ext:cls="Ext.grid.Column">header</a></b></tt>
if not provided) configured in the <a href="output/Ext.grid.Column.html" ext:cls="Ext.grid.Column">Ext.grid.Column</a> for each set of
grouped rows (defaults to <tt>true</tt>).]]>    </description>	<name>showGroupName</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Text displayed in the grid header forenabling/disabling grouping (defaults to 'Show in Groups').]]>    </description>	<name>showGroupsText</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The text displayed in the 'Sort Ascending' menuitem (defaults to <tt>'Sort Ascending'</tt>)]]>    </description>	<name>sortAscText</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The CSS classes applied to a header when it issorted. (defaults to <tt>['sort-asc', 'sort-desc']</tt>)]]>    </description>	<name>sortClasses</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The text displayed in the 'Sort Descending' menuitem (defaults to <tt>'Sort Descending'</tt>)]]>    </description>	<name>sortDescText</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<tt>true</tt> to start all groups collapsed(defaults to <tt>false</tt>)]]>    </description>	<name>startCollapsed</name>	<required>false</required></attribute></tag>
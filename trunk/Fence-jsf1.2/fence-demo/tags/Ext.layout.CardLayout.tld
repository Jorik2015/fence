<tag><description>    <![CDATA[
<p>This layout manages multiple child Components, each fitted to
the Container, where only a single child Component can be visible
at any given time. This layout style is most commonly used for
wizards, tab implementations, etc. This class is intended to be
extended or created via the layout:'card' <a href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout" ext:cls="Ext.Container">Ext.Container.layout</a> config, and should
generally not need to be created directly via the new keyword.</p>

<p>The CardLayout's focal method is <a href="output/Ext.layout.CardLayout.html#Ext.layout.CardLayout-setActiveItem" ext:member="setActiveItem" ext:cls="Ext.layout.CardLayout">setActiveItem</a>. Since only one
panel is displayed at a time, the only way to move from one
Component to the next is by calling setActiveItem, passing the id
or index of the next panel to display. The layout itself does not
provide a user interface for handling this navigation, so that
functionality must be provided by the developer.</p>

<p>In the following example, a simplistic wizard setup is
demonstrated. A button bar is added to the footer of the containing
panel to provide navigation buttons. The buttons will be handled by
a common navigation routine -- for this example, the implementation
of that routine has been ommitted since it can be any type of
custom logic. Note that other uses of a CardLayout (like a tab
control) would require a completely different implementation. For
serious implementations, a better approach would be to extend
CardLayout to provide the custom functionality needed. Example
usage:</p>

<pre><code><b>var</b> navHandler = <b>function</b>(direction){
    <i>// This routine could contain business logic required to manage the navigation steps.
</i>
    <i>// It would call setActiveItem as needed, manage navigation button state, handle any
</i>
    <i>// branching logic that might be required, handle alternate actions like cancellation
</i>
    <i>// or finalization, etc.  A complete wizard implementation could get pretty
</i>
    <i>// sophisticated depending on the complexity required, and should probably be
</i>
    <i>// done as a subclass of CardLayout <b>in</b> a real-world implementation.
</i>
};

<b>var</b> card = <b>new</b> Ext.Panel({
    title: <em>'Example Wizard'</em>,
    layout:<em>'card'</em>,
    activeItem: 0, <i>// make sure the active item is set on the container config!
</i>
    bodyStyle: <em>'padding:15px'</em>,
    defaults: {
        <i>// applied to each contained panel
</i>
        border:false
    },
    <i>// just an example of one possible navigation scheme, using buttons
</i>
    bbar: [
        {
            id: <em>'move-prev'</em>,
            text: <em>'Back'</em>,
            handler: navHandler.createDelegate(this, [-1]),
            disabled: true
        },
        <em>'-&gt;'</em>, <i>// greedy spacer so that the buttons are aligned to each side
</i>
        {
            id: <em>'move-next'</em>,
            text: <em>'Next'</em>,
            handler: navHandler.createDelegate(this, [1])
        }
    ],
    <i>// the panels (or <em>"cards"</em>) within the layout
</i>
    items: [{
        id: <em>'card-0'</em>,
        html: <em>'&lt;h1&gt;Welcome to the Wizard!&lt;/h1&gt;&lt;p&gt;Step 1 of 3&lt;/p&gt;'</em>
    },{
        id: <em>'card-1'</em>,
        html: <em>'&lt;p&gt;Step 2 of 3&lt;/p&gt;'</em>
    },{
        id: <em>'card-2'</em>,
        html: <em>'&lt;h1&gt;Congratulations!&lt;/h1&gt;&lt;p&gt;Step 3 of 3 - Complete&lt;/p&gt;'</em>
    }]
});</code>
</pre>
]]></description><name>cardlayout</name><tag-class></tag-class><body-content>JSP</body-content><attribute>	<description>        <![CDATA[True to render each contained item at the time itbecomes active, false to render all contained items as soon as the
layout is rendered (defaults to false). If there is a significant
amount of content or a lot of heavy controls being rendered into
panels that are not displayed by default, setting this to true
might improve performance.]]>    </description>	<name>deferredRender</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>An optional extra CSS class that will be added to the container.
This can be useful for adding customized styles to the container or
any of its children using standard CSS rules. See <a href="output/Ext.Component.html" ext:cls="Ext.Component">Ext.Component</a>.<a href="output/Ext.Component.html#Ext.Component-ctCls" ext:member="ctCls" ext:cls="Ext.Component">ctCls</a> also.</p>

<p><b>Note</b>: <tt>extraCls</tt> defaults to <tt>''</tt> except
for the following classes which assign a value by default:</p>

<div class="mdetail-params">
<ul>
<li><a href="output/Ext.layout.AbsoluteLayout.html" ext:cls="Ext.layout.AbsoluteLayout">Absolute Layout</a> :
<tt>'x-abs-layout-item'</tt></li>

<li><a href="output/Ext.layout.Box.html" ext:cls="Ext.layout.Box">Box Layout</a> :
<tt>'x-box-item'</tt></li>

<li><a href="output/Ext.layout.ColumnLayout.html" ext:cls="Ext.layout.ColumnLayout">Column Layout</a> :
<tt>'x-column'</tt></li>
</ul>
</div>

To configure the above Classes with an extra CSS class append to
the default. For example, for ColumnLayout:

<pre><code>extraCls: <em>'x-column custom-class'</em></code>
</pre>

<br>
<br>
]]>    </description>	<name>extraCls</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[True to force a layout of the active item whenthe active card is changed. Defaults to false.]]>    </description>	<name>layoutOnCardChange</name>	<required>false</required></attribute></tag>
<tag><description>    <![CDATA[
<p>This class represents the primary interface of a component based
grid control to represent data in a tabular format of rows and
columns. The GridPanel is composed of the following:</p>

<div class="mdetail-params">
<ul>
<li><b><a href="output/Ext.data.Store.html" ext:cls="Ext.data.Store">Store</a></b> : The Model holding the data
records (rows)</li>

<li><b><a href="output/Ext.grid.ColumnModel.html" ext:cls="Ext.grid.ColumnModel">Column model</a></b> : Column
makeup</li>

<li><b><a href="output/Ext.grid.GridView.html" ext:cls="Ext.grid.GridView">View</a></b> : Encapsulates the user
interface</li>

<li><b><a href="output/Ext.grid.AbstractSelectionModel.html" ext:cls="Ext.grid.AbstractSelectionModel">selection model</a></b> :
Selection behavior</li>
</ul>
</div>

<p>Example usage:</p>

<pre><code><b>var</b> grid = <b>new</b> Ext.grid.GridPanel({
    <a href="output/Ext.grid.GridPanel.html#Ext.grid.GridPanel-store" ext:member="store" ext:cls="Ext.grid.GridPanel">store</a>: <b>new</b> <a href="output/Ext.data.Store.html" ext:cls="Ext.data.Store">Ext.data.Store</a>({
        <a href="output/Ext.data.Store.html#Ext.data.Store-autoDestroy" ext:member="autoDestroy" ext:cls="Ext.data.Store">autoDestroy</a>: true,
        <a href="output/Ext.data.Store.html#Ext.data.Store-reader" ext:member="reader" ext:cls="Ext.data.Store">reader</a>: reader,
        <a href="output/Ext.data.Store.html#Ext.data.Store-data" ext:member="data" ext:cls="Ext.data.Store">data</a>: xg.dummyData
    }),
    <a href="output/Ext.grid.GridPanel.html#Ext.grid.GridPanel-colModel" ext:member="colModel" ext:cls="Ext.grid.GridPanel">colModel</a>: <b>new</b> <a href="output/Ext.grid.ColumnModel.html" ext:cls="Ext.grid.ColumnModel">Ext.grid.ColumnModel</a>({
        <a href="output/Ext.grid.ColumnModel.html#Ext.grid.ColumnModel-defaults" ext:member="defaults" ext:cls="Ext.grid.ColumnModel">defaults</a>: {
            width: 120,
            sortable: true
        },
        <a href="output/Ext.grid.ColumnModel.html#Ext.grid.ColumnModel-columns" ext:member="columns" ext:cls="Ext.grid.ColumnModel">columns</a>: [
            {id: <em>'company'</em>, header: <em>'Company'</em>, width: 200, sortable: true, dataIndex: <em>'company'</em>},
            {header: <em>'Price'</em>, renderer: Ext.util.Format.usMoney, dataIndex: <em>'price'</em>},
            {header: <em>'Change'</em>, dataIndex: <em>'change'</em>},
            {header: <em>'% Change'</em>, dataIndex: <em>'pctChange'</em>},
            <i>// instead of specifying renderer: Ext.util.Format.dateRenderer(<em>'m/d/Y'</em>) use xtype
</i>
            {
                header: <em>'Last Updated'</em>, width: 135, dataIndex: <em>'lastChange'</em>,
                xtype: <em>'datecolumn'</em>, format: <em>'M d, Y'</em>
            }
        ],
    }),
    <a href="output/Ext.grid.GridPanel.html#Ext.grid.GridPanel-viewConfig" ext:member="viewConfig" ext:cls="Ext.grid.GridPanel">viewConfig</a>: {
        <a href="output/Ext.grid.GridView.html#Ext.grid.GridView-forceFit" ext:member="forceFit" ext:cls="Ext.grid.GridView">forceFit</a>: true,

<i>//      Return CSS class to apply to rows depending upon data values
</i>
        <a href="output/Ext.grid.GridView.html#Ext.grid.GridView-getRowClass" ext:member="getRowClass" ext:cls="Ext.grid.GridView">getRowClass</a>: <b>function</b>(record, index) {
            <b>var</b> c = record.<a href="output/Ext.data.Record.html#Ext.data.Record-get" ext:member="get" ext:cls="Ext.data.Record">get</a>(<em>'change'</em>);
            <b>if</b> (c &lt; 0) {
                <b>return</b> <em>'price-fall'</em>;
            } <b>else</b> <b>if</b> (c &gt; 0) {
                <b>return</b> <em>'price-rise'</em>;
            }
        }
    },
    <a href="output/Ext.grid.GridPanel.html#Ext.grid.GridPanel-sm" ext:member="sm" ext:cls="Ext.grid.GridPanel">sm</a>: <b>new</b> Ext.grid.RowSelectionModel({singleSelect:true}),
    width: 600,
    height: 300,
    frame: true,
    title: <em>'Framed <b>with</b> Row Selection and Horizontal Scrolling'</em>,
    iconCls: <em>'icon-grid'</em>
});</code>
</pre>

<p><b><u>Notes:</u></b></p>

<div class="mdetail-params">
<ul>
<li>Although this class inherits many configuration options from
base classes, some of them (such as autoScroll, autoWidth, layout,
items, etc) are not used by this class, and will have no
effect.</li>

<li>A grid <b>requires</b> a width in which to scroll its columns,
and a height in which to scroll its rows. These dimensions can
either be set explicitly through the <tt><a href="output/Ext.BoxComponent.html#Ext.BoxComponent-height" ext:member="height" ext:cls="Ext.BoxComponent">height</a></tt> and
<tt><a href="output/Ext.BoxComponent.html#Ext.BoxComponent-width" ext:member="width" ext:cls="Ext.BoxComponent">width</a></tt>
configuration options or implicitly set by using the grid as a
child item of a <a href="output/Ext.Container.html" ext:cls="Ext.Container">Container</a> which will have a <a href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout" ext:cls="Ext.Container">layout manager</a>
provide the sizing of its child items (for example the Container of
the Grid may specify <tt><a href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout" ext:cls="Ext.Container">layout</a>:'fit'</tt>).</li>

<li>To access the data in a Grid, it is necessary to use the data
model encapsulated by the <a href="output/Ext.grid.GridPanel.html#Ext.grid.GridPanel-store" ext:member="store" ext:cls="Ext.grid.GridPanel">Store</a>. See the
<a href="output/Ext.grid.GridPanel.html#Ext.grid.GridPanel-cellclick" ext:member="cellclick" ext:cls="Ext.grid.GridPanel">cellclick</a>
event for more details.</li>
</ul>
</div>
]]></description><name>gridpanel</name><tag-class></tag-class><body-content>JSP</body-content><attribute>	<description>        <![CDATA[<p><b>Note</b>: this config is only used when this Component is
rendered by a Container which has been configured to use an <b><a href="output/Ext.layout.AnchorLayout.html" ext:cls="Ext.layout.AnchorLayout">AnchorLayout</a></b> based layout
manager, for example:</p>

<div class="mdetail-params">
<ul>
<li><a href="output/Ext.form.FormPanel.html" ext:cls="Ext.form.FormPanel">Ext.form.FormPanel</a></li>

<li>specifying <code>layout: <em>'anchor'</em> <i>// or
<em>'form'</em>, or <em>'absolute'</em></i></code></li>
</ul>
</div>

<br>
<br>
 

<p>See <a href="output/Ext.layout.AnchorLayout.html" ext:cls="Ext.layout.AnchorLayout">Ext.layout.AnchorLayout</a>.<a href="output/Ext.layout.AnchorLayout.html#Ext.layout.AnchorLayout-anchor" ext:member="anchor" ext:cls="Ext.layout.AnchorLayout">anchor</a>
also.</p>
]]>    </description>	<name>anchor</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<code>true</code> to animate the transition whenthe panel is collapsed, <code>false</code> to skip the animation
(defaults to <code>true</code> if the <a href="output/Ext.Fx.html" ext:cls="Ext.Fx">Ext.Fx</a> class is available, otherwise
<code>false</code>).]]>    </description>	<name>animCollapse</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>The <tt><a href="output/Ext.grid.Column.html#Ext.grid.Column-id" ext:member="id" ext:cls="Ext.grid.Column">id</a></tt> of a <a href="output/Ext.grid.Column.html" ext:cls="Ext.grid.Column">column</a> in this grid that should
expand to fill unused space. This value specified here can not be
<tt>0</tt>.</p>

<br>
<p><b>Note</b>: If the Grid's <a href="output/Ext.grid.GridView.html" ext:cls="Ext.grid.GridView">view</a> is configured with <tt><a href="output/Ext.grid.GridView.html#Ext.grid.GridView-forceFit" ext:member="forceFit" ext:cls="Ext.grid.GridView">forceFit</a>=true</tt> the
<tt>autoExpandColumn</tt> is ignored. See <a href="output/Ext.grid.Column.html" ext:cls="Ext.grid.Column">Ext.grid.Column</a>.<tt><a href="output/Ext.grid.Column.html#Ext.grid.Column-width" ext:member="width" ext:cls="Ext.grid.Column">width</a></tt> for
additional details.</p>

<p>See <tt><a href="output/Ext.grid.GridPanel.html#Ext.grid.GridPanel-autoExpandMax" ext:member="autoExpandMax" ext:cls="Ext.grid.GridPanel">autoExpandMax</a></tt> and <tt><a href="output/Ext.grid.GridPanel.html#Ext.grid.GridPanel-autoExpandMin" ext:member="autoExpandMin" ext:cls="Ext.grid.GridPanel">autoExpandMin</a></tt> also.</p>
]]>    </description>	<name>autoExpandColumn</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The maximum width the <tt><a href="output/Ext.grid.GridPanel.html#Ext.grid.GridPanel-autoExpandColumn" ext:member="autoExpandColumn" ext:cls="Ext.grid.GridPanel">autoExpandColumn</a></tt> can have (ifenabled). Defaults to <tt>1000</tt>.]]>    </description>	<name>autoExpandMax</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The minimum width the <tt><a href="output/Ext.grid.GridPanel.html#Ext.grid.GridPanel-autoExpandColumn" ext:member="autoExpandColumn" ext:cls="Ext.grid.GridPanel">autoExpandColumn</a></tt> can have (ifenabled). Defaults to <tt>50</tt>.]]>    </description>	<name>autoExpandMin</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<code>true</code> to use height:'auto',<code>false</code> to use fixed height (defaults to
<code>false</code>). <b>Note</b>: Setting <code>autoHeight:
true</code> means that the browser will manage the panel's height
based on its contents, and that Ext will not manage it at all. If
the panel is within a layout that manages dimensions
(<code>fit</code>, <code>border</code>, etc.) then setting
<code>autoHeight: true</code> can cause issues with scrolling and
will not generally work as expected since the panel will take on
the height of its contents rather than the height required by the
Ext layout.]]>    </description>	<name>autoHeight</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[True if the component should check for hiddenclasses (e.g. 'x-hidden' or 'x-hide-display') and remove them on
render (defaults to false).]]>    </description>	<name>autoShow</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The base CSS class to apply to this panel'selement (defaults to <code><em>'x-panel'</em></code>). 

<p>Another option available by default is to specify
<code><em>'x-plain'</em></code> which strips all styling except for
required attributes for Ext layouts to function (e.g.
overflow:hidden). See <code><a href="output/Ext.Panel.html#Ext.Panel-unstyled" ext:member="unstyled" ext:cls="Ext.Panel">unstyled</a></code>
also.</p>
]]>    </description>	<name>baseCls</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>The bottom toolbar of the panel. This can be a <a href="output/Ext.Toolbar.html" ext:cls="Ext.Toolbar">Ext.Toolbar</a> object, a toolbar config, or
an array of buttons/button configs to be added to the toolbar. Note
that this is not available as a property after render. To access
the bottom toolbar after render, use <a href="output/Ext.Panel.html#Ext.Panel-getBottomToolbar" ext:member="getBottomToolbar" ext:cls="Ext.Panel">getBottomToolbar</a>.</p>

<p><b>Note:</b> Although a Toolbar may contain Field components,
these will <b>not</b> be updated by a load of an ancestor
FormPanel. A Panel's toolbars are not part of the standard
Container-&gt;Component hierarchy, and so are not scanned to
collect form items. However, the values <b>will</b> be submitted
because form submission parameters are collected from the DOM
tree.</p>
]]>    </description>	<name>bbar</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>A <a href="output/Ext.DomHelper.html" ext:cls="Ext.DomHelper">DomHelper</a> element specification object
specifying the element structure of this Panel's <a href="output/Ext.Panel.html#Ext.Panel-bbar" ext:member="bbar" ext:cls="Ext.Panel">bbar</a> Element. See <code><a href="output/Ext.Panel.html#Ext.Panel-bodyCfg" ext:member="bodyCfg" ext:cls="Ext.Panel">bodyCfg</a></code> also.</p>
]]>    </description>	<name>bbarCfg</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>A <a href="output/Ext.DomHelper.html" ext:cls="Ext.DomHelper">DomHelper</a> element specification object
may be specified for any Panel Element.</p>

<p>By default, the Default element in the table below will be used
for the html markup to create a child element with the commensurate
Default class name (<code>baseCls</code> will be replaced by
<code><a href="output/Ext.Panel.html#Ext.Panel-baseCls" ext:member="baseCls" ext:cls="Ext.Panel">baseCls</a></code>):</p>

<pre>Panel      Default  Default             Custom      Additional       Additional
Element    element  class               element     class            style
========   ==========================   =========   ==============   ===========
<a href="output/Ext.Panel.html#Ext.Panel-header" ext:member="header" ext:cls="Ext.Panel">header</a>     div      <a href="output/Ext.Panel.html#Ext.Panel-baseCls" ext:member="baseCls" ext:cls="Ext.Panel">baseCls</a>+'-header'   <a href="output/Ext.Panel.html#Ext.Panel-headerCfg" ext:member="headerCfg" ext:cls="Ext.Panel">headerCfg</a>   headerCssClass   headerStyle
<a href="output/Ext.Panel.html#Ext.Panel-bwrap" ext:member="bwrap" ext:cls="Ext.Panel">bwrap</a>      div      <a href="output/Ext.Panel.html#Ext.Panel-baseCls" ext:member="baseCls" ext:cls="Ext.Panel">baseCls</a>+'-bwrap'     <a href="output/Ext.Panel.html#Ext.Panel-bwrapCfg" ext:member="bwrapCfg" ext:cls="Ext.Panel">bwrapCfg</a>    bwrapCssClass    bwrapStyle
+ tbar     div      <a href="output/Ext.Panel.html#Ext.Panel-baseCls" ext:member="baseCls" ext:cls="Ext.Panel">baseCls</a>+'-tbar'       <a href="output/Ext.Panel.html#Ext.Panel-tbarCfg" ext:member="tbarCfg" ext:cls="Ext.Panel">tbarCfg</a>     tbarCssClass     tbarStyle
+ <a href="output/Ext.Panel.html#Ext.Panel-body" ext:member="body" ext:cls="Ext.Panel">body</a>     div      <a href="output/Ext.Panel.html#Ext.Panel-baseCls" ext:member="baseCls" ext:cls="Ext.Panel">baseCls</a>+'-body'       <a href="output/Ext.Panel.html#Ext.Panel-bodyCfg" ext:member="bodyCfg" ext:cls="Ext.Panel">bodyCfg</a>     <a href="output/Ext.Panel.html#Ext.Panel-bodyCssClass" ext:member="bodyCssClass" ext:cls="Ext.Panel">bodyCssClass</a>     <a href="output/Ext.Panel.html#Ext.Panel-bodyStyle" ext:member="bodyStyle" ext:cls="Ext.Panel">bodyStyle</a>
+ bbar     div      <a href="output/Ext.Panel.html#Ext.Panel-baseCls" ext:member="baseCls" ext:cls="Ext.Panel">baseCls</a>+'-bbar'       <a href="output/Ext.Panel.html#Ext.Panel-bbarCfg" ext:member="bbarCfg" ext:cls="Ext.Panel">bbarCfg</a>     bbarCssClass     bbarStyle
+ <a href="output/Ext.Panel.html#Ext.Panel-footer" ext:member="footer" ext:cls="Ext.Panel">footer</a>   div      <a href="output/Ext.Panel.html#Ext.Panel-baseCls" ext:member="baseCls" ext:cls="Ext.Panel">baseCls</a>+'-footer'   <a href="output/Ext.Panel.html#Ext.Panel-footerCfg" ext:member="footerCfg" ext:cls="Ext.Panel">footerCfg</a>   footerCssClass   footerStyle
</pre>

<p>Configuring a Custom element may be used, for example, to force
the <a href="output/Ext.Panel.html#Ext.Panel-body" ext:member="body" ext:cls="Ext.Panel">body</a> Element to use a
different form of markup than is created by default. An example of
this might be to <a href="output/Ext.Element.html#Ext.Element-createChild" ext:member="createChild" ext:cls="Ext.Element">create a child</a>
Panel containing a custom content, such as a header, or forcing
centering of all Panel content by having the body be a
&lt;center&gt; element:</p>

<pre><code><b>new</b> Ext.Panel({
    title: <em>'Message Title'</em>,
    renderTo: Ext.getBody(),
    width: 200, height: 130,
    <b>bodyCfg</b>: {
        tag: <em>'center'</em>,
        cls: <em>'x-panel-body'</em>,  <i>// Default class not applied <b>if</b> Custom element specified</i>
        html: <em>'Message'</em>
    },
    footerCfg: {
        tag: <em>'h2'</em>,
        cls: <em>'x-panel-footer'</em>        <i>// same as the Default class</i>
        html: <em>'footer html'</em>
    },
    footerCssClass: <em>'custom-footer'</em>, <i>// additional css class, see <a href="output/Ext.element.html#Ext.element-addClass" ext:member="addClass" ext:cls="Ext.element">addClass</a></i>
    footerStyle:    <em>'background-color:red'</em> <i>// see <a href="output/Ext.Panel.html#Ext.Panel-bodyStyle" ext:member="bodyStyle" ext:cls="Ext.Panel">bodyStyle</a></i>
});</code>
</pre>

<p>The example above also explicitly creates a <code><a href="output/Ext.Panel.html#Ext.Panel-footer" ext:member="footer" ext:cls="Ext.Panel">footer</a></code> with custom markup and
styling applied.</p>
]]>    </description>	<name>bodyCfg</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Additional css class selector to be applied tothe <a href="output/Ext.Panel.html#Ext.Panel-body" ext:member="body" ext:cls="Ext.Panel">body</a> element in the
format expected by <a href="output/Ext.Element.html#Ext.Element-addClass" ext:member="addClass" ext:cls="Ext.Element">Ext.Element.addClass</a> (defaults to null).
See <a href="output/Ext.Panel.html#Ext.Panel-bodyCfg" ext:member="bodyCfg" ext:cls="Ext.Panel">bodyCfg</a>.]]>    </description>	<name>bodyCssClass</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[True to display the borders of the panel's bodyelement, false to hide them (defaults to true). By default, the
border is a 2px wide inset border, but this can be further altered
by setting <a href="output/Ext.Panel.html#Ext.Panel-bodyBorder" ext:member="bodyBorder" ext:cls="Ext.Panel">bodyBorder</a> to
false.]]>    </description>	<name>border</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>An array of events that, when fired, should be bubbled to any
parent container. Defaults to <tt>[]</tt>.</p>
]]>    </description>	<name>bubbleEvents</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The alignment of any <a href="output/Ext.Panel.html#Ext.Panel-buttons" ext:member="buttons" ext:cls="Ext.Panel">buttons</a> added to this panel. Valid valuesare <code><em>'right'</em></code>, <code><em>'left'</em></code> and
<code><em>'center'</em></code> (defaults to
<code><em>'right'</em></code>).]]>    </description>	<name>buttonAlign</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<code>buttons</code> will be used as <code><a href="output/Ext.Container.html#Ext.Container-items" ext:member="items" ext:cls="Ext.Container">items</a></code> for thetoolbar in the footer (<code><a href="output/Ext.Panel.html#Ext.Panel-fbar" ext:member="fbar" ext:cls="Ext.Panel">fbar</a></code>). Typically the value of this
configuration property will be an array of <a href="output/Ext.Button.html" ext:cls="Ext.Button">Ext.Button</a>s
or <a href="output/Ext.Button.html" ext:cls="Ext.Button">Ext.Button</a> configuration objects. If an
item is configured with <code>minWidth</code> or the Panel is
configured with <code>minButtonWidth</code>, that width will be
applied to the item.]]>    </description>	<name>buttons</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>A <a href="output/Ext.DomHelper.html" ext:cls="Ext.DomHelper">DomHelper</a> element specification object
specifying the element structure of this Panel's <a href="output/Ext.Panel.html#Ext.Panel-bwrap" ext:member="bwrap" ext:cls="Ext.Panel">bwrap</a> Element. See <code><a href="output/Ext.Panel.html#Ext.Panel-bodyCfg" ext:member="bodyCfg" ext:cls="Ext.Panel">bodyCfg</a></code> also.</p>
]]>    </description>	<name>bwrapCfg</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>The CSS class used to to apply to the special clearing div
rendered directly after each form field wrapper to provide field
clearing (defaults to <tt>'x-form-clear-left'</tt>).</p>

<br>
<p><b>Note</b>: this config is only used when this Component is
rendered by a Container which has been configured to use the <b><a href="output/Ext.layout.FormLayout.html" ext:cls="Ext.layout.FormLayout">FormLayout</a></b> layout manager
(e.g. <a href="output/Ext.form.FormPanel.html" ext:cls="Ext.form.FormPanel">Ext.form.FormPanel</a> or specifying
<tt>layout:'form'</tt>) and either a <tt><a href="output/Ext.Component.html#Ext.Component-fieldLabel" ext:member="fieldLabel" ext:cls="Ext.Component">fieldLabel</a></tt>
is specified or <tt>isFormField=true</tt> is specified.</p>

<br>
<p>See <a href="output/Ext.layout.FormLayout.html" ext:cls="Ext.layout.FormLayout">Ext.layout.FormLayout</a>.<a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-fieldTpl" ext:member="fieldTpl" ext:cls="Ext.layout.FormLayout">fieldTpl</a>
also.</p>
]]>    </description>	<name>clearCls</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Panels themselves do not directly support beingclosed, but some Panel subclasses do (like <a href="output/Ext.Window.html" ext:cls="Ext.Window">Ext.Window</a>)
or a Panel Class within an <a href="output/Ext.TabPanel.html" ext:cls="Ext.TabPanel">Ext.TabPanel</a>. Specify <code>true</code>
to enable closing in such situations. Defaults to
<code>false</code>.]]>    </description>	<name>closable</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[An optional extra CSS class that will be added tothis component's Element (defaults to ''). This can be useful for
adding customized styles to the component or any of its children
using standard CSS rules.]]>    </description>	<name>cls</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Shorthand for <tt><a href="output/Ext.grid.GridPanel.html#Ext.grid.GridPanel-colModel" ext:member="colModel" ext:cls="Ext.grid.GridPanel">colModel</a></tt>.]]>    </description>	<name>cm</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The <a href="output/Ext.grid.ColumnModel.html" ext:cls="Ext.grid.ColumnModel">Ext.grid.ColumnModel</a> to use whenrendering the grid (required).]]>    </description>	<name>colModel</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<code>true</code> to make sure thecollapse/expand toggle button always renders first (to the left of)
any other tools in the panel's title bar, <code>false</code> to
render it last (defaults to <code>true</code>).]]>    </description>	<name>collapseFirst</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<code>true</code> to render the panel collapsed,<code>false</code> to render it expanded (defaults to
<code>false</code>).]]>    </description>	<name>collapsed</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[A CSS class to add to the panel's element afterit has been collapsed (defaults to
<code><em>'x-panel-collapsed'</em></code>).]]>    </description>	<name>collapsedCls</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[True to make the panel collapsible and have theexpand/collapse toggle button automatically rendered into the
header tool button area, false to keep the panel statically sized
with no button (defaults to false).]]>    </description>	<name>collapsible</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<tt>true</tt> to add css for column separationlines. Default is <tt>false</tt>.]]>    </description>	<name>columnLines</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[An array of <a href="output/Ext.grid.Column.html" ext:cls="Ext.grid.Column">columns</a> to auto create a <a href="output/Ext.grid.ColumnModel.html" ext:cls="Ext.grid.ColumnModel">Ext.grid.ColumnModel</a>. TheColumnModel may be explicitly created via the <tt><a href="output/Ext.grid.GridPanel.html#Ext.grid.GridPanel-colModel" ext:member="colModel" ext:cls="Ext.grid.GridPanel">colModel</a></tt> configuration
property.]]>    </description>	<name>columns</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>An optional extra CSS class that will be added to this
component's container. This can be useful for adding customized
styles to the container or any of its children using standard CSS
rules. See <a href="output/Ext.layout.ContainerLayout.html" ext:cls="Ext.layout.ContainerLayout">Ext.layout.ContainerLayout</a>.<a href="output/Ext.layout.ContainerLayout.html#Ext.layout.ContainerLayout-extraCls" ext:member="extraCls" ext:cls="Ext.layout.ContainerLayout">extraCls</a> also.</p>

<p><b>Note</b>: <tt>ctCls</tt> defaults to <tt>''</tt> except for
the following class which assigns a value by default:</p>

<div class="mdetail-params">
<ul>
<li><a href="output/Ext.layout.Box.html" ext:cls="Ext.layout.Box">Box Layout</a> :
<tt>'x-box-layout-ct'</tt></li>
</ul>
</div>

To configure the above Class with an extra CSS class append to the
default. For example, for BoxLayout (Hbox and Vbox):

<pre><code>ctCls: <em>'x-box-layout-ct custom-class'</em></code>
</pre>

<br>
<br>
]]>    </description>	<name>ctCls</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The DD group this GridPanel belongs to. Defaultsto <tt>'GridDD'</tt> if not specified.]]>    </description>	<name>ddGroup</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Configures the text in the drag proxy. Defaultsto: 

<pre><code>ddText : <em>'{0} selected row{1}'</em></code>
</pre>

<tt>{0}</tt> is replaced with the number of selected rows.]]>    </description>	<name>ddText</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>Defaults to <tt>true</tt> to enable deferred row rendering.</p>

<p>This allows the GridPanel to be initially rendered empty, with
the expensive update of the row structure deferred so that layouts
with GridPanels appear more quickly.</p>
]]>    </description>	<name>deferRowRender</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p><tt>true</tt> to disable selections in the grid. Defaults to
<tt>false</tt>.</p>

<p>Ignored if a <a href="output/Ext.grid.GridPanel.html#Ext.grid.GridPanel-selModel" ext:member="selModel" ext:cls="Ext.grid.GridPanel">SelectionModel</a> is specified.</p>
]]>    </description>	<name>disableSelection</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Render this panel disabled (default is<code>false</code>). An important note when using the disabled
config on panels is that IE will often fail to initialize the
disabled mask element correectly if the panel's layout has not yet
completed by the time the Panel is disabled during the render
process. If you experience this issue, you may need to instead use
the <a href="output/Ext.Panel.html#Ext.Panel-afterlayout" ext:member="afterlayout" ext:cls="Ext.Panel">afterlayout</a> event
to initialize the disabled state: 

<pre><code><b>new</b> Ext.Panel({
    ...
    listeners: {
        <em>'afterlayout'</em>: {
            fn: <b>function</b>(p){
                p.disable();
            },
            single: true <i>// important, as many layouts can occur</i>
        }
    }
});</code>
</pre>
]]>    </description>	<name>disabled</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p><code>true</code> to enable dragging of this Panel (defaults to
<code>false</code>).</p>

<p>For custom drag/drop implementations, an <b>Ext.Panel.DD</b>
config could also be passed in this config instead of
<code>true</code>. Ext.Panel.DD is an internal, undocumented class
which moves a proxy Element around in place of the Panel's element,
but provides no other behaviour during dragging or on drop. It is a
subclass of <a href="output/Ext.dd.DragSource.html" ext:cls="Ext.dd.DragSource">Ext.dd.DragSource</a>, so behaviour may
be added by implementing the interface methods of <a href="output/Ext.dd.DragDrop.html" ext:cls="Ext.dd.DragDrop">Ext.dd.DragDrop</a> e.g.:</p>

<pre><code><b>new</b> Ext.Panel({
    title: <em>'Drag me'</em>,
    x: 100,
    y: 100,
    renderTo: Ext.getBody(),
    floating: true,
    frame: true,
    width: 400,
    height: 200,
    draggable: {
<i>//      Config option of Ext.Panel.DD class.</i>
<i>//      It's a floating Panel, so <b>do</b> not show a placeholder proxy <b>in</b> the original position.</i>
        insertProxy: false,

<i>//      Called <b>for</b> each mousemove event <b>while</b> dragging the DD object.</i>
        onDrag : <b>function</b>(e){
<i>//          Record the x,y position of the drag proxy so that we can</i>
<i>//          position the Panel at end of drag.</i>
            <b>var</b> pel = this.proxy.getEl();
            this.x = pel.getLeft(true);
            this.y = pel.getTop(true);

<i>//          Keep the Shadow aligned <b>if</b> there is one.</i>
            <b>var</b> s = this.panel.getEl().shadow;
            <b>if</b> (s) {
                s.realign(this.x, this.y, pel.getWidth(), pel.getHeight());
            }
        },

<i>//      Called on the mouseup event.</i>
        endDrag : <b>function</b>(e){
            this.panel.setPosition(this.x, this.y);
        }
    }
}).show();</code>
</pre>
]]>    </description>	<name>draggable</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Defaults to <tt>true</tt> to enable <a href="output/Ext.grid.Column.html#Ext.grid.Column-hidden" ext:member="hidden" ext:cls="Ext.grid.Column">hiding of columns</a>with the <a href="output/Ext.grid.GridPanel.html#Ext.grid.GridPanel-enableHdMenu" ext:member="enableHdMenu" ext:cls="Ext.grid.GridPanel">header
menu</a>.]]>    </description>	<name>enableColumnHide</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Defaults to <tt>true</tt> to enable drag anddrop reorder of columns. <tt>false</tt> to turn off column
reordering via drag drop.]]>    </description>	<name>enableColumnMove</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<tt>false</tt> to turn off column resizing forthe whole grid. Defaults to <tt>true</tt>.]]>    </description>	<name>enableColumnResize</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>Enables dragging of the selected rows of the GridPanel. Defaults
to <tt>false</tt>.</p>

<p>Setting this to <b><tt>true</tt></b> causes this GridPanel's <a href="output/Ext.grid.GridPanel.html#Ext.grid.GridPanel-getView" ext:member="getView" ext:cls="Ext.grid.GridPanel">GridView</a> to
create an instance of <a href="output/Ext.grid.GridDragZone.html" ext:cls="Ext.grid.GridDragZone">Ext.grid.GridDragZone</a>.
<b>Note</b>: this is available only <b>after</b> the Grid has been
rendered as the GridView's <tt><a href="output/Ext.grid.GridView.html#Ext.grid.GridView-dragZone" ext:member="dragZone" ext:cls="Ext.grid.GridView">dragZone</a></tt>
property.</p>

<p>A cooperating <a href="output/Ext.dd.DropZone.html" ext:cls="Ext.dd.DropZone">DropZone</a> must be created who's
implementations of <a href="output/Ext.dd.DropZone.html#Ext.dd.DropZone-onNodeEnter" ext:member="onNodeEnter" ext:cls="Ext.dd.DropZone">onNodeEnter</a>,
<a href="output/Ext.dd.DropZone.html#Ext.dd.DropZone-onNodeOver" ext:member="onNodeOver" ext:cls="Ext.dd.DropZone">onNodeOver</a>,
<a href="output/Ext.dd.DropZone.html#Ext.dd.DropZone-onNodeOut" ext:member="onNodeOut" ext:cls="Ext.dd.DropZone">onNodeOut</a> and
<a href="output/Ext.dd.DropZone.html#Ext.dd.DropZone-onNodeDrop" ext:member="onNodeDrop" ext:cls="Ext.dd.DropZone">onNodeDrop</a>
are able to process the <a href="output/Ext.grid.GridDragZone.html#Ext.grid.GridDragZone-getDragData" ext:member="getDragData" ext:cls="Ext.grid.GridDragZone">data</a>
which is provided.</p>
]]>    </description>	<name>enableDragDrop</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Defaults to <tt>true</tt> to enable the dropdown button for menu in the headers.]]>    </description>	<name>enableHdMenu</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>A <a href="output/Ext.Toolbar.html" ext:cls="Ext.Toolbar">Toolbar</a> object, a Toolbar config, or an
array of <a href="output/Ext.Button.html" ext:cls="Ext.Button">Button</a>s/<a href="output/Ext.Button.html" ext:cls="Ext.Button">Button</a> configs, describing a <a href="output/Ext.Toolbar.html" ext:cls="Ext.Toolbar">Toolbar</a> to
be rendered into this Panel's footer element.</p>

<p>After render, the <code>fbar</code> property will be an <a href="output/Ext.Toolbar.html" ext:cls="Ext.Toolbar">Toolbar</a>
instance.</p>

<p>If <code><a href="output/Ext.Panel.html#Ext.Panel-buttons" ext:member="buttons" ext:cls="Ext.Panel">buttons</a></code> are
specified, they will supersede the <code>fbar</code> configuration
property.</p>

The Panel's <code><a href="output/Ext.Panel.html#Ext.Panel-buttonAlign" ext:member="buttonAlign" ext:cls="Ext.Panel">buttonAlign</a></code>
configuration affects the layout of these items, for example: 

<pre><code><b>var</b> w = <b>new</b> Ext.Window({
    height: 250,
    width: 500,
    bbar: <b>new</b> Ext.Toolbar({
        items: [{
            text: <em>'bbar Left'</em>
        },<em>'-&gt;'</em>,{
            text: <em>'bbar Right'</em>
        }]
    }),
    <a href="output/Ext.Panel.html#Ext.Panel-buttonAlign" ext:member="buttonAlign" ext:cls="Ext.Panel">buttonAlign</a>: <em>'left'</em>, <i>// anything but <em>'center'</em> or <em>'right'</em> and you can use <em>'-'</em>, and <em>'-&gt;'</em></i>
                                  <i>// to control the alignment of fbar items</i>
    fbar: [{
        text: <em>'fbar Left'</em>
    },<em>'-&gt;'</em>,{
        text: <em>'fbar Right'</em>
    }]
}).show();</code>
</pre>

<p><b>Note:</b> Although a Toolbar may contain Field components,
these will <b>not</b> be updated by a load of an ancestor
FormPanel. A Panel's toolbars are not part of the standard
Container-&gt;Component hierarchy, and so are not scanned to
collect form items. However, the values <b>will</b> be submitted
because form submission parameters are collected from the DOM
tree.</p>
]]>    </description>	<name>fbar</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>The label text to display next to this Component (defaults to
'').</p>

<br>
<p><b>Note</b>: this config is only used when this Component is
rendered by a Container which has been configured to use the <b><a href="output/Ext.layout.FormLayout.html" ext:cls="Ext.layout.FormLayout">FormLayout</a></b> layout manager
(e.g. <a href="output/Ext.form.FormPanel.html" ext:cls="Ext.form.FormPanel">Ext.form.FormPanel</a> or specifying
<tt>layout:'form'</tt>).</p>

<br>
<p>Also see <tt><a href="output/Ext.Component.html#Ext.Component-hideLabel" ext:member="hideLabel" ext:cls="Ext.Component">hideLabel</a></tt>
and <a href="output/Ext.layout.FormLayout.html" ext:cls="Ext.layout.FormLayout">Ext.layout.FormLayout</a>.<a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-fieldTpl" ext:member="fieldTpl" ext:cls="Ext.layout.FormLayout">fieldTpl</a>.</p>

Example use:

<pre><code><b>new</b> Ext.FormPanel({
    height: 100,
    renderTo: Ext.getBody(),
    items: [{
        xtype: <em>'textfield'</em>,
        fieldLabel: <em>'Name'</em>
    }]
});</code>
</pre>
]]>    </description>	<name>fieldLabel</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>This property is used to configure the underlying <a href="output/Ext.Layer.html" ext:cls="Ext.Layer">Ext.Layer</a>.
Acceptable values for this configuration property are:</p>

<div class="mdetail-params">
<ul>
<li><b><code>false</code></b> : <b>Default.</b>
<div class="sub-desc">Display the panel inline where it is
rendered.</div>
</li>

<li><b><code>true</code></b> : 

<div class="sub-desc">Float the panel (absolute position it with
automatic shimming and shadow).

<div style="margin-left: 2em;">
<div class="sub-desc">Setting floating to true will create an
Ext.Layer for this panel and display the panel at negative offsets
so that it is hidden.</div>

<div class="sub-desc">Since the panel will be absolute positioned,
the position must be set explicitly <i>after</i> render (e.g.,
<code>myPanel.setPosition(100,100);</code>).</div>

<div class="sub-desc"><b>Note</b>: when floating a panel you should
always assign a fixed width, otherwise it will be auto width and
will expand to fill to the right edge of the viewport.</div>
</div>
</div>
</li>

<li><b><code><a href="output/Ext.Layer.html" ext:cls="Ext.Layer">object</a></code></b> : 

<div class="sub-desc">The specified object will be used as the
configuration object for the <a href="output/Ext.Layer.html" ext:cls="Ext.Layer">Ext.Layer</a> that will be created.</div>
</li>
</ul>
</div>
]]>    </description>	<name>floating</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<code>true</code> to create the footer elementexplicitly, false to skip creating it. The footer will be created
automatically if <code><a href="output/Ext.Panel.html#Ext.Panel-buttons" ext:member="buttons" ext:cls="Ext.Panel">buttons</a></code> or a <code><a href="output/Ext.Panel.html#Ext.Panel-fbar" ext:member="fbar" ext:cls="Ext.Panel">fbar</a></code> have been configured. See
<code><a href="output/Ext.Panel.html#Ext.Panel-bodyCfg" ext:member="bodyCfg" ext:cls="Ext.Panel">bodyCfg</a></code> for an
example.]]>    </description>	<name>footer</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>A <a href="output/Ext.DomHelper.html" ext:cls="Ext.DomHelper">DomHelper</a> element specification object
specifying the element structure of this Panel's <a href="output/Ext.Panel.html#Ext.Panel-footer" ext:member="footer" ext:cls="Ext.Panel">footer</a> Element. See <code><a href="output/Ext.Panel.html#Ext.Panel-bodyCfg" ext:member="bodyCfg" ext:cls="Ext.Panel">bodyCfg</a></code> also.</p>
]]>    </description>	<name>footerCfg</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[If true the container will force a layoutinitially even if hidden or collapsed. This option is useful for
forcing forms to render in collapsed or hidden containers.
(defaults to false).]]>    </description>	<name>forceLayout</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<code>false</code> by default to render withplain 1px square borders. <code>true</code> to render with 9
elements, complete with custom rounded corners (also see <a href="output/Ext.Element.html#Ext.Element-boxWrap" ext:member="boxWrap" ext:cls="Ext.Element">Ext.Element.boxWrap</a>). 

<p>The template generated for each condition is depicted below:</p>

<pre><code><i>// frame = false</i>
&lt;div id=<em>"developer-specified-id-goes-here"</em> class=<em>"x-panel"</em>&gt;

    &lt;div class=<em>"x-panel-header"</em>&gt;&lt;span class=<em>"x-panel-header-text"</em>&gt;Title: (frame:false)&lt;/span&gt;&lt;/div&gt;

    &lt;div class=<em>"x-panel-bwrap"</em>&gt;
        &lt;div class=<em>"x-panel-body"</em>&gt;&lt;p&gt;html value goes here&lt;/p&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

<i>// frame = true (create 9 elements)</i>
&lt;div id=<em>"developer-specified-id-goes-here"</em> class=<em>"x-panel"</em>&gt;
    &lt;div class=<em>"x-panel-tl"</em>&gt;&lt;div class=<em>"x-panel-tr"</em>&gt;&lt;div class=<em>"x-panel-tc"</em>&gt;
        &lt;div class=<em>"x-panel-header"</em>&gt;&lt;span class=<em>"x-panel-header-text"</em>&gt;Title: (frame:true)&lt;/span&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

    &lt;div class=<em>"x-panel-bwrap"</em>&gt;
        &lt;div class=<em>"x-panel-ml"</em>&gt;&lt;div class=<em>"x-panel-mr"</em>&gt;&lt;div class=<em>"x-panel-mc"</em>&gt;
            &lt;div class=<em>"x-panel-body"</em>&gt;&lt;p&gt;html value goes here&lt;/p&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

        &lt;div class=<em>"x-panel-bl"</em>&gt;&lt;div class=<em>"x-panel-br"</em>&gt;&lt;div class=<em>"x-panel-bc"</em>/&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;</code>
</pre>
]]>    </description>	<name>frame</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<code>true</code> to create the Panel's headerelement explicitly, <code>false</code> to skip creating it. If a
<code><a href="output/Ext.Panel.html#Ext.Panel-title" ext:member="title" ext:cls="Ext.Panel">title</a></code> is set the
header will be created automatically, otherwise it will not. If a
<code><a href="output/Ext.Panel.html#Ext.Panel-title" ext:member="title" ext:cls="Ext.Panel">title</a></code> is set but
<code>header</code> is explicitly set to <code>false</code>, the
header will not be rendered.]]>    </description>	<name>header</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<code>true</code> to display the panel <code><a href="output/Ext.Panel.html#Ext.Panel-title" ext:member="title" ext:cls="Ext.Panel">title</a></code> in the <code><a href="output/Ext.Panel.html#Ext.Panel-header" ext:member="header" ext:cls="Ext.Panel">header</a></code>, <code>false</code> to hideit (defaults to <code>true</code>).]]>    </description>	<name>headerAsText</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>A <a href="output/Ext.DomHelper.html" ext:cls="Ext.DomHelper">DomHelper</a> element specification object
specifying the element structure of this Panel's <a href="output/Ext.Panel.html#Ext.Panel-header" ext:member="header" ext:cls="Ext.Panel">header</a> Element. See <code><a href="output/Ext.Panel.html#Ext.Panel-bodyCfg" ext:member="bodyCfg" ext:cls="Ext.Panel">bodyCfg</a></code> also.</p>
]]>    </description>	<name>headerCfg</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The height of this component in pixels (defaultsto auto). <b>Note</b> to express this dimension as a percentage or
offset see <a href="output/Ext.Component.html#Ext.Component-anchor" ext:member="anchor" ext:cls="Ext.Component">Ext.Component.anchor</a>.]]>    </description>	<name>height</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Render this component hidden (default is false).If <tt>true</tt>, the <a href="output/Ext.Component.html#Ext.Component-hide" ext:member="hide" ext:cls="Ext.Component">hide</a> method will be
called internally.]]>    </description>	<name>hidden</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<code>true</code> to hide the expand/collapsetoggle button when <code><a href="output/Ext.Panel.html#Ext.Panel-collapsible" ext:member="collapsible" ext:cls="Ext.Panel">collapsible</a> ==
true</code>, <code>false</code> to display it (defaults to
<code>false</code>).]]>    </description>	<name>hideCollapseTool</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[True to hide the grid's header. Defaults to<code>false</code>.]]>    </description>	<name>hideHeaders</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p><tt>true</tt> to completely hide the label element (<a href="output/Ext.Component.html#Ext.Component-fieldLabel" ext:member="fieldLabel" ext:cls="Ext.Component">label</a> and <a href="output/Ext.Component.html#Ext.Component-labelSeparator" ext:member="labelSeparator" ext:cls="Ext.Component">separator</a>).
Defaults to <tt>false</tt>. By default, even if you do not specify
a <tt><a href="output/Ext.Component.html#Ext.Component-fieldLabel" ext:member="fieldLabel" ext:cls="Ext.Component">fieldLabel</a></tt>
the space will still be reserved so that the field will line up
with other fields that do have labels. Setting this to
<tt>true</tt> will cause the field to not reserve that space.</p>

<br>
<p><b>Note</b>: see the note for <tt><a href="output/Ext.Component.html#Ext.Component-clearCls" ext:member="clearCls" ext:cls="Ext.Component">clearCls</a></tt>.</p>

<br>
Example use:

<pre><code><b>new</b> Ext.FormPanel({
    height: 100,
    renderTo: Ext.getBody(),
    items: [{
        xtype: <em>'textfield'</em>
        hideLabel: true
    }]
});</code>
</pre>
]]>    </description>	<name>hideLabel</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>How this component should be hidden. Supported values are
<tt>'visibility'</tt> (css visibility), <tt>'offsets'</tt>
(negative offset position) and <tt>'display'</tt> (css
display).</p>

<br>
<p><b>Note</b>: the default of <tt>'display'</tt> is generally
preferred since items are automatically laid out when they are
first shown (no sizing is done while hidden).</p>
]]>    </description>	<name>hideMode</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[True to hide and show the component's containerwhen hide/show is called on the component, false to hide and show
the component itself (defaults to false). For example, this can be
used as a shortcut for a hide button on a window by setting
hide:true on the button when adding it to its parent
container.]]>    </description>	<name>hideParent</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The CSS class selector that specifies abackground image to be used as the header icon (defaults to ''). 

<p>An example of specifying a custom icon class would be something
like:</p>

<pre><code><i>// specify the property <b>in</b> the config <b>for</b> the class:</i>
     ...
     iconCls: <em>'my-icon'</em>

<i>// css class that specifies background image to be used as the icon image:</i>
.my-icon { background-image: url(../images/my-icon.gif) 0 6px no-repeat !important; }</code>
</pre>
]]>    </description>	<name>iconCls</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>The <b>unique</b> id of this component (defaults to an <a href="output/Ext.Component.html#Ext.Component-getId" ext:member="getId" ext:cls="Ext.Component">auto-assigned id</a>).
You should assign an id if you need to be able to access the
component later and you do not have an object reference available
(e.g., using <a href="output/Ext.html" ext:cls="Ext">Ext</a>.<a href="output/Ext.html#Ext-getCmp" ext:member="getCmp" ext:cls="Ext">getCmp</a>).</p>

<p>Note that this id will also be used as the element id for the
containing HTML element that is rendered to the page for this
component. This allows you to write id-based CSS rules to style the
specific instance of this component uniquely, and also to select
sub-elements using this component's id as the parent.</p>

<p><b>Note</b>: to avoid complications imposed by a unique
<tt>id</tt> also see <code><a href="output/Ext.Component.html#Ext.Component-itemId" ext:member="itemId" ext:cls="Ext.Component">itemId</a></code> and
<code><a href="output/Ext.Component.html#Ext.Component-ref" ext:member="ref" ext:cls="Ext.Component">ref</a></code>.</p>

<p><b>Note</b>: to access the container of an item see <code><a href="output/Ext.Component.html#Ext.Component-ownerCt" ext:member="ownerCt" ext:cls="Ext.Component">ownerCt</a></code>.</p>
]]>    </description>	<name>id</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p><b>Note</b>: this config is only used when this Component is
rendered by a Container which has been configured to use the <b><a href="output/Ext.layout.FormLayout.html" ext:cls="Ext.layout.FormLayout">FormLayout</a></b> layout manager
(e.g. <a href="output/Ext.form.FormPanel.html" ext:cls="Ext.form.FormPanel">Ext.form.FormPanel</a> or specifying
<tt>layout:'form'</tt>).</p>

<br>
<p>An additional CSS class to apply to the div wrapping the form
item element of this field. If supplied, <tt>itemCls</tt> at the
<b>field</b> level will override the default <tt>itemCls</tt>
supplied at the <b>container</b> level. The value specified for
<tt>itemCls</tt> will be added to the default class
(<tt>'x-form-item'</tt>).</p>

<p>Since it is applied to the item wrapper (see <a href="output/Ext.layout.FormLayout.html" ext:cls="Ext.layout.FormLayout">Ext.layout.FormLayout</a>.<a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-fieldTpl" ext:member="fieldTpl" ext:cls="Ext.layout.FormLayout">fieldTpl</a>), it allows you to
write standard CSS rules that can apply to the field, the label (if
specified), or any other element within the markup for the
field.</p>

<br>
<p><b>Note</b>: see the note for <tt><a href="output/Ext.Component.html#Ext.Component-fieldLabel" ext:member="fieldLabel" ext:cls="Ext.Component">fieldLabel</a></tt>.</p>

<br>
Example use:

<pre><code><i>// Apply a style to the field's <b>label</b>:</i>
&lt;style&gt;
    .required .x-form-item-<b>label</b> {font-weight:bold;color:red;}
&lt;/style&gt;

<b>new</b> Ext.FormPanel({
    height: 100,
    renderTo: Ext.getBody(),
    items: [{
        xtype: <em>'textfield'</em>,
        fieldLabel: <em>'Name'</em>,
        itemCls: <em>'required'</em> <i>//this <b>label</b> will be styled</i>
    },{
        xtype: <em>'textfield'</em>,
        fieldLabel: <em>'Favorite Color'</em>
    }]
});</code>
</pre>
]]>    </description>	<name>itemCls</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>An <tt>itemId</tt> can be used as an alternative way to get a
reference to a component when no object reference is available.
Instead of using an <code><a href="output/Ext.Component.html#Ext.Component-id" ext:member="id" ext:cls="Ext.Component">id</a></code> with <a href="output/Ext.html" ext:cls="Ext">Ext</a>.<a href="output/Ext.html#Ext-getCmp" ext:member="getCmp" ext:cls="Ext">getCmp</a>, use <code>itemId</code> with <a href="output/Ext.Container.html" ext:cls="Ext.Container">Ext.Container</a>.<a href="output/Ext.Container.html#Ext.Container-getComponent" ext:member="getComponent" ext:cls="Ext.Container">getComponent</a>
which will retrieve <code>itemId</code>'s or <tt><a href="output/Ext.Component.html#Ext.Component-id" ext:member="id" ext:cls="Ext.Component">id</a></tt>'s. Since <code>itemId</code>'s
are an index to the container's internal MixedCollection, the
<code>itemId</code> is scoped locally to the container -- avoiding
potential conflicts with <a href="output/Ext.ComponentMgr.html" ext:cls="Ext.ComponentMgr">Ext.ComponentMgr</a> which requires a
<b>unique</b> <code><a href="output/Ext.Component.html#Ext.Component-id" ext:member="id" ext:cls="Ext.Component">id</a></code>.</p>

<pre><code><b>var</b> c = <b>new</b> Ext.Panel({ <i>//</i>
    <a href="output/Ext.BoxComponent.html#Ext.BoxComponent-height" ext:member="height" ext:cls="Ext.BoxComponent">height</a>: 300,
    <a href="output/Ext.Component.html#Ext.Component-renderTo" ext:member="renderTo" ext:cls="Ext.Component">renderTo</a>: document.body,
    <a href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout" ext:cls="Ext.Container">layout</a>: <em>'auto'</em>,
    <a href="output/Ext.Container.html#Ext.Container-items" ext:member="items" ext:cls="Ext.Container">items</a>: [
        {
            itemId: <em>'p1'</em>,
            <a href="output/Ext.Panel.html#Ext.Panel-title" ext:member="title" ext:cls="Ext.Panel">title</a>: <em>'Panel 1'</em>,
            <a href="output/Ext.BoxComponent.html#Ext.BoxComponent-height" ext:member="height" ext:cls="Ext.BoxComponent">height</a>: 150
        },
        {
            itemId: <em>'p2'</em>,
            <a href="output/Ext.Panel.html#Ext.Panel-title" ext:member="title" ext:cls="Ext.Panel">title</a>: <em>'Panel 2'</em>,
            <a href="output/Ext.BoxComponent.html#Ext.BoxComponent-height" ext:member="height" ext:cls="Ext.BoxComponent">height</a>: 150
        }
    ]
})
p1 = c.<a href="output/Ext.Container.html#Ext.Container-getComponent" ext:member="getComponent" ext:cls="Ext.Container">getComponent</a>(<em>'p1'</em>); <i>// not the same as <a href="output/Ext.html#Ext-getCmp" ext:member="getCmp" ext:cls="Ext">Ext.getCmp()</a></i>
p2 = p1.<a href="output/Ext.Component.html#Ext.Component-ownerCt" ext:member="ownerCt" ext:cls="Ext.Component">ownerCt</a>.<a href="output/Ext.Container.html#Ext.Container-getComponent" ext:member="getComponent" ext:cls="Ext.Container">getComponent</a>(<em>'p2'</em>); <i>// reference via a sibling</i></code>
</pre>

<p>Also see <tt><a href="output/Ext.Component.html#Ext.Component-id" ext:member="id" ext:cls="Ext.Component">id</a></tt> and <code><a href="output/Ext.Component.html#Ext.Component-ref" ext:member="ref" ext:cls="Ext.Component">ref</a></code>.</p>

<p><b>Note</b>: to access the container of an item see <tt><a href="output/Ext.Component.html#Ext.Component-ownerCt" ext:member="ownerCt" ext:cls="Ext.Component">ownerCt</a></tt>.</p>
]]>    </description>	<name>itemId</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[A <a href="output/Ext.KeyMap.html" ext:cls="Ext.KeyMap">Ext.KeyMap</a> config object (in the formatexpected by <a href="output/Ext.KeyMap.html#Ext.KeyMap-addBinding" ext:member="addBinding" ext:cls="Ext.KeyMap">Ext.KeyMap.addBinding</a> used to assign
custom key handling to this panel (defaults to
<code>null</code>).]]>    </description>	<name>keys</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>The separator to display after the text of each <tt><a href="output/Ext.Component.html#Ext.Component-fieldLabel" ext:member="fieldLabel" ext:cls="Ext.Component">fieldLabel</a></tt>. This property may be
configured at various levels. The order of precedence is:</p>

<div class="mdetail-params">
<ul>
<li>field / component level</li>

<li>container level</li>

<li><a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-labelSeparator" ext:member="labelSeparator" ext:cls="Ext.layout.FormLayout">layout
level</a> (defaults to colon <tt>':'</tt>)</li>
</ul>
</div>

To display no separator for this field's label specify empty string
''.<br>
<br>
<br>
<p><b>Note</b>: see the note for <tt><a href="output/Ext.Component.html#Ext.Component-clearCls" ext:member="clearCls" ext:cls="Ext.Component">clearCls</a></tt>.</p>

<br>
<p>Also see <tt><a href="output/Ext.Component.html#Ext.Component-hideLabel" ext:member="hideLabel" ext:cls="Ext.Component">hideLabel</a></tt>
and <a href="output/Ext.layout.FormLayout.html" ext:cls="Ext.layout.FormLayout">Ext.layout.FormLayout</a>.<a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-fieldTpl" ext:member="fieldTpl" ext:cls="Ext.layout.FormLayout">fieldTpl</a>.</p>

Example use:

<pre><code><b>new</b> Ext.FormPanel({
    height: 100,
    renderTo: Ext.getBody(),
    layoutConfig: {
        labelSeparator: <em>'~'</em>   <i>// layout config has lowest priority (defaults to <em>':'</em>)</i>
    },
    <a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-labelSeparator" ext:member="labelSeparator" ext:cls="Ext.layout.FormLayout">labelSeparator</a>: <em>'&gt;&gt;'</em>,     <i>// config at container level</i>
    items: [{
        xtype: <em>'textfield'</em>,
        fieldLabel: <em>'Field 1'</em>,
        labelSeparator: <em>'...'</em> <i>// field/component level config supersedes others</i>
    },{
        xtype: <em>'textfield'</em>,
        fieldLabel: <em>'Field 2'</em> <i>// labelSeparator will be <em>'='</em></i>
    }]
});</code>
</pre>
]]>    </description>	<name>labelSeparator</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>A CSS style specification string to apply directly to this
field's label. Defaults to the container's labelStyle value if set
(e.g., <tt><a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-labelStyle" ext:member="labelStyle" ext:cls="Ext.layout.FormLayout">Ext.layout.FormLayout.labelStyle</a></tt>
, or '').</p>

<br>
<p><b>Note</b>: see the note for <code><a href="output/Ext.Component.html#Ext.Component-clearCls" ext:member="clearCls" ext:cls="Ext.Component">clearCls</a></code>.</p>

<br>
<p>Also see <code><a href="output/Ext.Component.html#Ext.Component-hideLabel" ext:member="hideLabel" ext:cls="Ext.Component">hideLabel</a></code>
and <code><a href="output/Ext.layout.FormLayout.html" ext:cls="Ext.layout.FormLayout">Ext.layout.FormLayout</a>.<a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-fieldTpl" ext:member="fieldTpl" ext:cls="Ext.layout.FormLayout">fieldTpl</a>.</code></p>

Example use:

<pre><code><b>new</b> Ext.FormPanel({
    height: 100,
    renderTo: Ext.getBody(),
    items: [{
        xtype: <em>'textfield'</em>,
        fieldLabel: <em>'Name'</em>,
        labelStyle: <em>'font-weight:bold;'</em>
    }]
});</code>
</pre>
]]>    </description>	<name>labelStyle</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>A config object containing one or more event handlers to be
added to this object during initialization. This should be a valid
listeners config object as specified in the <a href="output/Ext.util.Observable.html#Ext.util.Observable-addListener" ext:member="addListener" ext:cls="Ext.util.Observable">addListener</a> example for attaching
multiple handlers at once.</p>

<br>
<p><b><u>DOM events from ExtJs <a href="output/Ext.Component.html" ext:cls="Ext.Component">Components</a></u></b></p>

<br>
<p>While <i>some</i> ExtJs Component classes export selected DOM
events (e.g. "click", "mouseover" etc), this is usually only done
when extra value can be added. For example the <a href="output/Ext.DataView.html" ext:cls="Ext.DataView">DataView</a>'s <b><code><a href="output/Ext.DataView.html#Ext.DataView-click" ext:member="click" ext:cls="Ext.DataView">click</a></code></b>
event passing the node clicked on. To access DOM events directly
from a Component's HTMLElement, listeners must be added to the
<i><a href="output/Ext.Component.html#Ext.Component-getEl" ext:member="getEl" ext:cls="Ext.Component">Element</a></i> after
the Component has been rendered. A plugin can simplify this
step:</p>

<pre><code><i>// Plugin is configured <b>with</b> a listeners config object.</i>
<i>// The Component is appended to the argument list of all handler functions.</i>
Ext.DomObserver = Ext.extend(Object, {
    constructor: <b>function</b>(config) {
        this.listeners = config.listeners ? config.listeners : config;
    },

    <i>// Component passes itself into plugin's init method</i>
    init: <b>function</b>(c) {
        <b>var</b> p, l = this.listeners;
        <b>for</b> (p <b>in</b> l) {
            <b>if</b> (Ext.isFunction(l[p])) {
                l[p] = this.createHandler(l[p], c);
            } <b>else</b> {
                l[p].fn = this.createHandler(l[p].fn, c);
            }
        }

        <i>// Add the listeners to the Element immediately following the render call</i>
        c.render = c.render.<a href="output/Function.html#Function-createSequence" ext:member="createSequence" ext:cls="Function">createSequence</a>(<b>function</b>() {
            <b>var</b> e = c.getEl();
            <b>if</b> (e) {
                e.on(l);
            }
        });
    },

    createHandler: <b>function</b>(fn, c) {
        <b>return</b> <b>function</b>(e) {
            fn.call(this, e, c);
        };
    }
});

<b>var</b> combo = <b>new</b> Ext.form.ComboBox({

    <i>// Collapse combo when its element is clicked on</i>
    plugins: [ <b>new</b> Ext.DomObserver({
        click: <b>function</b>(evt, comp) {
            comp.collapse();
        }
    })],
    store: myStore,
    typeAhead: true,
    mode: <em>'local'</em>,
    triggerAction: <em>'all'</em>
});</code>
</pre>

<br>
<br>
]]>    </description>	<name>listeners</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[An <a href="output/Ext.LoadMask.html" ext:cls="Ext.LoadMask">Ext.LoadMask</a> config or true to mask thegrid while loading. Defaults to <code>false</code>.]]>    </description>	<name>loadMask</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p><b>Note</b>: this config is only used when this BoxComponent is
rendered by a Container which has been configured to use the <b><a href="output/Ext.layout.BorderLayout.html" ext:cls="Ext.layout.BorderLayout">BorderLayout</a></b> or one of
the two <b><a href="output/Ext.layout.BoxLayout.html" ext:cls="Ext.layout.BoxLayout">BoxLayout</a> subclasses.</b></p>

<p>An object containing margins to apply to this BoxComponent in
the format:</p>

<pre><code>{
    top: (top margin),
    right: (right margin),
    bottom: (bottom margin),
    left: (left margin)
}</code>
</pre>

<p>May also be a string containing space-separated, numeric margin
values. The order of the sides associated with each value matches
the way CSS processes margin values:</p>

<div class="mdetail-params">
<ul>
<li>If there is only one value, it applies to all sides.</li>

<li>If there are two values, the top and bottom borders are set to
the first value and the right and left are set to the second.</li>

<li>If there are three values, the top is set to the first value,
the left and right are set to the second, and the bottom is set to
the third.</li>

<li>If there are four values, they apply to the top, right, bottom,
and left, respectively.</li>
</ul>
</div>

<br>
<br>
 

<p>Defaults to:</p>

<pre><code>{top:0, right:0, bottom:0, left:0}</code>
</pre>
]]>    </description>	<name>margins</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<code>true</code> to mask the panel when it is <a href="output/Ext.Panel.html#Ext.Panel-disabled" ext:member="disabled" ext:cls="Ext.Panel">disabled</a>,<code>false</code> to not mask it (defaults to <code>true</code>).
Either way, the panel will always tell its contained elements to
disable themselves when it is disabled, but masking the panel can
provide an additional visual cue that the panel is disabled.]]>    </description>	<name>maskDisabled</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Sets the maximum height of the grid - ignored if<tt>autoHeight</tt> is not on.]]>    </description>	<name>maxHeight</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Minimum width in pixels of all <a href="output/Ext.Panel.html#Ext.Panel-buttons" ext:member="buttons" ext:cls="Ext.Panel">buttons</a> in this panel (defaults to<code>75</code>)]]>    </description>	<name>minButtonWidth</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The minimum width a column can be resized to.Defaults to <tt>25</tt>.]]>    </description>	<name>minColumnWidth</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[An optional extra CSS class that will be added tothis component's Element when the mouse moves over the Element, and
removed when the mouse moves out. (defaults to ''). This can be
useful for adding customized 'active' or 'hover' styles to the
component or any of its children using standard CSS rules.]]>    </description>	<name>overCls</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The page level x coordinate for this componentif contained within a positioning container.]]>    </description>	<name>pageX</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The page level y coordinate for this componentif contained within a positioning container.]]>    </description>	<name>pageY</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[An object or array of objects that will providecustom functionality for this component. The only requirement for a
valid plugin is that it contain an init method that accepts a
reference of type Ext.Component. When a component is created, if
any plugins are available, the component will call the init method
on each plugin, passing a reference to itself. Each plugin can then
call methods or respond to events on the component as needed to
provide its functionality.]]>    </description>	<name>plugins</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The registered <tt>ptype</tt> to create. Thisconfig option is not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a Plugin is being specified not as
a fully instantiated Component, but as a <i>Component config
object</i>. The <tt>ptype</tt> will be looked up at render time up
to determine what type of Plugin to create.<br>
<br>
If you create your own Plugins, you may register them using <a href="output/Ext.ComponentMgr.html#Ext.ComponentMgr-registerPlugin" ext:member="registerPlugin" ext:cls="Ext.ComponentMgr">Ext.ComponentMgr.registerPlugin</a> in
order to be able to take advantage of lazy instantiation and
rendering.]]>    </description>	<name>ptype</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>A path specification, relative to the Component's <a href="output/Ext.Component.html#Ext.Component-ownerCt" ext:member="ownerCt" ext:cls="Ext.Component">ownerCt</a> specifying
into which ancestor Container to place a named reference to this
Component.</p>

<p>The ancestor axis can be traversed by using '/' characters in
the path. For example, to put a reference to a Toolbar Button into
<i>the Panel which owns the Toolbar</i>:</p>

<pre><code><b>var</b> myGrid = <b>new</b> Ext.grid.EditorGridPanel({
    title: <em>'My EditorGridPanel'</em>,
    store: myStore,
    colModel: myColModel,
    tbar: [{
        text: <em>'Save'</em>,
        handler: saveChanges,
        disabled: true,
        ref: <em>'../saveButton'</em>
    }],
    listeners: {
        afteredit: <b>function</b>() {
<i>//          The button reference is <b>in</b> the GridPanel</i>
            myGrid.saveButton.enable();
        }
    }
});</code>
</pre>

<p>In the code above, if the ref had been
<code><em>'saveButton'</em></code> the reference would have been
placed into the Toolbar. Each '/' in the ref moves up one level
from the Component's <a href="output/Ext.Component.html#Ext.Component-ownerCt" ext:member="ownerCt" ext:cls="Ext.Component">ownerCt</a>.</p>
]]>    </description>	<name>ref</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p><b>Note</b>: this config is only used when this BoxComponent is
rendered by a Container which has been configured to use the <b><a href="output/Ext.layout.BorderLayout.html" ext:cls="Ext.layout.BorderLayout">BorderLayout</a></b> layout
manager (e.g. specifying <tt>layout:'border'</tt>).</p>

<br>
<p>See <a href="output/Ext.layout.BorderLayout.html" ext:cls="Ext.layout.BorderLayout">Ext.layout.BorderLayout</a>
also.</p>
]]>    </description>	<name>region</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>Specify the id of the element, a DOM element or an existing
Element that this component will be rendered into.</p>

<div>
<ul>
<li><b>Notes</b> : 

<div style="margin-left: 2em;">
<div class="sub-desc">Do <u>not</u> use this option if the
Component is to be a child item of a <a href="output/Ext.Container.html" ext:cls="Ext.Container">Container</a>. It is the responsibility of
the <a href="output/Ext.Container.html" ext:cls="Ext.Container">Container</a>'s <a href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout" ext:cls="Ext.Container">layout manager</a> to
render and manage its child items.</div>

<div class="sub-desc">When using this config, a call to render() is
not required.</div>
</div>
</li>
</ul>
</div>

<p>See <tt><a href="output/Ext.Component.html#Ext.Component-render" ext:member="render" ext:cls="Ext.Component">render</a></tt>
also.</p>
]]>    </description>	<name>renderTo</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The event to listen to for resizing in layouts.Defaults to <tt>'bodyresize'</tt>.]]>    </description>	<name>resizeEvent</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Any subclass of <a href="output/Ext.grid.AbstractSelectionModel.html" ext:cls="Ext.grid.AbstractSelectionModel">Ext.grid.AbstractSelectionModel</a>that will provide the selection model for the grid (defaults to <a href="output/Ext.grid.RowSelectionModel.html" ext:cls="Ext.grid.RowSelectionModel">Ext.grid.RowSelectionModel</a>
if not specified).]]>    </description>	<name>selModel</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<code>true</code> (or a valid Ext.Shadow <a href="output/Ext.Shadow.html#Ext.Shadow-mode" ext:member="mode" ext:cls="Ext.Shadow">Ext.Shadow.mode</a> value) to display a shadowbehind the panel, <code>false</code> to display no shadow (defaults
to <code><em>'sides'</em></code>). Note that this option only
applies when <code><a href="output/Ext.Panel.html#Ext.Panel-floating" ext:member="floating" ext:cls="Ext.Panel">floating</a> =
true</code>.]]>    </description>	<name>shadow</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The number of pixels to offset the shadow ifdisplayed (defaults to <code>4</code>). Note that this option only
applies when <code><a href="output/Ext.Panel.html#Ext.Panel-floating" ext:member="floating" ext:cls="Ext.Panel">floating</a> =
true</code>.]]>    </description>	<name>shadowOffset</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<code>false</code> to disable the iframe shim inbrowsers which need one (defaults to <code>true</code>). Note that
this option only applies when <code><a href="output/Ext.Panel.html#Ext.Panel-floating" ext:member="floating" ext:cls="Ext.Panel">floating</a> =
true</code>.]]>    </description>	<name>shim</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Shorthand for <tt><a href="output/Ext.grid.GridPanel.html#Ext.grid.GridPanel-selModel" ext:member="selModel" ext:cls="Ext.grid.GridPanel">selModel</a></tt>.]]>    </description>	<name>sm</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[An array of events that, when fired, shouldtrigger this component to save its state. Defaults to:

<pre><code>stateEvents: [<em>'columnmove'</em>, <em>'columnresize'</em>, <em>'sortchange'</em>]</code>
</pre>

<p>These can be any types of events supported by this component,
including browser or custom events (e.g., <tt>['click',
'customerchange']</tt>).</p>

<p>See <a href="output/Ext.Component.html#Ext.Component-stateful" ext:member="stateful" ext:cls="Ext.Component">Ext.Component.stateful</a> for an
explanation of saving and restoring Component state.</p>
]]>    </description>	<name>stateEvents</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The unique id for this component to use for statemanagement purposes (defaults to the component id if one was set,
otherwise null if the component is using a generated id). 

<p>See <code><a href="output/Ext.Component.html#Ext.Component-stateful" ext:member="stateful" ext:cls="Ext.Component">stateful</a></code>
for an explanation of saving and restoring Component state.</p>
]]>    </description>	<name>stateId</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>A flag which causes the Component to attempt to restore the
state of internal properties from a saved state on startup. The
component must have either a <code><a href="output/Ext.Component.html#Ext.Component-stateId" ext:member="stateId" ext:cls="Ext.Component">stateId</a></code> or
<code><a href="output/Ext.Component.html#Ext.Component-id" ext:member="id" ext:cls="Ext.Component">id</a></code> assigned for
state to be managed. Auto-generated ids are not guaranteed to be
stable across page loads and cannot be relied upon to save and
restore the same state for a component.</p>

<p>For state saving to work, the state manager's provider must have
been set to an implementation of <a href="output/Ext.state.Provider.html" ext:cls="Ext.state.Provider">Ext.state.Provider</a> which overrides
the <a href="output/Ext.state.Provider.html#Ext.state.Provider-set" ext:member="set" ext:cls="Ext.state.Provider">set</a> and <a href="output/Ext.state.Provider.html#Ext.state.Provider-get" ext:member="get" ext:cls="Ext.state.Provider">get</a> methods to
save and recall name/value pairs. A built-in implementation, <a href="output/Ext.state.CookieProvider.html" ext:cls="Ext.state.CookieProvider">Ext.state.CookieProvider</a> is
available.</p>

<p>To set the state provider for the current page:</p>

<pre><code>Ext.state.Manager.setProvider(<b>new</b> Ext.state.CookieProvider({
    expires: <b>new</b> Date(<b>new</b> Date().getTime()+(1000*60*60*24*7)), <i>//7 days from now</i>
}));</code>
</pre>

<p>A stateful Component attempts to save state when one of the
events listed in the <code><a href="output/Ext.Component.html#Ext.Component-stateEvents" ext:member="stateEvents" ext:cls="Ext.Component">stateEvents</a></code> configuration
fires.</p>

<p>To save state, a stateful Component first serializes its state
by calling <b><code>getState</code></b>. By default, this function
does nothing. The developer must provide an implementation which
returns an object hash which represents the Component's restorable
state.</p>

<p>The value yielded by getState is passed to <a href="output/Ext.state.Manager.html#Ext.state.Manager-set" ext:member="set" ext:cls="Ext.state.Manager">Ext.state.Manager.set</a> which uses
the configured <a href="output/Ext.state.Provider.html" ext:cls="Ext.state.Provider">Ext.state.Provider</a> to save the
object keyed by the Component's <code><a href="output/stateId.html" ext:cls="stateId">stateId</a></code>, or, if that is not specified,
its <code><a href="output/Ext.Component.html#Ext.Component-id" ext:member="id" ext:cls="Ext.Component">id</a></code>.</p>

<p>During construction, a stateful Component attempts to
<i>restore</i> its state by calling <a href="output/Ext.state.Manager.html#Ext.state.Manager-get" ext:member="get" ext:cls="Ext.state.Manager">Ext.state.Manager.get</a> passing the
<code><a href="output/Ext.Component.html#Ext.Component-stateId" ext:member="stateId" ext:cls="Ext.Component">stateId</a></code>,
or, if that is not specified, the <code><a href="output/Ext.Component.html#Ext.Component-id" ext:member="id" ext:cls="Ext.Component">id</a></code>.</p>

<p>The resulting object is passed to
<b><code>applyState</code></b>. The default implementation of
<code>applyState</code> simply copies properties into the object,
but a developer may override this to support more behaviour.</p>

<p>You can perform extra processing on state save and restore by
attaching handlers to the <a href="output/Ext.Component.html#Ext.Component-beforestaterestore" ext:member="beforestaterestore" ext:cls="Ext.Component">beforestaterestore</a>, <a href="output/Ext.Component.html#Ext.Component-staterestore" ext:member="staterestore" ext:cls="Ext.Component">staterestore</a>,
<a href="output/Ext.Component.html#Ext.Component-beforestatesave" ext:member="beforestatesave" ext:cls="Ext.Component">beforestatesave</a> and <a href="output/Ext.Component.html#Ext.Component-statesave" ext:member="statesave" ext:cls="Ext.Component">statesave</a>
events.</p>
]]>    </description>	<name>stateful</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The <a href="output/Ext.data.Store.html" ext:cls="Ext.data.Store">Ext.data.Store</a> the grid should use asits data source (required).]]>    </description>	<name>store</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<tt>true</tt> to stripe the rows. Default is<tt>false</tt>. 

<p>This causes the CSS class <tt><b>x-grid3-row-alt</b></tt> to be
added to alternate rows of the grid. A default CSS rule is provided
which sets a background colour, but you can override this with a
rule which either overrides the <b>background-color</b> style using
the '!important' modifier, or which uses a CSS selector of higher
specificity.</p>
]]>    </description>	<name>stripeRows</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[A custom style specification to be applied tothis component's Element. Should be a valid argument to <a href="output/Ext.Element.html#Ext.Element-applyStyles" ext:member="applyStyles" ext:cls="Ext.Element">Ext.Element.applyStyles</a>. 

<pre><code><b>new</b> Ext.Panel({
    title: <em>'Some Title'</em>,
    renderTo: Ext.getBody(),
    width: 400, height: 300,
    layout: <em>'form'</em>,
    items: [{
        xtype: <em>'textarea'</em>,
        style: {
            width: <em>'95%'</em>,
            marginBottom: <em>'10px'</em>
        }
    },
        <b>new</b> Ext.Button({
            text: <em>'Send'</em>,
            minWidth: <em>'100'</em>,
            style: {
                marginBottom: <em>'10px'</em>
            }
        })
    ]
});</code>
</pre>
]]>    </description>	<name>style</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p><b>Note</b>: this config is only used when this BoxComponent is
a child item of a TabPanel.</p>

A string to be used as innerHTML (html tags are accepted) to show
in a tooltip when mousing over the associated tab selector element.
<a href="output/Ext.QuickTips.html" ext:cls="Ext.QuickTips">Ext.QuickTips</a>.init() must be called in
order for the tips to render.]]>    </description>	<name>tabTip</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>The top toolbar of the panel. This can be a <a href="output/Ext.Toolbar.html" ext:cls="Ext.Toolbar">Ext.Toolbar</a> object, a toolbar config, or
an array of buttons/button configs to be added to the toolbar. Note
that this is not available as a property after render. To access
the top toolbar after render, use <a href="output/Ext.Panel.html#Ext.Panel-getTopToolbar" ext:member="getTopToolbar" ext:cls="Ext.Panel">getTopToolbar</a>.</p>

<p><b>Note:</b> Although a Toolbar may contain Field components,
these will <b>not</b> be updated by a load of an ancestor
FormPanel. A Panel's toolbars are not part of the standard
Container-&gt;Component hierarchy, and so are not scanned to
collect form items. However, the values <b>will</b> be submitted
because form submission parameters are collected from the DOM
tree.</p>
]]>    </description>	<name>tbar</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>A <a href="output/Ext.DomHelper.html" ext:cls="Ext.DomHelper">DomHelper</a> element specification object
specifying the element structure of this Panel's <a href="output/Ext.Panel.html#Ext.Panel-tbar" ext:member="tbar" ext:cls="Ext.Panel">tbar</a> Element. See <code><a href="output/Ext.Panel.html#Ext.Panel-bodyCfg" ext:member="bodyCfg" ext:cls="Ext.Panel">bodyCfg</a></code> also.</p>
]]>    </description>	<name>tbarCfg</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The title text to be used as innerHTML (html tagsare accepted) to display in the panel <code><a href="output/Ext.Panel.html#Ext.Panel-header" ext:member="header" ext:cls="Ext.Panel">header</a></code> (defaults to ''). When a
<code>title</code> is specified the <code><a href="output/Ext.Panel.html#Ext.Panel-header" ext:member="header" ext:cls="Ext.Panel">header</a></code> element will automatically be
created and displayed unless <a href="output/Ext.Panel.html#Ext.Panel-header" ext:member="header" ext:cls="Ext.Panel">header</a> is explicitly set to
<code>false</code>. If you do not want to specify a
<code>title</code> at config time, but you may want one later, you
must either specify a non-empty <code>title</code> (a blank space '
' will do) or <code>header:true</code> so that the container
element will get created.]]>    </description>	<name>title</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<code>true</code> to allow expanding andcollapsing the panel (when <code><a href="output/Ext.Panel.html#Ext.Panel-collapsible" ext:member="collapsible" ext:cls="Ext.Panel">collapsible</a> =
true</code>) by clicking anywhere in the header bar,
<code>false</code>) to allow it only by clicking to tool button
(defaults to <code>false</code>)). If this panel is a child item of
a border layout also see the <a href="output/Ext.layout.BorderLayout.Region.html" ext:cls="Ext.layout.BorderLayout.Region">BorderLayout.Region</a>
<code><a href="output/Ext.layout.BorderLayout.Region.html#Ext.layout.BorderLayout.Region-floatable" ext:member="floatable" ext:cls="Ext.layout.BorderLayout.Region">floatable</a></code>
config option.]]>    </description>	<name>titleCollapse</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>A Template used to create <a href="output/Ext.Panel.html#Ext.Panel-tools" ext:member="tools" ext:cls="Ext.Panel">tools</a> in the <a href="output/Ext.Panel.html#Ext.Panel-header" ext:member="header" ext:cls="Ext.Panel">header</a> Element. Defaults to:</p>

<pre><code><b>new</b> Ext.Template(<em>'&lt;div class=</em>"x-tool x-tool-{id}"</code>&gt;&amp;#160;&lt;/div&gt;')
</pre>

<p>This may may be overridden to provide a custom DOM structure for
tools based upon a more complex XTemplate. The template's data is a
single tool configuration object (Not the entire Array) as
specified in <a href="output/Ext.Panel.html#Ext.Panel-tools" ext:member="tools" ext:cls="Ext.Panel">tools</a>. In the following
example an &lt;a&gt; tag is used to provide a visual indication
when hovering over the tool:</p>

<pre><code><b>var</b> win = <b>new</b> Ext.Window({
    tools: [{
        id: <em>'download'</em>,
        href: <em>'/MyPdfDoc.pdf'</em>
    }],
    toolTemplate: <b>new</b> Ext.XTemplate(
        <em>'&lt;tpl <b>if</b>=</em>"id==\'</code>download\<em>'"</em>&gt;',
            <em>'&lt;a class=</em>"x-tool x-tool-pdf" href=<em>"{href}"</em>&gt;&lt;/a&gt;',
        <em>'&lt;/tpl&gt;'</em>,
        <em>'&lt;tpl <b>if</b>=</em>"id!=\'download\<em>'"</em>&gt;',
            <em>'&lt;div class=</em>"x-tool x-tool-{id}"&gt;&amp;#160;&lt;/div&gt;',
        <em>'&lt;/tpl&gt;'</em>
    ),
    width:500,
    height:300,
    closeAction:<em>'hide'</em>
});
</pre>

<p>Note that the CSS class 'x-tool-pdf' should have an associated
style rule which provides an appropriate background image,
something like:</p>

<pre><code>a.x-tool-pdf {background-image: url(../shared/extjs/images/pdf.gif)!important;}</code>
</pre>
]]>    </description>	<name>toolTemplate</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[An array of tool button configs to be added tothe header tool area. When rendered, each tool is stored as an <a href="output/Ext.Element.html" ext:cls="Ext.Element">Element</a>
referenced by a public property called
<code>tools.<i>&lt;tool-type&gt;</i></code> 

<p>Each tool config may contain the following properties:</p>

<div class="mdetail-params">
<ul>
<li><b>id</b> : String

<div class="sub-desc"><b>Required.</b> The type of tool to create.
By default, this assigns a CSS class of the form
<code>x-tool-<i>&lt;tool-type&gt;</i></code> to the resulting tool
Element. Ext provides CSS rules, and an icon sprite containing
images for the tool types listed below. The developer may implement
custom tools by supplying alternate CSS rules and background
images: 

<div style="margin-left: 2em;">
<div><code>toggle</code> (Created by default when <a href="output/Ext.Panel.html#Ext.Panel-collapsible" ext:member="collapsible" ext:cls="Ext.Panel">collapsible</a> is
<code>true</code>)</div>

<div><code>close</code></div>

<div><code>minimize</code></div>

<div><code>maximize</code></div>

<div><code>restore</code></div>

<div><code>gear</code></div>

<div><code>pin</code></div>

<div><code>unpin</code></div>

<div><code>right</code></div>

<div><code>left</code></div>

<div><code>up</code></div>

<div><code>down</code></div>

<div><code>refresh</code></div>

<div><code>minus</code></div>

<div><code>plus</code></div>

<div><code>help</code></div>

<div><code>search</code></div>

<div><code>save</code></div>

<div><code>print</code></div>
</div>
</div>
</li>

<li><b>handler</b> : Function

<div class="sub-desc"><b>Required.</b> The function to call when
clicked. Arguments passed are:

<ul>
<li><b>event</b> : Ext.EventObject

<div class="sub-desc">The click event.</div>
</li>

<li><b>toolEl</b> : Ext.Element

<div class="sub-desc">The tool Element.</div>
</li>

<li><b>panel</b> : Ext.Panel

<div class="sub-desc">The host Panel</div>
</li>

<li><b>tc</b> : Ext.Panel

<div class="sub-desc">The tool configuration object</div>
</li>
</ul>
</div>
</li>

<li><b>stopEvent</b> : Boolean

<div class="sub-desc">Defaults to true. Specify as false to allow
click event to propagate.</div>
</li>

<li><b>scope</b> : Object

<div class="sub-desc">The scope in which to call the handler.</div>
</li>

<li><b>qtip</b> : String/Object

<div class="sub-desc">A tip string, or a config argument to <a href="output/Ext.QuickTip.html#Ext.QuickTip-register" ext:member="register" ext:cls="Ext.QuickTip">Ext.QuickTip.register</a></div>
</li>

<li><b>hidden</b> : Boolean

<div class="sub-desc">True to initially render hidden.</div>
</li>

<li><b>on</b> : Object

<div class="sub-desc">A listener config object specifiying event
listeners in the format of an argument to <a href="output/Ext.Panel.html#Ext.Panel-addListener" ext:member="addListener" ext:cls="Ext.Panel">addListener</a></div>
</li>
</ul>
</div>

<p>Note that, apart from the toggle tool which is provided when a
panel is collapsible, these tools only provide the visual button.
Any required functionality must be provided by adding handlers that
implement the necessary behavior.</p>

<p>Example usage:</p>

<pre><code>tools:[{
    id:<em>'refresh'</em>,
    qtip: <em>'Refresh form Data'</em>,
    <i>// hidden:true,</i>
    handler: <b>function</b>(event, toolEl, panel){
        <i>// refresh logic</i>
    }
},
{
    id:<em>'help'</em>,
    qtip: <em>'Get Help'</em>,
    handler: <b>function</b>(event, toolEl, panel){
        <i>// whatever</i>
    }
}]</code>
</pre>

<p>For the custom id of <code><em>'help'</em></code> define two
relevant css classes with a link to a 15x15 image:</p>

<pre><code>.x-tool-help {background-image: url(images/help.png);}
.x-tool-help-over {background-image: url(images/help_over.png);}
<i>// <b>if</b> using an image sprite:</i>
.x-tool-help {background-image: url(images/help.png) no-repeat 0 0;}
.x-tool-help-over {background-position:-15px 0;}</code>
</pre>
]]>    </description>	<name>tools</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[True to highlight rows when the mouse is over.Default is <tt>true</tt> for GridPanel, but <tt>false</tt> for
EditorGridPanel.]]>    </description>	<name>trackMouseOver</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Overrides the <code><a href="output/Ext.Panel.html#Ext.Panel-baseCls" ext:member="baseCls" ext:cls="Ext.Panel">baseCls</a></code> setting to <code><a href="output/Ext.Panel.html#Ext.Panel-baseCls" ext:member="baseCls" ext:cls="Ext.Panel">baseCls</a> = <em>'x-plain'</em></code> whichrenders the panel unstyled except for required attributes for Ext
layouts to function (e.g. overflow:hidden).]]>    </description>	<name>unstyled</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The <a href="output/Ext.grid.GridView.html" ext:cls="Ext.grid.GridView">Ext.grid.GridView</a> used by the grid.This can be set before a call to <a href="output/Ext.Component.html#Ext.Component-render" ext:member="render" ext:cls="Ext.Component">render()</a>.]]>    </description>	<name>view</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[A config object that will be applied to thegrid's UI view. Any of the config options available for <a href="output/Ext.grid.GridView.html" ext:cls="Ext.grid.GridView">Ext.grid.GridView</a> can be specified
here. This option is ignored if <tt><a href="output/Ext.grid.GridPanel.html#Ext.grid.GridPanel-view" ext:member="view" ext:cls="Ext.grid.GridPanel">view</a></tt> is
specified.]]>    </description>	<name>viewConfig</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The width of this component in pixels (defaultsto auto). <b>Note</b> to express this dimension as a percentage or
offset see <a href="output/Ext.Component.html#Ext.Component-anchor" ext:member="anchor" ext:cls="Ext.Component">Ext.Component.anchor</a>.]]>    </description>	<name>width</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The local x (left) coordinate for this componentif contained within a positioning container.]]>    </description>	<name>x</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The registered <tt>xtype</tt> to create. Thisconfig option is not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a Container is
being specified not as a fully instantiated Component, but as a
<i>Component config object</i>. The <tt>xtype</tt> will be looked
up at render time up to determine what type of child Component to
create.<br>
<br>
The predefined xtypes are listed <a href="output/Ext.Component.html" ext:cls="Ext.Component">here</a>.<br>
<br>
If you subclass Components to create your own Components, you may
register them using <a href="output/Ext.ComponentMgr.html#Ext.ComponentMgr-registerType" ext:member="registerType" ext:cls="Ext.ComponentMgr">Ext.ComponentMgr.registerType</a> in
order to be able to take advantage of lazy instantiation and
rendering.]]>    </description>	<name>xtype</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The local y (top) coordinate for this componentif contained within a positioning container.]]>    </description>	<name>y</name>	<required>false</required></attribute></tag>
<tag><description>    <![CDATA[
<p>This is the layout style of choice for creating structural
layouts in a multi-row format where the height of each row can be
specified as a percentage or fixed height. Row widths can also be
fixed, percentage or auto. This class is intended to be extended or
created via the layout:'ux.row' <a href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout" ext:cls="Ext.Container">Ext.Container.layout</a> config, and should
generally not need to be created directly via the new keyword.</p>

<p>RowLayout does not have any direct config options (other than
inherited ones), but it does support a specific config property of
<b><tt>rowHeight</tt></b> that can be included in the config of any
panel added to it. The layout will use the rowHeight (if present)
or height of each panel during layout to determine how to size each
panel. If height or rowHeight is not specified for a given panel,
its height will default to the panel's height (or auto).</p>

<p>The height property is always evaluated as pixels, and must be a
number greater than or equal to 1. The rowHeight property is always
evaluated as a percentage, and must be a decimal value greater than
0 and less than 1 (e.g., .25).</p>

<p>The basic rules for specifying row heights are pretty simple.
The logic makes two passes through the set of contained panels.
During the first layout pass, all panels that either have a fixed
height or none specified (auto) are skipped, but their heights are
subtracted from the overall container height. During the second
pass, all panels with rowHeights are assigned pixel heights in
proportion to their percentages based on the total <b>remaining</b>
container height. In other words, percentage height panels are
designed to fill the space left over by all the fixed-height and/or
auto-height panels. Because of this, while you can specify any
number of rows with different percentages, the rowHeights must
always add up to 1 (or 100%) when added together, otherwise your
layout may not render as expected. Example usage:</p>

<pre><code><i>// All rows are percentages -- they must add up to 1</i>
<b>var</b> p = <b>new</b> Ext.Panel({
    title: <em>'Row Layout - Percentage Only'</em>,
    layout:<em>'ux.row'</em>,
    items: [{
        title: <em>'Row 1'</em>,
        rowHeight: .25
    },{
        title: <em>'Row 2'</em>,
        rowHeight: .6
    },{
        title: <em>'Row 3'</em>,
        rowHeight: .15
    }]
});

<i>// Mix of height and rowHeight -- all rowHeight values must add</i>
<i>// up to 1. The first row will take up exactly 120px, and the last two</i>
<i>// rows will fill the remaining container height.</i>
<b>var</b> p = <b>new</b> Ext.Panel({
    title: <em>'Row Layout - Mixed'</em>,
    layout:<em>'ux.row'</em>,
    items: [{
        title: <em>'Row 1'</em>,
        height: 120,
        <i>// standard panel widths are still supported too:</i>
        width: <em>'50%'</em> <i>// or 200</i>
    },{
        title: <em>'Row 2'</em>,
        rowHeight: .8,
        width: 300
    },{
        title: <em>'Row 3'</em>,
        rowHeight: .2
    }]
});</code>
</pre>
]]></description><name>rowlayout</name><tag-class></tag-class><body-content>JSP</body-content><attribute>	<description>        <![CDATA[<p>An optional extra CSS class that will be added to the container.
This can be useful for adding customized styles to the container or
any of its children using standard CSS rules. See <a href="output/Ext.Component.html" ext:cls="Ext.Component">Ext.Component</a>.<a href="output/Ext.Component.html#Ext.Component-ctCls" ext:member="ctCls" ext:cls="Ext.Component">ctCls</a> also.</p>

<p><b>Note</b>: <tt>extraCls</tt> defaults to <tt>''</tt> except
for the following classes which assign a value by default:</p>

<div class="mdetail-params">
<ul>
<li><a href="output/Ext.layout.AbsoluteLayout.html" ext:cls="Ext.layout.AbsoluteLayout">Absolute Layout</a> :
<tt>'x-abs-layout-item'</tt></li>

<li><a href="output/Ext.layout.Box.html" ext:cls="Ext.layout.Box">Box Layout</a> :
<tt>'x-box-item'</tt></li>

<li><a href="output/Ext.layout.ColumnLayout.html" ext:cls="Ext.layout.ColumnLayout">Column Layout</a> :
<tt>'x-column'</tt></li>
</ul>
</div>

To configure the above Classes with an extra CSS class append to
the default. For example, for ColumnLayout:

<pre><code>extraCls: <em>'x-column custom-class'</em></code>
</pre>

<br>
<br>
]]>    </description>	<name>extraCls</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[True to hide each contained item on render(defaults to false).]]>    </description>	<name>renderHidden</name>	<required>false</required></attribute></tag>
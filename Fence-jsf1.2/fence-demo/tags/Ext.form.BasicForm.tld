<tag><description>    <![CDATA[
<p>Encapsulates the DOM &lt;form&gt; element at the heart of the <a href="output/Ext.form.FormPanel.html" ext:cls="Ext.form.FormPanel">FormPanel</a> class, and provides
input field management, validation, submission, and form loading
services.</p>

<p>By default, Ext Forms are submitted through Ajax, using an
instance of <a href="output/Ext.form.Action.Submit.html" ext:cls="Ext.form.Action.Submit">Ext.form.Action.Submit</a>. To
enable normal browser submission of an Ext Form, use the <a href="output/Ext.form.BasicForm.html#Ext.form.BasicForm-standardSubmit" ext:member="standardSubmit" ext:cls="Ext.form.BasicForm">standardSubmit</a> config option.</p>

<p><b><u>File Uploads</u></b></p>

<p><a href="output/Ext.form.BasicForm.html#Ext.form.BasicForm-fileUpload" ext:member="fileUpload" ext:cls="Ext.form.BasicForm">File
uploads</a> are not performed using Ajax submission, that is they
are <b>not</b> performed using XMLHttpRequests. Instead the form is
submitted in the standard manner with the DOM <tt>&lt;form&gt;</tt>
element temporarily modified to have its <a href="http://www.w3.org/TR/REC-html40/present/frames.html#adef-target">
target</a> set to refer to a dynamically generated, hidden
<tt>&lt;iframe&gt;</tt> which is inserted into the document but
removed after the return data has been gathered.</p>

<p>The server response is parsed by the browser to create the
document for the IFRAME. If the server is using JSON to send the
return object, then the <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17">
Content-Type</a> header must be set to "text/html" in order to tell
the browser to insert the text unchanged into the document
body.</p>

<p>Characters which are significant to an HTML parser must be sent
as HTML entities, so encode "&lt;" as "&amp;lt;", "&amp;" as
"&amp;amp;" etc.</p>

<p>The response text is retrieved from the document, and a fake
XMLHttpRequest object is created containing a <tt>responseText</tt>
property in order to conform to the requirements of event handlers
and callbacks.</p>

<p>Be aware that file upload packets are sent with the content type
<a href="http://www.faqs.org/rfcs/rfc2388.html">multipart/form</a>
and some server technologies (notably JEE) may require some custom
processing in order to retrieve parameter names and parameter
values from the packet content.</p>
]]></description><name>basicform</name><tag-class></tag-class><body-content>JSP</body-content><attribute>	<description>        <![CDATA[If specified load and submit actions will behandled with <a href="output/Ext.form.Action.DirectLoad.html" ext:cls="Ext.form.Action.DirectLoad">Ext.form.Action.DirectLoad</a>
and <a href="output/Ext.form.Action.DirectSubmit.html" ext:cls="Ext.form.Action.DirectSubmit">Ext.form.Action.DirectSubmit</a>.
Methods which have been imported by Ext.Direct can be specified
here to load and submit forms. Such as the following:

<pre><code>api: {
    load: App.ss.MyProfile.load,
    submit: App.ss.MyProfile.submit
}</code>
</pre>

<p>Load actions can use <code><a href="output/Ext.form.BasicForm.html#Ext.form.BasicForm-paramOrder" ext:member="paramOrder" ext:cls="Ext.form.BasicForm">paramOrder</a></code> or <code><a href="output/Ext.form.BasicForm.html#Ext.form.BasicForm-paramsAsHash" ext:member="paramsAsHash" ext:cls="Ext.form.BasicForm">paramsAsHash</a></code> to customize
how the load method is invoked. Submit actions will always use a
standard form submit. The formHandler configuration must be set on
the associated server-side method which has been imported by
Ext.Direct</p>
]]>    </description>	<name>api</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>Parameters to pass with all requests. e.g. baseParams: {id:
'123', foo: 'bar'}.</p>

<p>Parameters are encoded as standard HTTP parameters using <a href="output/Ext.html#Ext-urlEncode" ext:member="urlEncode" ext:cls="Ext">Ext.urlEncode</a>.</p>
]]>    </description>	<name>baseParams</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>An Ext.data.DataReader (e.g. <a href="output/Ext.data.XmlReader.html" ext:cls="Ext.data.XmlReader">Ext.data.XmlReader</a>) to be used to
read field error messages returned from 'submit' actions. This is
optional as there is built-in support for processing JSON.</p>

<p>The Records which provide messages for the invalid Fields must
use the Field name (or id) as the Record ID, and must contain a
field called 'msg' which contains the error message.</p>

<p>The errorReader does not have to be a full-blown implementation
of a DataReader. It simply needs to implement a <tt>read(xhr)</tt>
function which returns an Array of Records in an object with the
following structure:</p>

<pre><code>{
    records: recordArray
}</code>
</pre>
]]>    </description>	<name>errorReader</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Set to true if this form is a file upload. 
<p>File uploads are not performed using normal 'Ajax' techniques,
that is they are <b>not</b> performed using XMLHttpRequests.
Instead the form is submitted in the standard manner with the DOM
<tt>&lt;form&gt;</tt> element temporarily modified to have its <a href="http://www.w3.org/TR/REC-html40/present/frames.html#adef-target">
target</a> set to refer to a dynamically generated, hidden
<tt>&lt;iframe&gt;</tt> which is inserted into the document but
removed after the return data has been gathered.</p>

<p>The server response is parsed by the browser to create the
document for the IFRAME. If the server is using JSON to send the
return object, then the <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17">
Content-Type</a> header must be set to "text/html" in order to tell
the browser to insert the text unchanged into the document
body.</p>

<p>Characters which are significant to an HTML parser must be sent
as HTML entities, so encode "&lt;" as "&amp;lt;", "&amp;" as
"&amp;amp;" etc.</p>

<p>The response text is retrieved from the document, and a fake
XMLHttpRequest object is created containing a <tt>responseText</tt>
property in order to conform to the requirements of event handlers
and callbacks.</p>

<p>Be aware that file upload packets are sent with the content type
<a href="http://www.faqs.org/rfcs/rfc2388.html">multipart/form</a>
and some server technologies (notably JEE) may require some custom
processing in order to retrieve parameter names and parameter
values from the packet content.</p>
]]>    </description>	<name>fileUpload</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>A config object containing one or more event handlers to be
added to this object during initialization. This should be a valid
listeners config object as specified in the <a href="output/Ext.util.Observable.html#Ext.util.Observable-addListener" ext:member="addListener" ext:cls="Ext.util.Observable">addListener</a> example for attaching
multiple handlers at once.</p>

<br>
<p><b><u>DOM events from ExtJs <a href="output/Ext.Component.html" ext:cls="Ext.Component">Components</a></u></b></p>

<br>
<p>While <i>some</i> ExtJs Component classes export selected DOM
events (e.g. "click", "mouseover" etc), this is usually only done
when extra value can be added. For example the <a href="output/Ext.DataView.html" ext:cls="Ext.DataView">DataView</a>'s <b><code><a href="output/Ext.DataView.html#Ext.DataView-click" ext:member="click" ext:cls="Ext.DataView">click</a></code></b>
event passing the node clicked on. To access DOM events directly
from a Component's HTMLElement, listeners must be added to the
<i><a href="output/Ext.Component.html#Ext.Component-getEl" ext:member="getEl" ext:cls="Ext.Component">Element</a></i> after
the Component has been rendered. A plugin can simplify this
step:</p>

<pre><code><i>// Plugin is configured <b>with</b> a listeners config object.</i>
<i>// The Component is appended to the argument list of all handler functions.</i>
Ext.DomObserver = Ext.extend(Object, {
    constructor: <b>function</b>(config) {
        this.listeners = config.listeners ? config.listeners : config;
    },

    <i>// Component passes itself into plugin's init method</i>
    init: <b>function</b>(c) {
        <b>var</b> p, l = this.listeners;
        <b>for</b> (p <b>in</b> l) {
            <b>if</b> (Ext.isFunction(l[p])) {
                l[p] = this.createHandler(l[p], c);
            } <b>else</b> {
                l[p].fn = this.createHandler(l[p].fn, c);
            }
        }

        <i>// Add the listeners to the Element immediately following the render call</i>
        c.render = c.render.<a href="output/Function.html#Function-createSequence" ext:member="createSequence" ext:cls="Function">createSequence</a>(<b>function</b>() {
            <b>var</b> e = c.getEl();
            <b>if</b> (e) {
                e.on(l);
            }
        });
    },

    createHandler: <b>function</b>(fn, c) {
        <b>return</b> <b>function</b>(e) {
            fn.call(this, e, c);
        };
    }
});

<b>var</b> combo = <b>new</b> Ext.form.ComboBox({

    <i>// Collapse combo when its element is clicked on</i>
    plugins: [ <b>new</b> Ext.DomObserver({
        click: <b>function</b>(evt, comp) {
            comp.collapse();
        }
    })],
    store: myStore,
    typeAhead: true,
    mode: <em>'local'</em>,
    triggerAction: <em>'all'</em>
});</code>
</pre>

<br>
<br>
]]>    </description>	<name>listeners</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The request method to use (GET or POST) for formactions if one isn't supplied in the action options.]]>    </description>	<name>method</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>A list of params to be executed server side. Defaults to
<tt>undefined</tt>. Only used for the <code><a href="output/Ext.form.BasicForm.html#Ext.form.BasicForm-api" ext:member="api" ext:cls="Ext.form.BasicForm">api</a></code>
<code>load</code> configuration.</p>

<br>
<p>Specify the params in the order in which they must be executed
on the server-side as either (1) an Array of String values, or (2)
a String of params delimited by either whitespace, comma, or pipe.
For example, any of the following would be acceptable:</p>

<pre><code>paramOrder: [<em>'param1'</em>,<em>'param2'</em>,<em>'param3'</em>]
paramOrder: <em>'param1 param2 param3'</em>
paramOrder: <em>'param1,param2,param3'</em>
paramOrder: <em>'param1|param2|param'</em></code>
</pre>
]]>    </description>	<name>paramOrder</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Only used for the <code><a href="output/Ext.form.BasicForm.html#Ext.form.BasicForm-api" ext:member="api" ext:cls="Ext.form.BasicForm">api</a></code><code>load</code> configuration. Send parameters as a collection of
named arguments (defaults to <tt>false</tt>). Providing a <tt><a href="output/Ext.form.BasicForm.html#Ext.form.BasicForm-paramOrder" ext:member="paramOrder" ext:cls="Ext.form.BasicForm">paramOrder</a></tt> nullifies this
configuration.]]>    </description>	<name>paramsAsHash</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[An Ext.data.DataReader (e.g. <a href="output/Ext.data.XmlReader.html" ext:cls="Ext.data.XmlReader">Ext.data.XmlReader</a>) to be used toread data when executing 'load' actions. This is optional as there
is built-in support for processing JSON. For additional information
on using an XMLReader see the example provided in
examples/form/xml-form.html.]]>    </description>	<name>reader</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>If set to <tt>true</tt>, standard HTML form submits are used
instead of XHR (Ajax) style form submissions. Defaults to
<tt>false</tt>.</p>

<br>
<p><b>Note:</b> When using <code>standardSubmit</code>, the
<code>options</code> to <code><a href="output/Ext.form.BasicForm.html#Ext.form.BasicForm-submit" ext:member="submit" ext:cls="Ext.form.BasicForm">submit</a></code>
are ignored because Ext's Ajax infrastracture is bypassed. To pass
extra parameters (e.g. <code>baseParams</code> and
<code>params</code>), utilize hidden fields to submit extra data,
for example:</p>

<pre><code><b>new</b> Ext.FormPanel({
    standardSubmit: true,
    baseParams: {
        foo: <em>'bar'</em>
    },
    <a href="output/url.html" ext:cls="url">url</a>: <em>'myProcess.php'</em>,
    items: [{
        xtype: <em>'textfield'</em>,
        name: <em>'userName'</em>
    }],
    buttons: [{
        text: <em>'Save'</em>,
        handler: <b>function</b>(){
            <b>var</b> fp = this.ownerCt.ownerCt,
                form = fp.getForm();
            <b>if</b> (form.isValid()) {
                <i>// check <b>if</b> there are baseParams and <b>if</b></i>
                <i>// hiddent items have been added already</i>
                <b>if</b> (fp.baseParams &amp;&amp; !fp.paramsAdded) {
                    <i>// add hidden items <b>for</b> all baseParams</i>
                    <b>for</b> (i <b>in</b> fp.baseParams) {
                        fp.add({
                            xtype: <em>'hidden'</em>,
                            name: i,
                            value: fp.baseParams[i]
                        });
                    }
                    fp.doLayout();
                    <i>// set a custom flag to prevent re-adding</i>
                    fp.paramsAdded = true;
                }
                form.<a href="output/Ext.form.BasicForm.html#Ext.form.BasicForm-submit" ext:member="submit" ext:cls="Ext.form.BasicForm">submit</a>();
            }
        }
    }]
});</code>
</pre>
]]>    </description>	<name>standardSubmit</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[Timeout for form actions in seconds (default is30 seconds).]]>    </description>	<name>timeout</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[If set to <tt>true</tt>, <a href="output/Ext.form.BasicForm.html#Ext.form.BasicForm-reset" ext:member="reset" ext:cls="Ext.form.BasicForm">reset</a>() resetsto the last loaded or <a href="output/Ext.form.BasicForm.html#Ext.form.BasicForm-setValues" ext:member="setValues" ext:cls="Ext.form.BasicForm">setValues</a>()
data instead of when the form was first created. Defaults to
<tt>false</tt>.]]>    </description>	<name>trackResetOnLoad</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The URL to use for form actions if one isn'tsupplied in the <code><a href="output/Ext.form.BasicForm.html#Ext.form.BasicForm-doAction" ext:member="doAction" ext:cls="Ext.form.BasicForm">doAction</a>
options</code>.]]>    </description>	<name>url</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[The default title to show for the waitingmessage box (defaults to <tt>'Please Wait...'</tt>)]]>    </description>	<name>waitTitle</name>	<required>false</required></attribute></tag>
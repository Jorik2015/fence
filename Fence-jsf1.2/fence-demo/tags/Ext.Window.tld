<tag>
	<description>    <![CDATA[
<p>A specialized panel intended for use as an application window.
Windows are floated, <a href="output/Ext.Window.html#Ext.Window-resizable" ext:member="resizable" ext:cls="Ext.Window">resizable</a>, and <a href="output/Ext.Window.html#Ext.Window-draggable" ext:member="draggable" ext:cls="Ext.Window">draggable</a> by
default. Windows can be <a href="output/Ext.Window.html#Ext.Window-maximizable" ext:member="maximizable" ext:cls="Ext.Window">maximized</a> to fill
the viewport, restored to their prior size, and can be <a href="output/Ext.Window.html#Ext.Window-minimize" ext:member="minimize" ext:cls="Ext.Window">minimize</a>d.</p>

<p>Windows can also be linked to a <a href="output/Ext.WindowGroup.html" ext:cls="Ext.WindowGroup">Ext.WindowGroup</a> or managed by the <a href="output/Ext.WindowMgr.html" ext:cls="Ext.WindowMgr">Ext.WindowMgr</a> to provide grouping,
activation, to front, to back and other application-specific
behavior.</p>

<p>By default, Windows will be rendered to document.body. To <a href="output/Ext.Window.html#Ext.Window-constrain" ext:member="constrain" ext:cls="Ext.Window">constrain</a> a Window
to another element specify <a href="output/Ext.Component.html#Ext.Component-renderTo" ext:member="renderTo" ext:cls="Ext.Component">renderTo</a>.</p>

<p><b>Note:</b> By default, the <code><a href="output/Ext.Window.html#Ext.Window-closable" ext:member="closable" ext:cls="Ext.Window">close</a></code> header
tool <i>destroys</i> the Window resulting in destruction of any
child Components. This makes the Window object, and all its
descendants <b>unusable</b>. To enable re-use of a Window, use
<b><code><a href="output/Ext.Window.html#Ext.Window-closeAction" ext:member="closeAction" ext:cls="Ext.Window">closeAction:
<em>'hide'</em></a></code></b>.</p>
]]></description>
	<name>window</name>
	<tag-class></tag-class>
	<body-content>JSP</body-content>
	<attribute>
		<description>        <![CDATA[A string component id or the numeric index of thecomponent that should be initially activated within the container's
layout on render. For example, activeItem: 'item-1' or activeItem:
0 (index 0 = the first item in the container's collection).
activeItem only applies to layout styles that can display items one
at a time (like <a href="output/Ext.layout.AccordionLayout.html" ext:cls="Ext.layout.AccordionLayout">Ext.layout.AccordionLayout</a>,
<a href="output/Ext.layout.CardLayout.html" ext:cls="Ext.layout.CardLayout">Ext.layout.CardLayout</a> and <a href="output/Ext.layout.FitLayout.html" ext:cls="Ext.layout.FitLayout">Ext.layout.FitLayout</a>). Related
to <a href="output/Ext.layout.ContainerLayout.html#Ext.layout.ContainerLayout-activeItem" ext:member="activeItem" ext:cls="Ext.layout.ContainerLayout">Ext.layout.ContainerLayout.activeItem</a>.]]>
		</description>
		<name>activeItem</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[Whether the component can move the Dom node whenrendering (defaults to true).]]>
		</description>
		<name>allowDomMove</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p><b>Note</b>: this config is only used when this Component is
rendered by a Container which has been configured to use an <b><a href="output/Ext.layout.AnchorLayout.html" ext:cls="Ext.layout.AnchorLayout">AnchorLayout</a></b> based layout
manager, for example:</p>

<div class="mdetail-params">
<ul>
<li><a href="output/Ext.form.FormPanel.html" ext:cls="Ext.form.FormPanel">Ext.form.FormPanel</a></li>

<li>specifying <code>layout: <em>'anchor'</em> <i>// or
<em>'form'</em>, or <em>'absolute'</em></i></code></li>
</ul>
</div>

<br>
<br>
 

<p>See <a href="output/Ext.layout.AnchorLayout.html" ext:cls="Ext.layout.AnchorLayout">Ext.layout.AnchorLayout</a>.<a href="output/Ext.layout.AnchorLayout.html#Ext.layout.AnchorLayout-anchor" ext:member="anchor" ext:cls="Ext.layout.AnchorLayout">anchor</a>
also.</p>
]]>
		</description>
		<name>anchor</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<code>true</code> to animate the transition whenthe panel is collapsed, <code>false</code> to skip the animation
(defaults to <code>true</code> if the <a href="output/Ext.Fx.html" ext:cls="Ext.Fx">Ext.Fx</a> class is available, otherwise
<code>false</code>).]]>
		</description>
		<name>animCollapse</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[Id or element from which the window shouldanimate while opening (defaults to null with no animation).]]>
		</description>
		<name>animateTarget</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the document that
specifies some panel-specific structural markup. When
<code>applyTo</code> is used, constituent parts of the panel can be
specified by CSS class name within the main element, and the panel
will automatically create those components from that markup. Any
required components not specified in the markup will be
autogenerated if necessary.</p>

<p>The following class names are supported (baseCls will be
replaced by <a href="output/Ext.Panel.html#Ext.Panel-baseCls" ext:member="baseCls" ext:cls="Ext.Panel">baseCls</a>):</p>

<ul>
<li>baseCls + '-header'</li>

<li>baseCls + '-header-text'</li>

<li>baseCls + '-bwrap'</li>

<li>baseCls + '-tbar'</li>

<li>baseCls + '-body'</li>

<li>baseCls + '-bbar'</li>

<li>baseCls + '-footer'</li>
</ul>

<p>Using this config, a call to render() is not required. If
applyTo is specified, any value passed for <a href="output/Ext.Panel.html#Ext.Panel-renderTo" ext:member="renderTo" ext:cls="Ext.Panel">renderTo</a> will be
ignored and the target element's parent node will automatically be
used as the panel's container.</p>
]]>
		</description>
		<name>applyTo</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[If true the container will automatically destroyany contained component that is removed from it, else destruction
must be handled manually (defaults to true).]]>
		</description>
		<name>autoDestroy</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>A tag name or <a href="output/Ext.DomHelper.html" ext:cls="Ext.DomHelper">DomHelper</a> spec used to create the <a href="output/Ext.Component.html#Ext.Component-getEl" ext:member="getEl" ext:cls="Ext.Component">Element</a> which will
encapsulate this Component.</p>

<p>You do not normally need to specify this. For the base classes
<a href="output/Ext.Component.html" ext:cls="Ext.Component">Ext.Component</a>, <a href="output/Ext.BoxComponent.html" ext:cls="Ext.BoxComponent">Ext.BoxComponent</a>, and <a href="output/Ext.Container.html" ext:cls="Ext.Container">Ext.Container</a>, this defaults to
<b><tt>'div'</tt></b>. The more complex Ext classes use a more
complex DOM structure created by their own onRender methods.</p>

<p>This is intended to allow the developer to create
application-specific utility Components encapsulated by different
DOM elements. Example usage:</p>

<pre><code>{
    xtype: <em>'box'</em>,
    autoEl: {
        tag: <em>'img'</em>,
        src: <em>'http:<i>//www.example.com/example.jpg'</i></em>
    }
}, {
    xtype: <em>'box'</em>,
    autoEl: {
        tag: <em>'blockquote'</em>,
        html: <em>'autoEl is cool!'</em>
    }
}, {
    xtype: <em>'container'</em>,
    autoEl: <em>'ul'</em>,
    cls: <em>'ux-unordered-list'</em>,
    items: {
        xtype: <em>'box'</em>,
        autoEl: <em>'li'</em>,
        html: <em>'First list item'</em>
    }
}</code>
</pre>
]]>
		</description>
		<name>autoEl</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<code>true</code> to use height:'auto',<code>false</code> to use fixed height (defaults to
<code>false</code>). <b>Note</b>: Setting <code>autoHeight:
true</code> means that the browser will manage the panel's height
based on its contents, and that Ext will not manage it at all. If
the panel is within a layout that manages dimensions
(<code>fit</code>, <code>border</code>, etc.) then setting
<code>autoHeight: true</code> can cause issues with scrolling and
will not generally work as expected since the panel will take on
the height of its contents rather than the height required by the
Ext layout.]]>
		</description>
		<name>autoHeight</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[A valid url spec according to the Updater <a href="output/Ext.Updater.html#Ext.Updater-update" ext:member="update" ext:cls="Ext.Updater">Ext.Updater.update</a>method. If autoLoad is not null, the panel will attempt to load its
contents immediately upon render.

<p>The URL will become the default URL for this panel's <a href="output/Ext.Panel.html#Ext.Panel-body" ext:member="body" ext:cls="Ext.Panel">body</a> element, so it may be <a href="output/Ext.Element.html#Ext.Element-refresh" ext:member="refresh" ext:cls="Ext.Element">refresh</a>ed at any
time.</p>
]]>
		</description>
		<name>autoLoad</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<code>true</code> to use overflow:'auto' on thepanel's body element and show scroll bars automatically when
necessary, <code>false</code> to clip any overflowing content
(defaults to <code>false</code>).]]>
		</description>
		<name>autoScroll</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[True if the component should check for hiddenclasses (e.g. 'x-hidden' or 'x-hide-display') and remove them on
render (defaults to false).]]>
		</description>
		<name>autoShow</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[The base CSS class to apply to this panel'selement (defaults to 'x-window').]]>
		</description>
		<name>baseCls</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>The bottom toolbar of the panel. This can be a <a href="output/Ext.Toolbar.html" ext:cls="Ext.Toolbar">Ext.Toolbar</a> object, a toolbar config, or
an array of buttons/button configs to be added to the toolbar. Note
that this is not available as a property after render. To access
the bottom toolbar after render, use <a href="output/Ext.Panel.html#Ext.Panel-getBottomToolbar" ext:member="getBottomToolbar" ext:cls="Ext.Panel">getBottomToolbar</a>.</p>

<p><b>Note:</b> Although a Toolbar may contain Field components,
these will <b>not</b> be updated by a load of an ancestor
FormPanel. A Panel's toolbars are not part of the standard
Container-&gt;Component hierarchy, and so are not scanned to
collect form items. However, the values <b>will</b> be submitted
because form submission parameters are collected from the DOM
tree.</p>
]]>
		</description>
		<name>bbar</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>A <a href="output/Ext.DomHelper.html" ext:cls="Ext.DomHelper">DomHelper</a> element specification object
specifying the element structure of this Panel's <a href="output/Ext.Panel.html#Ext.Panel-bbar" ext:member="bbar" ext:cls="Ext.Panel">bbar</a> Element. See <code><a href="output/Ext.Panel.html#Ext.Panel-bodyCfg" ext:member="bodyCfg" ext:cls="Ext.Panel">bodyCfg</a></code> also.</p>
]]>
		</description>
		<name>bbarCfg</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[True to display an interior border on the bodyelement of the panel, false to hide it (defaults to true). This
only applies when <a href="output/Ext.Panel.html#Ext.Panel-border" ext:member="border" ext:cls="Ext.Panel">border</a> == true. If
border == true and bodyBorder == false, the border will display as
a 1px wide inset border, giving the entire body element an inset
appearance.]]>
		</description>
		<name>bodyBorder</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>A <a href="output/Ext.DomHelper.html" ext:cls="Ext.DomHelper">DomHelper</a> element specification object
may be specified for any Panel Element.</p>

<p>By default, the Default element in the table below will be used
for the html markup to create a child element with the commensurate
Default class name (<code>baseCls</code> will be replaced by
<code><a href="output/Ext.Panel.html#Ext.Panel-baseCls" ext:member="baseCls" ext:cls="Ext.Panel">baseCls</a></code>):</p>

<pre>Panel      Default  Default             Custom      Additional       Additional
Element    element  class               element     class            style
========   ==========================   =========   ==============   ===========
<a href="output/Ext.Panel.html#Ext.Panel-header" ext:member="header" ext:cls="Ext.Panel">header</a>     div      <a href="output/Ext.Panel.html#Ext.Panel-baseCls" ext:member="baseCls" ext:cls="Ext.Panel">baseCls</a>+'-header'   <a href="output/Ext.Panel.html#Ext.Panel-headerCfg" ext:member="headerCfg" ext:cls="Ext.Panel">headerCfg</a>   headerCssClass   headerStyle
<a href="output/Ext.Panel.html#Ext.Panel-bwrap" ext:member="bwrap" ext:cls="Ext.Panel">bwrap</a>      div      <a href="output/Ext.Panel.html#Ext.Panel-baseCls" ext:member="baseCls" ext:cls="Ext.Panel">baseCls</a>+'-bwrap'     <a href="output/Ext.Panel.html#Ext.Panel-bwrapCfg" ext:member="bwrapCfg" ext:cls="Ext.Panel">bwrapCfg</a>    bwrapCssClass    bwrapStyle
+ tbar     div      <a href="output/Ext.Panel.html#Ext.Panel-baseCls" ext:member="baseCls" ext:cls="Ext.Panel">baseCls</a>+'-tbar'       <a href="output/Ext.Panel.html#Ext.Panel-tbarCfg" ext:member="tbarCfg" ext:cls="Ext.Panel">tbarCfg</a>     tbarCssClass     tbarStyle
+ <a href="output/Ext.Panel.html#Ext.Panel-body" ext:member="body" ext:cls="Ext.Panel">body</a>     div      <a href="output/Ext.Panel.html#Ext.Panel-baseCls" ext:member="baseCls" ext:cls="Ext.Panel">baseCls</a>+'-body'       <a href="output/Ext.Panel.html#Ext.Panel-bodyCfg" ext:member="bodyCfg" ext:cls="Ext.Panel">bodyCfg</a>     <a href="output/Ext.Panel.html#Ext.Panel-bodyCssClass" ext:member="bodyCssClass" ext:cls="Ext.Panel">bodyCssClass</a>     <a href="output/Ext.Panel.html#Ext.Panel-bodyStyle" ext:member="bodyStyle" ext:cls="Ext.Panel">bodyStyle</a>
+ bbar     div      <a href="output/Ext.Panel.html#Ext.Panel-baseCls" ext:member="baseCls" ext:cls="Ext.Panel">baseCls</a>+'-bbar'       <a href="output/Ext.Panel.html#Ext.Panel-bbarCfg" ext:member="bbarCfg" ext:cls="Ext.Panel">bbarCfg</a>     bbarCssClass     bbarStyle
+ <a href="output/Ext.Panel.html#Ext.Panel-footer" ext:member="footer" ext:cls="Ext.Panel">footer</a>   div      <a href="output/Ext.Panel.html#Ext.Panel-baseCls" ext:member="baseCls" ext:cls="Ext.Panel">baseCls</a>+'-footer'   <a href="output/Ext.Panel.html#Ext.Panel-footerCfg" ext:member="footerCfg" ext:cls="Ext.Panel">footerCfg</a>   footerCssClass   footerStyle
</pre>

<p>Configuring a Custom element may be used, for example, to force
the <a href="output/Ext.Panel.html#Ext.Panel-body" ext:member="body" ext:cls="Ext.Panel">body</a> Element to use a
different form of markup than is created by default. An example of
this might be to <a href="output/Ext.Element.html#Ext.Element-createChild" ext:member="createChild" ext:cls="Ext.Element">create a child</a>
Panel containing a custom content, such as a header, or forcing
centering of all Panel content by having the body be a
&lt;center&gt; element:</p>

<pre><code><b>new</b> Ext.Panel({
    title: <em>'Message Title'</em>,
    renderTo: Ext.getBody(),
    width: 200, height: 130,
    <b>bodyCfg</b>: {
        tag: <em>'center'</em>,
        cls: <em>'x-panel-body'</em>,  <i>// Default class not applied <b>if</b> Custom element specified</i>
        html: <em>'Message'</em>
    },
    footerCfg: {
        tag: <em>'h2'</em>,
        cls: <em>'x-panel-footer'</em>        <i>// same as the Default class</i>
        html: <em>'footer html'</em>
    },
    footerCssClass: <em>'custom-footer'</em>, <i>// additional css class, see <a href="output/Ext.element.html#Ext.element-addClass" ext:member="addClass" ext:cls="Ext.element">addClass</a></i>
    footerStyle:    <em>'background-color:red'</em> <i>// see <a href="output/Ext.Panel.html#Ext.Panel-bodyStyle" ext:member="bodyStyle" ext:cls="Ext.Panel">bodyStyle</a></i>
});</code>
</pre>

<p>The example above also explicitly creates a <code><a href="output/Ext.Panel.html#Ext.Panel-footer" ext:member="footer" ext:cls="Ext.Panel">footer</a></code> with custom markup and
styling applied.</p>
]]>
		</description>
		<name>bodyCfg</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[Additional css class selector to be applied tothe <a href="output/Ext.Panel.html#Ext.Panel-body" ext:member="body" ext:cls="Ext.Panel">body</a> element in the
format expected by <a href="output/Ext.Element.html#Ext.Element-addClass" ext:member="addClass" ext:cls="Ext.Element">Ext.Element.addClass</a> (defaults to null).
See <a href="output/Ext.Panel.html#Ext.Panel-bodyCfg" ext:member="bodyCfg" ext:cls="Ext.Panel">bodyCfg</a>.]]>
		</description>
		<name>bodyCssClass</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[Custom CSS styles to be applied to the <a href="output/Ext.Panel.html#Ext.Panel-body" ext:member="body" ext:cls="Ext.Panel">body</a> element in the format expected by <a href="output/Ext.Element.html#Ext.Element-applyStyles" ext:member="applyStyles" ext:cls="Ext.Element">Ext.Element.applyStyles</a> (defaults tonull). See <a href="output/Ext.Panel.html#Ext.Panel-bodyCfg" ext:member="bodyCfg" ext:cls="Ext.Panel">bodyCfg</a>.]]>
		</description>
		<name>bodyStyle</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[True to display the borders of the panel's bodyelement, false to hide them (defaults to true). By default, the
border is a 2px wide inset border, but this can be further altered
by setting <a href="output/Ext.Panel.html#Ext.Panel-bodyBorder" ext:member="bodyBorder" ext:cls="Ext.Panel">bodyBorder</a> to
false.]]>
		</description>
		<name>border</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>An array of events that, when fired, should be bubbled to any
parent container. Defaults to <tt>['add', 'remove']</tt>.</p>
]]>
		</description>
		<name>bubbleEvents</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[When set to true (50 milliseconds) or a number ofmilliseconds, the layout assigned for this container will buffer
the frequency it calculates and does a re-layout of components.
This is useful for heavy containers or containers with a large
quantity of sub-components for which frequent layout calls would be
expensive. Defaults to <tt>50</tt>.]]>
		</description>
		<name>bufferResize</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[The alignment of any <a href="output/Ext.Panel.html#Ext.Panel-buttons" ext:member="buttons" ext:cls="Ext.Panel">buttons</a> added to this panel. Valid valuesare <code><em>'right'</em></code>, <code><em>'left'</em></code> and
<code><em>'center'</em></code> (defaults to
<code><em>'right'</em></code>).]]>
		</description>
		<name>buttonAlign</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<code>buttons</code> will be used as <code><a href="output/Ext.Container.html#Ext.Container-items" ext:member="items" ext:cls="Ext.Container">items</a></code> for thetoolbar in the footer (<code><a href="output/Ext.Panel.html#Ext.Panel-fbar" ext:member="fbar" ext:cls="Ext.Panel">fbar</a></code>). Typically the value of this
configuration property will be an array of <a href="output/Ext.Button.html" ext:cls="Ext.Button">Ext.Button</a>s
or <a href="output/Ext.Button.html" ext:cls="Ext.Button">Ext.Button</a> configuration objects. If an
item is configured with <code>minWidth</code> or the Panel is
configured with <code>minButtonWidth</code>, that width will be
applied to the item.]]>
		</description>
		<name>buttons</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>A <a href="output/Ext.DomHelper.html" ext:cls="Ext.DomHelper">DomHelper</a> element specification object
specifying the element structure of this Panel's <a href="output/Ext.Panel.html#Ext.Panel-bwrap" ext:member="bwrap" ext:cls="Ext.Panel">bwrap</a> Element. See <code><a href="output/Ext.Panel.html#Ext.Panel-bodyCfg" ext:member="bodyCfg" ext:cls="Ext.Panel">bodyCfg</a></code> also.</p>
]]>
		</description>
		<name>bwrapCfg</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>The CSS class used to to apply to the special clearing div
rendered directly after each form field wrapper to provide field
clearing (defaults to <tt>'x-form-clear-left'</tt>).</p>

<br>
<p><b>Note</b>: this config is only used when this Component is
rendered by a Container which has been configured to use the <b><a href="output/Ext.layout.FormLayout.html" ext:cls="Ext.layout.FormLayout">FormLayout</a></b> layout manager
(e.g. <a href="output/Ext.form.FormPanel.html" ext:cls="Ext.form.FormPanel">Ext.form.FormPanel</a> or specifying
<tt>layout:'form'</tt>) and either a <tt><a href="output/Ext.Component.html#Ext.Component-fieldLabel" ext:member="fieldLabel" ext:cls="Ext.Component">fieldLabel</a></tt>
is specified or <tt>isFormField=true</tt> is specified.</p>

<br>
<p>See <a href="output/Ext.layout.FormLayout.html" ext:cls="Ext.layout.FormLayout">Ext.layout.FormLayout</a>.<a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-fieldTpl" ext:member="fieldTpl" ext:cls="Ext.layout.FormLayout">fieldTpl</a>
also.</p>
]]>
		</description>
		<name>clearCls</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>True to display the 'close' tool button and allow the user to
close the window, false to hide the button and disallow closing the
window (defaults to true).</p>

<p>By default, when close is requested by either clicking the close
button in the header or pressing ESC when the Window has focus, the
<a href="output/Ext.Window.html#Ext.Window-close" ext:member="close" ext:cls="Ext.Window">close</a> method will be
called. This will <i><a href="output/Ext.Component.html#Ext.Component-destroy" ext:member="destroy" ext:cls="Ext.Component">destroy</a></i> the
Window and its content meaning that it may not be reused.</p>

<p>To make closing a Window <i>hide</i> the Window so that it may
be reused, set <a href="output/Ext.Window.html#Ext.Window-closeAction" ext:member="closeAction" ext:cls="Ext.Window">closeAction</a> to
'hide'.</p>
]]>
		</description>
		<name>closable</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>The action to take when the close header tool is clicked:</p>

<div class="mdetail-params">
<ul>
<li><b><code><em>'<a href="output/Ext.Window.html#Ext.Window-close" ext:member="close" ext:cls="Ext.Window">close</a>'</em></code></b>
: <b>Default</b>
<div class="sub-desc"><a href="output/Ext.Window.html#Ext.Window-close" ext:member="close" ext:cls="Ext.Window">remove</a> the window from the DOM and <a href="output/Ext.Component.html#Ext.Component-destroy" ext:member="destroy" ext:cls="Ext.Component">destroy</a> it and all
descendant Components. The window will <b>not</b> be available to
be redisplayed via the <a href="output/Ext.Window.html#Ext.Window-show" ext:member="show" ext:cls="Ext.Window">show</a> method.</div>
</li>

<li><b><code><em>'<a href="output/Ext.Window.html#Ext.Window-hide" ext:member="hide" ext:cls="Ext.Window">hide</a>'</em></code></b> : 

<div class="sub-desc"><a href="output/Ext.Window.html#Ext.Window-hide" ext:member="hide" ext:cls="Ext.Window">hide</a> the window by setting visibility to
hidden and applying negative offsets. The window will be available
to be redisplayed via the <a href="output/Ext.Window.html#Ext.Window-show" ext:member="show" ext:cls="Ext.Window">show</a> method.</div>
</li>
</ul>
</div>

<p><b>Note:</b> This setting does not affect the <a href="output/Ext.Window.html#Ext.Window-close" ext:member="close" ext:cls="Ext.Window">close</a> method which will always <a href="output/Ext.Component.html#Ext.Component-destroy" ext:member="destroy" ext:cls="Ext.Component">destroy</a> the
window. To programatically <i>hide</i> a window, call <a href="output/Ext.Window.html#Ext.Window-hide" ext:member="hide" ext:cls="Ext.Window">hide</a>.</p>
]]>
		</description>
		<name>closeAction</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[An optional extra CSS class that will be added tothis component's Element (defaults to ''). This can be useful for
adding customized styles to the component or any of its children
using standard CSS rules.]]>
		</description>
		<name>cls</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<code>true</code> to make sure thecollapse/expand toggle button always renders first (to the left of)
any other tools in the panel's title bar, <code>false</code> to
render it last (defaults to <code>true</code>).]]>
		</description>
		<name>collapseFirst</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[True to render the window collapsed, false torender it expanded (defaults to false). Note that if <a href="output/Ext.Window.html#Ext.Window-expandOnShow" ext:member="expandOnShow" ext:cls="Ext.Window">expandOnShow</a> is
true (the default) it will override the <tt>collapsed</tt> config
and the window will always be expanded when shown.]]>
		</description>
		<name>collapsed</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[A CSS class to add to the panel's element afterit has been collapsed (defaults to
<code><em>'x-panel-collapsed'</em></code>).]]>
		</description>
		<name>collapsedCls</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[True to make the panel collapsible and have theexpand/collapse toggle button automatically rendered into the
header tool button area, false to keep the panel statically sized
with no button (defaults to false).]]>
		</description>
		<name>collapsible</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[True to constrain the window within itscontaining element, false to allow it to fall outside of its
containing element. By default the window will be rendered to
document.body. To render and constrain the window within another
element specify <a href="output/Ext.Window.html#Ext.Window-renderTo" ext:member="renderTo" ext:cls="Ext.Window">renderTo</a>. (defaults
to false). Optionally the header only can be constrained using <a href="output/Ext.Window.html#Ext.Window-constrainHeader" ext:member="constrainHeader" ext:cls="Ext.Window">constrainHeader</a>.]]>
		</description>
		<name>constrain</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[True to constrain the window header within itscontaining element (allowing the window body to fall outside of its
containing element) or false to allow the header to fall outside
its containing element (defaults to false). Optionally the entire
window can be constrained using <a href="output/Ext.Window.html#Ext.Window-constrain" ext:member="constrain" ext:cls="Ext.Window">constrain</a>.]]>
		</description>
		<name>constrainHeader</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>Optional. Specify an existing HTML element, or the
<code>id</code> of an existing HTML element to use as this Panel's
<code><b><a href="output/Ext.Panel.html#Ext.Panel-body" ext:member="body" ext:cls="Ext.Panel">body</a></b></code>
content.</p>

<ul>
<li><b>Description</b> : 

<div class="sub-desc">This config option is used to take an
existing HTML element and place it in the body of a new panel (it
simply moves the specified DOM element into the body element of the
Panel <i>after the Panel is rendered</i> to use as the content (it
is not going to be the actual panel itself).</div>
</li>

<li><b>Notes</b> : 

<div class="sub-desc">The specified HTML element is appended to the
Panel's <a href="output/Ext.Panel.html#Ext.Panel-body" ext:member="body" ext:cls="Ext.Panel">body</a> Element by the
Panel's <code>afterRender</code> method <i>after any configured <a href="output/Ext.Panel.html#Ext.Panel-html" ext:member="html" ext:cls="Ext.Panel">HTML</a> has been inserted</i>, and so the
document will not contain this element at the time the <a href="output/Ext.Panel.html#Ext.Panel-render" ext:member="render" ext:cls="Ext.Panel">render</a> event is fired.</div>

<div class="sub-desc">The specified HTML element used will not
participate in any <code><b><a href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout" ext:cls="Ext.Container">layout</a></b></code>
scheme that the Panel may use. It is just HTML. Layouts operate on
child <code><b><a href="output/Ext.Container.html#Ext.Container-items" ext:member="items" ext:cls="Ext.Container">items</a></b></code>.</div>

<div class="sub-desc">Add either the <code>x-hidden</code> or the
<code>x-hide-display</code> CSS class to prevent a brief flicker of
the content before it is rendered to the panel.</div>
</li>
</ul>
]]>
		</description>
		<name>contentEl</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>An optional extra CSS class that will be added to this
component's container. This can be useful for adding customized
styles to the container or any of its children using standard CSS
rules. See <a href="output/Ext.layout.ContainerLayout.html" ext:cls="Ext.layout.ContainerLayout">Ext.layout.ContainerLayout</a>.<a href="output/Ext.layout.ContainerLayout.html#Ext.layout.ContainerLayout-extraCls" ext:member="extraCls" ext:cls="Ext.layout.ContainerLayout">extraCls</a> also.</p>

<p><b>Note</b>: <tt>ctCls</tt> defaults to <tt>''</tt> except for
the following class which assigns a value by default:</p>

<div class="mdetail-params">
<ul>
<li><a href="output/Ext.layout.Box.html" ext:cls="Ext.layout.Box">Box Layout</a> :
<tt>'x-box-layout-ct'</tt></li>
</ul>
</div>

To configure the above Class with an extra CSS class append to the
default. For example, for BoxLayout (Hbox and Vbox):

<pre><code>ctCls: <em>'x-box-layout-ct custom-class'</em></code>
</pre>

<br>
<br>
]]>
		</description>
		<name>ctCls</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[The id / index of a button or a button instanceto focus when this window received the focus.]]>
		</description>
		<name>defaultButton</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>The default <a href="output/Ext.Component.html" ext:cls="Ext.Component">xtype</a> of child Components to create in
this Container when a child item is specified as a raw
configuration object, rather than as an instantiated Component.</p>

<p>Defaults to <tt>'panel'</tt>, except <a href="output/Ext.menu.Menu.html" ext:cls="Ext.menu.Menu">Ext.menu.Menu</a> which defaults to
<tt>'menuitem'</tt>, and <a href="output/Ext.Toolbar.html" ext:cls="Ext.Toolbar">Ext.Toolbar</a> and <a href="output/Ext.ButtonGroup.html" ext:cls="Ext.ButtonGroup">Ext.ButtonGroup</a> which default to
<tt>'button'</tt>.</p>
]]>
		</description>
		<name>defaultType</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>A config object that will be applied to all components added to
this container either via the <a href="output/Ext.Container.html#Ext.Container-items" ext:member="items" ext:cls="Ext.Container">items</a> config or via
the <a href="output/Ext.Container.html#Ext.Container-add" ext:member="add" ext:cls="Ext.Container">add</a> or <a href="output/Ext.Container.html#Ext.Container-insert" ext:member="insert" ext:cls="Ext.Container">insert</a> methods. The
<tt>defaults</tt> config can contain any number of name/value
property pairs to be added to each item, and should be valid for
the types of items being added to the container. For example, to
automatically apply padding to the body of each of a set of
contained <a href="output/Ext.Panel.html" ext:cls="Ext.Panel">Ext.Panel</a> items, you could pass:
<tt>defaults: {bodyStyle:'padding:15px'}</tt>.</p>

<br>
<p><b>Note</b>: <tt>defaults</tt> will not be applied to config
objects if the option is already specified. For example:</p>

<pre><code>defaults: {               <i>// defaults are applied to items, not the container
</i>
    autoScroll:true
},
items: [
    {
        xtype: <em>'panel'</em>,   <i>// defaults <b>do not</b> have precedence over
</i>
        id: <em>'panel1'</em>,     <i>// options <b>in</b> config objects, so the defaults
</i>
        autoScroll: false <i>// will not be applied here, panel1 will be autoScroll:false
</i>
    },
    <b>new</b> Ext.Panel({       <i>// defaults <b>do</b> have precedence over options
</i>
        id: <em>'panel2'</em>,     <i>// options <b>in</b> components, so the defaults
</i>
        autoScroll: false <i>// will be applied here, panel2 will be autoScroll:true.
</i>
    })
]</code>
</pre>
]]>
		</description>
		<name>defaults</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[Render this panel disabled (default is<code>false</code>). An important note when using the disabled
config on panels is that IE will often fail to initialize the
disabled mask element correectly if the panel's layout has not yet
completed by the time the Panel is disabled during the render
process. If you experience this issue, you may need to instead use
the <a href="output/Ext.Panel.html#Ext.Panel-afterlayout" ext:member="afterlayout" ext:cls="Ext.Panel">afterlayout</a> event
to initialize the disabled state: 

<pre><code><b>new</b> Ext.Panel({
    ...
    listeners: {
        <em>'afterlayout'</em>: {
            fn: <b>function</b>(p){
                p.disable();
            },
            single: true <i>// important, as many layouts can occur</i>
        }
    }
});</code>
</pre>
]]>
		</description>
		<name>disabled</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[CSS class added to the component when it isdisabled (defaults to 'x-item-disabled').]]>
		</description>
		<name>disabledClass</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[True to allow the window to be dragged by theheader bar, false to disable dragging (defaults to true). Note that
by default the window will be centered in the viewport, so if
dragging is disabled the window may need to be positioned
programmatically after render (e.g., myWindow.setPosition(100,
100);).]]>
		</description>
		<name>draggable</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[True to always expand the window when it isdisplayed, false to keep it in its current state (which may be <a href="output/Ext.Window.html#Ext.Window-collapsed" ext:member="collapsed" ext:cls="Ext.Window">collapsed</a>) when
displayed (defaults to true).]]>
		</description>
		<name>expandOnShow</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>A <a href="output/Ext.Toolbar.html" ext:cls="Ext.Toolbar">Toolbar</a> object, a Toolbar config, or an
array of <a href="output/Ext.Button.html" ext:cls="Ext.Button">Button</a>s/<a href="output/Ext.Button.html" ext:cls="Ext.Button">Button</a> configs, describing a <a href="output/Ext.Toolbar.html" ext:cls="Ext.Toolbar">Toolbar</a> to
be rendered into this Panel's footer element.</p>

<p>After render, the <code>fbar</code> property will be an <a href="output/Ext.Toolbar.html" ext:cls="Ext.Toolbar">Toolbar</a>
instance.</p>

<p>If <code><a href="output/Ext.Panel.html#Ext.Panel-buttons" ext:member="buttons" ext:cls="Ext.Panel">buttons</a></code> are
specified, they will supersede the <code>fbar</code> configuration
property.</p>

The Panel's <code><a href="output/Ext.Panel.html#Ext.Panel-buttonAlign" ext:member="buttonAlign" ext:cls="Ext.Panel">buttonAlign</a></code>
configuration affects the layout of these items, for example: 

<pre><code><b>var</b> w = <b>new</b> Ext.Window({
    height: 250,
    width: 500,
    bbar: <b>new</b> Ext.Toolbar({
        items: [{
            text: <em>'bbar Left'</em>
        },<em>'-&gt;'</em>,{
            text: <em>'bbar Right'</em>
        }]
    }),
    <a href="output/Ext.Panel.html#Ext.Panel-buttonAlign" ext:member="buttonAlign" ext:cls="Ext.Panel">buttonAlign</a>: <em>'left'</em>, <i>// anything but <em>'center'</em> or <em>'right'</em> and you can use <em>'-'</em>, and <em>'-&gt;'</em></i>
                                  <i>// to control the alignment of fbar items</i>
    fbar: [{
        text: <em>'fbar Left'</em>
    },<em>'-&gt;'</em>,{
        text: <em>'fbar Right'</em>
    }]
}).show();</code>
</pre>

<p><b>Note:</b> Although a Toolbar may contain Field components,
these will <b>not</b> be updated by a load of an ancestor
FormPanel. A Panel's toolbars are not part of the standard
Container-&gt;Component hierarchy, and so are not scanned to
collect form items. However, the values <b>will</b> be submitted
because form submission parameters are collected from the DOM
tree.</p>
]]>
		</description>
		<name>fbar</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>The label text to display next to this Component (defaults to
'').</p>

<br>
<p><b>Note</b>: this config is only used when this Component is
rendered by a Container which has been configured to use the <b><a href="output/Ext.layout.FormLayout.html" ext:cls="Ext.layout.FormLayout">FormLayout</a></b> layout manager
(e.g. <a href="output/Ext.form.FormPanel.html" ext:cls="Ext.form.FormPanel">Ext.form.FormPanel</a> or specifying
<tt>layout:'form'</tt>).</p>

<br>
<p>Also see <tt><a href="output/Ext.Component.html#Ext.Component-hideLabel" ext:member="hideLabel" ext:cls="Ext.Component">hideLabel</a></tt>
and <a href="output/Ext.layout.FormLayout.html" ext:cls="Ext.layout.FormLayout">Ext.layout.FormLayout</a>.<a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-fieldTpl" ext:member="fieldTpl" ext:cls="Ext.layout.FormLayout">fieldTpl</a>.</p>

Example use:

<pre><code><b>new</b> Ext.FormPanel({
    height: 100,
    renderTo: Ext.getBody(),
    items: [{
        xtype: <em>'textfield'</em>,
        fieldLabel: <em>'Name'</em>
    }]
});</code>
</pre>
]]>
		</description>
		<name>fieldLabel</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<code>true</code> to create the footer elementexplicitly, false to skip creating it. The footer will be created
automatically if <code><a href="output/Ext.Panel.html#Ext.Panel-buttons" ext:member="buttons" ext:cls="Ext.Panel">buttons</a></code> or a <code><a href="output/Ext.Panel.html#Ext.Panel-fbar" ext:member="fbar" ext:cls="Ext.Panel">fbar</a></code> have been configured. See
<code><a href="output/Ext.Panel.html#Ext.Panel-bodyCfg" ext:member="bodyCfg" ext:cls="Ext.Panel">bodyCfg</a></code> for an
example.]]>
		</description>
		<name>footer</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>A <a href="output/Ext.DomHelper.html" ext:cls="Ext.DomHelper">DomHelper</a> element specification object
specifying the element structure of this Panel's <a href="output/Ext.Panel.html#Ext.Panel-footer" ext:member="footer" ext:cls="Ext.Panel">footer</a> Element. See <code><a href="output/Ext.Panel.html#Ext.Panel-bodyCfg" ext:member="bodyCfg" ext:cls="Ext.Panel">bodyCfg</a></code> also.</p>
]]>
		</description>
		<name>footerCfg</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[If true the container will force a layoutinitially even if hidden or collapsed. This option is useful for
forcing forms to render in collapsed or hidden containers.
(defaults to false).]]>
		</description>
		<name>forceLayout</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<code>true</code> to create the Panel's headerelement explicitly, <code>false</code> to skip creating it. If a
<code><a href="output/Ext.Panel.html#Ext.Panel-title" ext:member="title" ext:cls="Ext.Panel">title</a></code> is set the
header will be created automatically, otherwise it will not. If a
<code><a href="output/Ext.Panel.html#Ext.Panel-title" ext:member="title" ext:cls="Ext.Panel">title</a></code> is set but
<code>header</code> is explicitly set to <code>false</code>, the
header will not be rendered.]]>
		</description>
		<name>header</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<code>true</code> to display the panel <code><a href="output/Ext.Panel.html#Ext.Panel-title" ext:member="title" ext:cls="Ext.Panel">title</a></code> in the <code><a href="output/Ext.Panel.html#Ext.Panel-header" ext:member="header" ext:cls="Ext.Panel">header</a></code>, <code>false</code> to hideit (defaults to <code>true</code>).]]>
		</description>
		<name>headerAsText</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>A <a href="output/Ext.DomHelper.html" ext:cls="Ext.DomHelper">DomHelper</a> element specification object
specifying the element structure of this Panel's <a href="output/Ext.Panel.html#Ext.Panel-header" ext:member="header" ext:cls="Ext.Panel">header</a> Element. See <code><a href="output/Ext.Panel.html#Ext.Panel-bodyCfg" ext:member="bodyCfg" ext:cls="Ext.Panel">bodyCfg</a></code> also.</p>
]]>
		</description>
		<name>headerCfg</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[The height of this component in pixels (defaultsto auto). <b>Note</b> to express this dimension as a percentage or
offset see <a href="output/Ext.Component.html#Ext.Component-anchor" ext:member="anchor" ext:cls="Ext.Component">Ext.Component.anchor</a>.]]>
		</description>
		<name>height</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[Render this component hidden (default is<tt>true</tt>). If <tt>true</tt>, the <a href="output/Ext.Window.html#Ext.Window-hide" ext:member="hide" ext:cls="Ext.Window">hide</a> method will be called
internally.]]>
		</description>
		<name>hidden</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[True to hide the borders of each containedcomponent, false to defer to the component's existing border
settings (defaults to false).]]>
		</description>
		<name>hideBorders</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<code>true</code> to hide the expand/collapsetoggle button when <code><a href="output/Ext.Panel.html#Ext.Panel-collapsible" ext:member="collapsible" ext:cls="Ext.Panel">collapsible</a> ==
true</code>, <code>false</code> to display it (defaults to
<code>false</code>).]]>
		</description>
		<name>hideCollapseTool</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p><tt>true</tt> to completely hide the label element (<a href="output/Ext.Component.html#Ext.Component-fieldLabel" ext:member="fieldLabel" ext:cls="Ext.Component">label</a> and <a href="output/Ext.Component.html#Ext.Component-labelSeparator" ext:member="labelSeparator" ext:cls="Ext.Component">separator</a>).
Defaults to <tt>false</tt>. By default, even if you do not specify
a <tt><a href="output/Ext.Component.html#Ext.Component-fieldLabel" ext:member="fieldLabel" ext:cls="Ext.Component">fieldLabel</a></tt>
the space will still be reserved so that the field will line up
with other fields that do have labels. Setting this to
<tt>true</tt> will cause the field to not reserve that space.</p>

<br>
<p><b>Note</b>: see the note for <tt><a href="output/Ext.Component.html#Ext.Component-clearCls" ext:member="clearCls" ext:cls="Ext.Component">clearCls</a></tt>.</p>

<br>
Example use:

<pre><code><b>new</b> Ext.FormPanel({
    height: 100,
    renderTo: Ext.getBody(),
    items: [{
        xtype: <em>'textfield'</em>
        hideLabel: true
    }]
});</code>
</pre>
]]>
		</description>
		<name>hideLabel</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>How this component should be hidden. Supported values are
<tt>'visibility'</tt> (css visibility), <tt>'offsets'</tt>
(negative offset position) and <tt>'display'</tt> (css
display).</p>

<br>
<p><b>Note</b>: the default of <tt>'display'</tt> is generally
preferred since items are automatically laid out when they are
first shown (no sizing is done while hidden).</p>
]]>
		</description>
		<name>hideMode</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[True to hide and show the component's containerwhen hide/show is called on the component, false to hide and show
the component itself (defaults to false). For example, this can be
used as a shortcut for a hide button on a window by setting
hide:true on the button when adding it to its parent
container.]]>
		</description>
		<name>hideParent</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[An HTML fragment, or a <a href="output/Ext.DomHelper.html" ext:cls="Ext.DomHelper">DomHelper</a> specification to use as thepanel's body content (defaults to ''). The HTML content is added by
the Panel's <a href="output/Ext.Panel.html#Ext.Panel-afterRender" ext:member="afterRender" ext:cls="Ext.Panel">afterRender</a>
method, and so the document will not contain this HTML at the time
the <a href="output/Ext.Panel.html#Ext.Panel-render" ext:member="render" ext:cls="Ext.Panel">render</a> event is fired.
This content is inserted into the body <i>before</i> any configured
<a href="output/Ext.Panel.html#Ext.Panel-contentEl" ext:member="contentEl" ext:cls="Ext.Panel">contentEl</a> is
appended.]]>
		</description>
		<name>html</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[The CSS class selector that specifies abackground image to be used as the header icon (defaults to ''). 

<p>An example of specifying a custom icon class would be something
like:</p>

<pre><code><i>// specify the property <b>in</b> the config <b>for</b> the class:</i>
     ...
     iconCls: <em>'my-icon'</em>

<i>// css class that specifies background image to be used as the icon image:</i>
.my-icon { background-image: url(../images/my-icon.gif) 0 6px no-repeat !important; }</code>
</pre>
]]>
		</description>
		<name>iconCls</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>The <b>unique</b> id of this component (defaults to an <a href="output/Ext.Component.html#Ext.Component-getId" ext:member="getId" ext:cls="Ext.Component">auto-assigned id</a>).
You should assign an id if you need to be able to access the
component later and you do not have an object reference available
(e.g., using <a href="output/Ext.html" ext:cls="Ext">Ext</a>.<a href="output/Ext.html#Ext-getCmp" ext:member="getCmp" ext:cls="Ext">getCmp</a>).</p>

<p>Note that this id will also be used as the element id for the
containing HTML element that is rendered to the page for this
component. This allows you to write id-based CSS rules to style the
specific instance of this component uniquely, and also to select
sub-elements using this component's id as the parent.</p>

<p><b>Note</b>: to avoid complications imposed by a unique
<tt>id</tt> also see <code><a href="output/Ext.Component.html#Ext.Component-itemId" ext:member="itemId" ext:cls="Ext.Component">itemId</a></code> and
<code><a href="output/Ext.Component.html#Ext.Component-ref" ext:member="ref" ext:cls="Ext.Component">ref</a></code>.</p>

<p><b>Note</b>: to access the container of an item see <code><a href="output/Ext.Component.html#Ext.Component-ownerCt" ext:member="ownerCt" ext:cls="Ext.Component">ownerCt</a></code>.</p>
]]>
		</description>
		<name>id</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[True to hide the window until show() isexplicitly called (defaults to true).]]>
		</description>
		<name>initHidden</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p><b>Note</b>: this config is only used when this Component is
rendered by a Container which has been configured to use the <b><a href="output/Ext.layout.FormLayout.html" ext:cls="Ext.layout.FormLayout">FormLayout</a></b> layout manager
(e.g. <a href="output/Ext.form.FormPanel.html" ext:cls="Ext.form.FormPanel">Ext.form.FormPanel</a> or specifying
<tt>layout:'form'</tt>).</p>

<br>
<p>An additional CSS class to apply to the div wrapping the form
item element of this field. If supplied, <tt>itemCls</tt> at the
<b>field</b> level will override the default <tt>itemCls</tt>
supplied at the <b>container</b> level. The value specified for
<tt>itemCls</tt> will be added to the default class
(<tt>'x-form-item'</tt>).</p>

<p>Since it is applied to the item wrapper (see <a href="output/Ext.layout.FormLayout.html" ext:cls="Ext.layout.FormLayout">Ext.layout.FormLayout</a>.<a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-fieldTpl" ext:member="fieldTpl" ext:cls="Ext.layout.FormLayout">fieldTpl</a>), it allows you to
write standard CSS rules that can apply to the field, the label (if
specified), or any other element within the markup for the
field.</p>

<br>
<p><b>Note</b>: see the note for <tt><a href="output/Ext.Component.html#Ext.Component-fieldLabel" ext:member="fieldLabel" ext:cls="Ext.Component">fieldLabel</a></tt>.</p>

<br>
Example use:

<pre><code><i>// Apply a style to the field's <b>label</b>:</i>
&lt;style&gt;
    .required .x-form-item-<b>label</b> {font-weight:bold;color:red;}
&lt;/style&gt;

<b>new</b> Ext.FormPanel({
    height: 100,
    renderTo: Ext.getBody(),
    items: [{
        xtype: <em>'textfield'</em>,
        fieldLabel: <em>'Name'</em>,
        itemCls: <em>'required'</em> <i>//this <b>label</b> will be styled</i>
    },{
        xtype: <em>'textfield'</em>,
        fieldLabel: <em>'Favorite Color'</em>
    }]
});</code>
</pre>
]]>
		</description>
		<name>itemCls</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>An <tt>itemId</tt> can be used as an alternative way to get a
reference to a component when no object reference is available.
Instead of using an <code><a href="output/Ext.Component.html#Ext.Component-id" ext:member="id" ext:cls="Ext.Component">id</a></code> with <a href="output/Ext.html" ext:cls="Ext">Ext</a>.<a href="output/Ext.html#Ext-getCmp" ext:member="getCmp" ext:cls="Ext">getCmp</a>, use <code>itemId</code> with <a href="output/Ext.Container.html" ext:cls="Ext.Container">Ext.Container</a>.<a href="output/Ext.Container.html#Ext.Container-getComponent" ext:member="getComponent" ext:cls="Ext.Container">getComponent</a>
which will retrieve <code>itemId</code>'s or <tt><a href="output/Ext.Component.html#Ext.Component-id" ext:member="id" ext:cls="Ext.Component">id</a></tt>'s. Since <code>itemId</code>'s
are an index to the container's internal MixedCollection, the
<code>itemId</code> is scoped locally to the container -- avoiding
potential conflicts with <a href="output/Ext.ComponentMgr.html" ext:cls="Ext.ComponentMgr">Ext.ComponentMgr</a> which requires a
<b>unique</b> <code><a href="output/Ext.Component.html#Ext.Component-id" ext:member="id" ext:cls="Ext.Component">id</a></code>.</p>

<pre><code><b>var</b> c = <b>new</b> Ext.Panel({ <i>//</i>
    <a href="output/Ext.BoxComponent.html#Ext.BoxComponent-height" ext:member="height" ext:cls="Ext.BoxComponent">height</a>: 300,
    <a href="output/Ext.Component.html#Ext.Component-renderTo" ext:member="renderTo" ext:cls="Ext.Component">renderTo</a>: document.body,
    <a href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout" ext:cls="Ext.Container">layout</a>: <em>'auto'</em>,
    <a href="output/Ext.Container.html#Ext.Container-items" ext:member="items" ext:cls="Ext.Container">items</a>: [
        {
            itemId: <em>'p1'</em>,
            <a href="output/Ext.Panel.html#Ext.Panel-title" ext:member="title" ext:cls="Ext.Panel">title</a>: <em>'Panel 1'</em>,
            <a href="output/Ext.BoxComponent.html#Ext.BoxComponent-height" ext:member="height" ext:cls="Ext.BoxComponent">height</a>: 150
        },
        {
            itemId: <em>'p2'</em>,
            <a href="output/Ext.Panel.html#Ext.Panel-title" ext:member="title" ext:cls="Ext.Panel">title</a>: <em>'Panel 2'</em>,
            <a href="output/Ext.BoxComponent.html#Ext.BoxComponent-height" ext:member="height" ext:cls="Ext.BoxComponent">height</a>: 150
        }
    ]
})
p1 = c.<a href="output/Ext.Container.html#Ext.Container-getComponent" ext:member="getComponent" ext:cls="Ext.Container">getComponent</a>(<em>'p1'</em>); <i>// not the same as <a href="output/Ext.html#Ext-getCmp" ext:member="getCmp" ext:cls="Ext">Ext.getCmp()</a></i>
p2 = p1.<a href="output/Ext.Component.html#Ext.Component-ownerCt" ext:member="ownerCt" ext:cls="Ext.Component">ownerCt</a>.<a href="output/Ext.Container.html#Ext.Container-getComponent" ext:member="getComponent" ext:cls="Ext.Container">getComponent</a>(<em>'p2'</em>); <i>// reference via a sibling</i></code>
</pre>

<p>Also see <tt><a href="output/Ext.Component.html#Ext.Component-id" ext:member="id" ext:cls="Ext.Component">id</a></tt> and <code><a href="output/Ext.Component.html#Ext.Component-ref" ext:member="ref" ext:cls="Ext.Component">ref</a></code>.</p>

<p><b>Note</b>: to access the container of an item see <tt><a href="output/Ext.Component.html#Ext.Component-ownerCt" ext:member="ownerCt" ext:cls="Ext.Component">ownerCt</a></tt>.</p>
]]>
		</description>
		<name>itemId</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<pre><b>** IMPORTANT</b>: be sure to <b><a href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout" ext:cls="Ext.Container">specify a <code>layout</code></a> if needed ! **</b>
</pre>

<p>A single item, or an array of child Components to be added to
this container, for example:</p>

<pre><code><i>// specifying a single item
</i>
items: {...},
layout: <em>'fit'</em>,    <i>// specify a layout!
</i>

<i>// specifying multiple items
</i>
items: [{...}, {...}],
layout: <em>'anchor'</em>, <i>// specify a layout!</i></code>
</pre>

<p>Each item may be:</p>

<div>
<ul class="mdetail-params">
<li>any type of object based on <a href="output/Ext.Component.html" ext:cls="Ext.Component">Ext.Component</a></li>

<li>a fully instanciated object or</li>

<li>an object literal that:</li>

<li style="list-style-type: none; list-style-image: none; list-style-position: outside;">
<div>
<ul class="mdetail-params">
<li>has a specified <code><a href="output/Ext.Component.html#Ext.Component-xtype" ext:member="xtype" ext:cls="Ext.Component">xtype</a></code></li>

<li>the <a href="output/Ext.Component.html#Ext.Component-xtype" ext:member="xtype" ext:cls="Ext.Component">Ext.Component.xtype</a>
specified is associated with the Component desired and should be
chosen from one of the available xtypes as listed in <a href="output/Ext.Component.html" ext:cls="Ext.Component">Ext.Component</a>.</li>

<li>If an <code><a href="output/Ext.Component.html#Ext.Component-xtype" ext:member="xtype" ext:cls="Ext.Component">xtype</a></code> is not
explicitly specified, the <a href="output/Ext.Container.html#Ext.Container-defaultType" ext:member="defaultType" ext:cls="Ext.Container">defaultType</a>
for that Container is used.</li>

<li>will be "lazily instanciated", avoiding the overhead of
constructing a fully instanciated Component object</li>
</ul>
</div>
</li>
</ul>
</div>

<p><b>Notes</b>:</p>

<div>
<ul class="mdetail-params">
<li>Ext uses lazy rendering. Child Components will only be rendered
should it become necessary. Items are automatically laid out when
they are first shown (no sizing is done while hidden), or in
response to a <a href="output/Ext.Container.html#Ext.Container-doLayout" ext:member="doLayout" ext:cls="Ext.Container">doLayout</a>
call.</li>

<li>Do not specify <code><a href="output/Ext.Panel.html#Ext.Panel-contentEl" ext:member="contentEl" ext:cls="Ext.Panel">contentEl</a></code>/
<code><a href="output/Ext.Panel.html#Ext.Panel-html" ext:member="html" ext:cls="Ext.Panel">html</a></code> with
<code>items</code>.</li>
</ul>
</div>
]]>
		</description>
		<name>items</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[A <a href="output/Ext.KeyMap.html" ext:cls="Ext.KeyMap">Ext.KeyMap</a> config object (in the formatexpected by <a href="output/Ext.KeyMap.html#Ext.KeyMap-addBinding" ext:member="addBinding" ext:cls="Ext.KeyMap">Ext.KeyMap.addBinding</a> used to assign
custom key handling to this panel (defaults to
<code>null</code>).]]>
		</description>
		<name>keys</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>The separator to display after the text of each <tt><a href="output/Ext.Component.html#Ext.Component-fieldLabel" ext:member="fieldLabel" ext:cls="Ext.Component">fieldLabel</a></tt>. This property may be
configured at various levels. The order of precedence is:</p>

<div class="mdetail-params">
<ul>
<li>field / component level</li>

<li>container level</li>

<li><a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-labelSeparator" ext:member="labelSeparator" ext:cls="Ext.layout.FormLayout">layout
level</a> (defaults to colon <tt>':'</tt>)</li>
</ul>
</div>

To display no separator for this field's label specify empty string
''.<br>
<br>
<br>
<p><b>Note</b>: see the note for <tt><a href="output/Ext.Component.html#Ext.Component-clearCls" ext:member="clearCls" ext:cls="Ext.Component">clearCls</a></tt>.</p>

<br>
<p>Also see <tt><a href="output/Ext.Component.html#Ext.Component-hideLabel" ext:member="hideLabel" ext:cls="Ext.Component">hideLabel</a></tt>
and <a href="output/Ext.layout.FormLayout.html" ext:cls="Ext.layout.FormLayout">Ext.layout.FormLayout</a>.<a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-fieldTpl" ext:member="fieldTpl" ext:cls="Ext.layout.FormLayout">fieldTpl</a>.</p>

Example use:

<pre><code><b>new</b> Ext.FormPanel({
    height: 100,
    renderTo: Ext.getBody(),
    layoutConfig: {
        labelSeparator: <em>'~'</em>   <i>// layout config has lowest priority (defaults to <em>':'</em>)</i>
    },
    <a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-labelSeparator" ext:member="labelSeparator" ext:cls="Ext.layout.FormLayout">labelSeparator</a>: <em>'&gt;&gt;'</em>,     <i>// config at container level</i>
    items: [{
        xtype: <em>'textfield'</em>,
        fieldLabel: <em>'Field 1'</em>,
        labelSeparator: <em>'...'</em> <i>// field/component level config supersedes others</i>
    },{
        xtype: <em>'textfield'</em>,
        fieldLabel: <em>'Field 2'</em> <i>// labelSeparator will be <em>'='</em></i>
    }]
});</code>
</pre>
]]>
		</description>
		<name>labelSeparator</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>A CSS style specification string to apply directly to this
field's label. Defaults to the container's labelStyle value if set
(e.g., <tt><a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-labelStyle" ext:member="labelStyle" ext:cls="Ext.layout.FormLayout">Ext.layout.FormLayout.labelStyle</a></tt>
, or '').</p>

<br>
<p><b>Note</b>: see the note for <code><a href="output/Ext.Component.html#Ext.Component-clearCls" ext:member="clearCls" ext:cls="Ext.Component">clearCls</a></code>.</p>

<br>
<p>Also see <code><a href="output/Ext.Component.html#Ext.Component-hideLabel" ext:member="hideLabel" ext:cls="Ext.Component">hideLabel</a></code>
and <code><a href="output/Ext.layout.FormLayout.html" ext:cls="Ext.layout.FormLayout">Ext.layout.FormLayout</a>.<a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-fieldTpl" ext:member="fieldTpl" ext:cls="Ext.layout.FormLayout">fieldTpl</a>.</code></p>

Example use:

<pre><code><b>new</b> Ext.FormPanel({
    height: 100,
    renderTo: Ext.getBody(),
    items: [{
        xtype: <em>'textfield'</em>,
        fieldLabel: <em>'Name'</em>,
        labelStyle: <em>'font-weight:bold;'</em>
    }]
});</code>
</pre>
]]>
		</description>
		<name>labelStyle</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p><b>*Important</b>: In order for child items to be correctly
sized and positioned, typically a layout manager <b>must</b> be
specified through the <code>layout</code> configuration option.</p>

<br>
<p>The sizing and positioning of child <a href="output/items.html" ext:cls="items">items</a> is the responsibility of the Container's
layout manager which creates and manages the type of layout you
have in mind. For example:</p>

<pre><code><b>new</b> Ext.Window({
    width:300, height: 300,
    layout: <em>'fit'</em>, <i>// explicitly set layout manager: override the <b>default</b> (layout:<em>'auto'</em>)
</i>
    items: [{
        title: <em>'Panel inside a Window'</em>
    }]
}).show();</code>
</pre>

<p>If the <a href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout" ext:cls="Ext.Container">layout</a>
configuration is not explicitly specified for a general purpose
container (e.g. Container or Panel) the <a href="output/Ext.layout.ContainerLayout.html" ext:cls="Ext.layout.ContainerLayout">default layout manager</a>
will be used which does nothing but render child components
sequentially into the Container (no sizing or positioning will be
performed in this situation). Some container classes implicitly
specify a default layout (e.g. FormPanel specifies
<code>layout:<em>'form'</em></code>). Other specific purpose
classes internally specify/manage their internal layout (e.g.
GridPanel, TabPanel, TreePanel, Toolbar, Menu, etc.).</p>

<br>
<p><b><code>layout</code></b> may be specified as either as an
Object or as a String:</p>

<div>
<ul class="mdetail-params">
<li><u>Specify as an Object</u></li>

<li style="list-style-type: none; list-style-image: none; list-style-position: outside;">
<div>
<ul class="mdetail-params">
<li>Example usage:</li>

<li style="list-style-type: none; list-style-image: none; list-style-position: outside;">
<pre><code>layout: {
    type: <em>'vbox'</em>,
    padding: <em>'5'</em>,
    align: <em>'left'</em>
}</code>
</pre>
</li>

<li><tt><b>type</b></tt></li>

<li style="list-style-type: none; list-style-image: none; list-style-position: outside;"><br>
<p>The layout type to be used for this container. If not specified,
a default <a href="output/Ext.layout.ContainerLayout.html" ext:cls="Ext.layout.ContainerLayout">Ext.layout.ContainerLayout</a>
will be created and used.</p>

<br>
<p>Valid layout <tt>type</tt> values are:</p>

<div class="sub-desc">
<ul class="mdetail-params">
<li><tt><b><a href="output/Ext.layout.AbsoluteLayout.html" ext:cls="Ext.layout.AbsoluteLayout">absolute</a></b></tt></li>

<li><tt><b><a href="output/Ext.layout.AccordionLayout.html" ext:cls="Ext.layout.AccordionLayout">accordion</a></b></tt></li>

<li><tt><b><a href="output/Ext.layout.AnchorLayout.html" ext:cls="Ext.layout.AnchorLayout">anchor</a></b></tt></li>

<li><tt><b><a href="output/Ext.layout.ContainerLayout.html" ext:cls="Ext.layout.ContainerLayout">auto</a></b></tt>
&nbsp;&nbsp;&nbsp; <b>Default</b></li>

<li><tt><b><a href="output/Ext.layout.BorderLayout.html" ext:cls="Ext.layout.BorderLayout">border</a></b></tt></li>

<li><tt><b><a href="output/Ext.layout.CardLayout.html" ext:cls="Ext.layout.CardLayout">card</a></b></tt></li>

<li><tt><b><a href="output/Ext.layout.ColumnLayout.html" ext:cls="Ext.layout.ColumnLayout">column</a></b></tt></li>

<li><tt><b><a href="output/Ext.layout.FitLayout.html" ext:cls="Ext.layout.FitLayout">fit</a></b></tt></li>

<li><tt><b><a href="output/Ext.layout.FormLayout.html" ext:cls="Ext.layout.FormLayout">form</a></b></tt></li>

<li><tt><b><a href="output/Ext.layout.HBoxLayout.html" ext:cls="Ext.layout.HBoxLayout">hbox</a></b></tt></li>

<li><tt><b><a href="output/Ext.layout.MenuLayout.html" ext:cls="Ext.layout.MenuLayout">menu</a></b></tt></li>

<li><tt><b><a href="output/Ext.layout.TableLayout.html" ext:cls="Ext.layout.TableLayout">table</a></b></tt></li>

<li><tt><b><a href="output/Ext.layout.ToolbarLayout.html" ext:cls="Ext.layout.ToolbarLayout">toolbar</a></b></tt></li>

<li><tt><b><a href="output/Ext.layout.VBoxLayout.html" ext:cls="Ext.layout.VBoxLayout">vbox</a></b></tt></li>
</ul>
</div>
</li>

<li>Layout specific configuration properties</li>

<li style="list-style-type: none; list-style-image: none; list-style-position: outside;"><br>
<p>Additional layout specific configuration properties may also be
specified. For complete details regarding the valid config options
for each layout type, see the layout class corresponding to the
<tt>type</tt> specified.</p>
</li>
</ul>
</div>
</li>

<li><u>Specify as a String</u></li>

<li style="list-style-type: none; list-style-image: none; list-style-position: outside;">
<div>
<ul class="mdetail-params">
<li>Example usage:</li>

<li style="list-style-type: none; list-style-image: none; list-style-position: outside;">
<pre><code>layout: <em>'vbox'</em>,
layoutConfig: {
    padding: <em>'5'</em>,
    align: <em>'left'</em>
}</code>
</pre>
</li>

<li><tt><b>layout</b></tt></li>

<li style="list-style-type: none; list-style-image: none; list-style-position: outside;"><br>
<p>The layout <tt>type</tt> to be used for this container (see list
of valid layout type values above).</p>

<br>
</li>

<li><tt><b><a href="output/Ext.Container.html#Ext.Container-layoutConfig" ext:member="layoutConfig" ext:cls="Ext.Container">layoutConfig</a></b></tt></li>

<li style="list-style-type: none; list-style-image: none; list-style-position: outside;"><br>
<p>Additional layout specific configuration properties. For
complete details regarding the valid config options for each layout
type, see the layout class corresponding to the <tt>layout</tt>
specified.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
]]>
		</description>
		<name>layout</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[This is a config object containing propertiesspecific to the chosen <b><code><a href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout" ext:cls="Ext.Container">layout</a></code></b>
if <b><code><a href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout" ext:cls="Ext.Container">layout</a></code></b>
has been specified as a <i>string</i>.<br>
<br>
]]>
		</description>
		<name>layoutConfig</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>A config object containing one or more event handlers to be
added to this object during initialization. This should be a valid
listeners config object as specified in the <a href="output/Ext.util.Observable.html#Ext.util.Observable-addListener" ext:member="addListener" ext:cls="Ext.util.Observable">addListener</a> example for attaching
multiple handlers at once.</p>

<br>
<p><b><u>DOM events from ExtJs <a href="output/Ext.Component.html" ext:cls="Ext.Component">Components</a></u></b></p>

<br>
<p>While <i>some</i> ExtJs Component classes export selected DOM
events (e.g. "click", "mouseover" etc), this is usually only done
when extra value can be added. For example the <a href="output/Ext.DataView.html" ext:cls="Ext.DataView">DataView</a>'s <b><code><a href="output/Ext.DataView.html#Ext.DataView-click" ext:member="click" ext:cls="Ext.DataView">click</a></code></b>
event passing the node clicked on. To access DOM events directly
from a Component's HTMLElement, listeners must be added to the
<i><a href="output/Ext.Component.html#Ext.Component-getEl" ext:member="getEl" ext:cls="Ext.Component">Element</a></i> after
the Component has been rendered. A plugin can simplify this
step:</p>

<pre><code><i>// Plugin is configured <b>with</b> a listeners config object.</i>
<i>// The Component is appended to the argument list of all handler functions.</i>
Ext.DomObserver = Ext.extend(Object, {
    constructor: <b>function</b>(config) {
        this.listeners = config.listeners ? config.listeners : config;
    },

    <i>// Component passes itself into plugin's init method</i>
    init: <b>function</b>(c) {
        <b>var</b> p, l = this.listeners;
        <b>for</b> (p <b>in</b> l) {
            <b>if</b> (Ext.isFunction(l[p])) {
                l[p] = this.createHandler(l[p], c);
            } <b>else</b> {
                l[p].fn = this.createHandler(l[p].fn, c);
            }
        }

        <i>// Add the listeners to the Element immediately following the render call</i>
        c.render = c.render.<a href="output/Function.html#Function-createSequence" ext:member="createSequence" ext:cls="Function">createSequence</a>(<b>function</b>() {
            <b>var</b> e = c.getEl();
            <b>if</b> (e) {
                e.on(l);
            }
        });
    },

    createHandler: <b>function</b>(fn, c) {
        <b>return</b> <b>function</b>(e) {
            fn.call(this, e, c);
        };
    }
});

<b>var</b> combo = <b>new</b> Ext.form.ComboBox({

    <i>// Collapse combo when its element is clicked on</i>
    plugins: [ <b>new</b> Ext.DomObserver({
        click: <b>function</b>(evt, comp) {
            comp.collapse();
        }
    })],
    store: myStore,
    typeAhead: true,
    mode: <em>'local'</em>,
    triggerAction: <em>'all'</em>
});</code>
</pre>

<br>
<br>
]]>
		</description>
		<name>listeners</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[A reference to the WindowGroup that shouldmanage this window (defaults to <a href="output/Ext.WindowMgr.html" ext:cls="Ext.WindowMgr">Ext.WindowMgr</a>).]]>
		</description>
		<name>manager</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p><b>Note</b>: this config is only used when this BoxComponent is
rendered by a Container which has been configured to use the <b><a href="output/Ext.layout.BorderLayout.html" ext:cls="Ext.layout.BorderLayout">BorderLayout</a></b> or one of
the two <b><a href="output/Ext.layout.BoxLayout.html" ext:cls="Ext.layout.BoxLayout">BoxLayout</a> subclasses.</b></p>

<p>An object containing margins to apply to this BoxComponent in
the format:</p>

<pre><code>{
    top: (top margin),
    right: (right margin),
    bottom: (bottom margin),
    left: (left margin)
}</code>
</pre>

<p>May also be a string containing space-separated, numeric margin
values. The order of the sides associated with each value matches
the way CSS processes margin values:</p>

<div class="mdetail-params">
<ul>
<li>If there is only one value, it applies to all sides.</li>

<li>If there are two values, the top and bottom borders are set to
the first value and the right and left are set to the second.</li>

<li>If there are three values, the top is set to the first value,
the left and right are set to the second, and the bottom is set to
the third.</li>

<li>If there are four values, they apply to the top, right, bottom,
and left, respectively.</li>
</ul>
</div>

<br>
<br>
 

<p>Defaults to:</p>

<pre><code>{top:0, right:0, bottom:0, left:0}</code>
</pre>
]]>
		</description>
		<name>margins</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<code>true</code> to mask the panel when it is <a href="output/Ext.Panel.html#Ext.Panel-disabled" ext:member="disabled" ext:cls="Ext.Panel">disabled</a>,<code>false</code> to not mask it (defaults to <code>true</code>).
Either way, the panel will always tell its contained elements to
disable themselves when it is disabled, but masking the panel can
provide an additional visual cue that the panel is disabled.]]>
		</description>
		<name>maskDisabled</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[True to display the 'maximize' tool button andallow the user to maximize the window, false to hide the button and
disallow maximizing the window (defaults to false). Note that when
a window is maximized, the tool button will automatically change to
a 'restore' button with the appropriate behavior already built-in
that will restore the window to its previous size.]]>
		</description>
		<name>maximizable</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[True to initially display the window in amaximized state. (Defaults to false).]]>
		</description>
		<name>maximized</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[Minimum width in pixels of all <a href="output/Ext.Panel.html#Ext.Panel-buttons" ext:member="buttons" ext:cls="Ext.Panel">buttons</a> in this panel (defaults to<code>75</code>)]]>
		</description>
		<name>minButtonWidth</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[The minimum height in pixels allowed for thiswindow (defaults to 100). Only applies when resizable = true.]]>
		</description>
		<name>minHeight</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[The minimum width in pixels allowed for thiswindow (defaults to 200). Only applies when resizable = true.]]>
		</description>
		<name>minWidth</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[True to display the 'minimize' tool button andallow the user to minimize the window, false to hide the button and
disallow minimizing the window (defaults to false). Note that this
button provides no implementation -- the behavior of minimizing a
window is implementation-specific, so the minimize event must be
handled and a custom minimize behavior implemented for this option
to be useful.]]>
		</description>
		<name>minimizable</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[True to make the window modal and mask everythingbehind it when displayed, false to display it without restricting
access to other UI elements (defaults to false).]]>
		</description>
		<name>modal</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[Allows override of the built-in processing forthe escape key. Default action is to close the Window (performing
whatever action is specified in <a href="output/Ext.Window.html#Ext.Window-closeAction" ext:member="closeAction" ext:cls="Ext.Window">closeAction</a>. To
prevent the Window closing when the escape key is pressed, specify
this as Ext.emptyFn (See <a href="output/Ext.html#Ext-emptyFn" ext:member="emptyFn" ext:cls="Ext">Ext.emptyFn</a>).]]>
		</description>
		<name>onEsc</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[An optional extra CSS class that will be added tothis component's Element when the mouse moves over the Element, and
removed when the mouse moves out. (defaults to ''). This can be
useful for adding customized 'active' or 'hover' styles to the
component or any of its children using standard CSS rules.]]>
		</description>
		<name>overCls</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[The page level x coordinate for this componentif contained within a positioning container.]]>
		</description>
		<name>pageX</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[The page level y coordinate for this componentif contained within a positioning container.]]>
		</description>
		<name>pageY</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[True to render the window body with a transparentbackground so that it will blend into the framing elements, false
to add a lighter background color to visually highlight the body
element and separate it more distinctly from the surrounding frame
(defaults to false).]]>
		</description>
		<name>plain</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[An object or array of objects that will providecustom functionality for this component. The only requirement for a
valid plugin is that it contain an init method that accepts a
reference of type Ext.Component. When a component is created, if
any plugins are available, the component will call the init method
on each plugin, passing a reference to itself. Each plugin can then
call methods or respond to events on the component as needed to
provide its functionality.]]>
		</description>
		<name>plugins</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[Defaults to <code>false</code>. When set to<code>true</code>, an extra css class
<code><em>'x-panel-normal'</em></code> will be added to the panel's
element, effectively applying css styles suggested by the W3C (see
http://www.w3.org/TR/CSS21/sample.html) to the Panel's <b>body</b>
element (not the header, footer, etc.).]]>
		</description>
		<name>preventBodyReset</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[The registered <tt>ptype</tt> to create. Thisconfig option is not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a Plugin is being specified not as
a fully instantiated Component, but as a <i>Component config
object</i>. The <tt>ptype</tt> will be looked up at render time up
to determine what type of Plugin to create.<br>
<br>
If you create your own Plugins, you may register them using <a href="output/Ext.ComponentMgr.html#Ext.ComponentMgr-registerPlugin" ext:member="registerPlugin" ext:cls="Ext.ComponentMgr">Ext.ComponentMgr.registerPlugin</a> in
order to be able to take advantage of lazy instantiation and
rendering.]]>
		</description>
		<name>ptype</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>A path specification, relative to the Component's <a href="output/Ext.Component.html#Ext.Component-ownerCt" ext:member="ownerCt" ext:cls="Ext.Component">ownerCt</a> specifying
into which ancestor Container to place a named reference to this
Component.</p>

<p>The ancestor axis can be traversed by using '/' characters in
the path. For example, to put a reference to a Toolbar Button into
<i>the Panel which owns the Toolbar</i>:</p>

<pre><code><b>var</b> myGrid = <b>new</b> Ext.grid.EditorGridPanel({
    title: <em>'My EditorGridPanel'</em>,
    store: myStore,
    colModel: myColModel,
    tbar: [{
        text: <em>'Save'</em>,
        handler: saveChanges,
        disabled: true,
        ref: <em>'../saveButton'</em>
    }],
    listeners: {
        afteredit: <b>function</b>() {
<i>//          The button reference is <b>in</b> the GridPanel</i>
            myGrid.saveButton.enable();
        }
    }
});</code>
</pre>

<p>In the code above, if the ref had been
<code><em>'saveButton'</em></code> the reference would have been
placed into the Toolbar. Each '/' in the ref moves up one level
from the Component's <a href="output/Ext.Component.html#Ext.Component-ownerCt" ext:member="ownerCt" ext:cls="Ext.Component">ownerCt</a>.</p>
]]>
		</description>
		<name>ref</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p><b>Note</b>: this config is only used when this BoxComponent is
rendered by a Container which has been configured to use the <b><a href="output/Ext.layout.BorderLayout.html" ext:cls="Ext.layout.BorderLayout">BorderLayout</a></b> layout
manager (e.g. specifying <tt>layout:'border'</tt>).</p>

<br>
<p>See <a href="output/Ext.layout.BorderLayout.html" ext:cls="Ext.layout.BorderLayout">Ext.layout.BorderLayout</a>
also.</p>
]]>
		</description>
		<name>region</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>Specify the id of the element, a DOM element or an existing
Element that this component will be rendered into.</p>

<div>
<ul>
<li><b>Notes</b> : 

<div style="margin-left: 2em;">
<div class="sub-desc">Do <u>not</u> use this option if the
Component is to be a child item of a <a href="output/Ext.Container.html" ext:cls="Ext.Container">Container</a>. It is the responsibility of
the <a href="output/Ext.Container.html" ext:cls="Ext.Container">Container</a>'s <a href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout" ext:cls="Ext.Container">layout manager</a> to
render and manage its child items.</div>

<div class="sub-desc">When using this config, a call to render() is
not required.</div>
</div>
</li>
</ul>
</div>

<p>See <tt><a href="output/Ext.Component.html#Ext.Component-render" ext:member="render" ext:cls="Ext.Component">render</a></tt>
also.</p>
]]>
		</description>
		<name>renderTo</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[True to allow user resizing at each edge andcorner of the window, false to disable resizing (defaults to
true).]]>
		</description>
		<name>resizable</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[The event to listen to for resizing in layouts.Defaults to <tt>'bodyresize'</tt>.]]>
		</description>
		<name>resizeEvent</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[A valid <a href="output/Ext.Resizable.html" ext:cls="Ext.Resizable">Ext.Resizable</a> handles config string(defaults to 'all'). Only applies when resizable = true.]]>
		</description>
		<name>resizeHandles</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<code>true</code> (or a valid Ext.Shadow <a href="output/Ext.Shadow.html#Ext.Shadow-mode" ext:member="mode" ext:cls="Ext.Shadow">Ext.Shadow.mode</a> value) to display a shadowbehind the panel, <code>false</code> to display no shadow (defaults
to <code><em>'sides'</em></code>). Note that this option only
applies when <code><a href="output/Ext.Panel.html#Ext.Panel-floating" ext:member="floating" ext:cls="Ext.Panel">floating</a> =
true</code>.]]>
		</description>
		<name>shadow</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[The number of pixels to offset the shadow ifdisplayed (defaults to <code>4</code>). Note that this option only
applies when <code><a href="output/Ext.Panel.html#Ext.Panel-floating" ext:member="floating" ext:cls="Ext.Panel">floating</a> =
true</code>.]]>
		</description>
		<name>shadowOffset</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<code>false</code> to disable the iframe shim inbrowsers which need one (defaults to <code>true</code>). Note that
this option only applies when <code><a href="output/Ext.Panel.html#Ext.Panel-floating" ext:member="floating" ext:cls="Ext.Panel">floating</a> =
true</code>.]]>
		</description>
		<name>shim</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>An array of events that, when fired, should trigger this
component to save its state (defaults to none).
<code>stateEvents</code> may be any type of event supported by this
component, including browser or custom events (e.g., <tt>['click',
'customerchange']</tt>).</p>

<p>See <code><a href="output/Ext.Component.html#Ext.Component-stateful" ext:member="stateful" ext:cls="Ext.Component">stateful</a></code>
for an explanation of saving and restoring Component state.</p>
]]>
		</description>
		<name>stateEvents</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[The unique id for this component to use for statemanagement purposes (defaults to the component id if one was set,
otherwise null if the component is using a generated id). 

<p>See <code><a href="output/Ext.Component.html#Ext.Component-stateful" ext:member="stateful" ext:cls="Ext.Component">stateful</a></code>
for an explanation of saving and restoring Component state.</p>
]]>
		</description>
		<name>stateId</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>A flag which causes the Component to attempt to restore the
state of internal properties from a saved state on startup. The
component must have either a <code><a href="output/Ext.Component.html#Ext.Component-stateId" ext:member="stateId" ext:cls="Ext.Component">stateId</a></code> or
<code><a href="output/Ext.Component.html#Ext.Component-id" ext:member="id" ext:cls="Ext.Component">id</a></code> assigned for
state to be managed. Auto-generated ids are not guaranteed to be
stable across page loads and cannot be relied upon to save and
restore the same state for a component.</p>

<p>For state saving to work, the state manager's provider must have
been set to an implementation of <a href="output/Ext.state.Provider.html" ext:cls="Ext.state.Provider">Ext.state.Provider</a> which overrides
the <a href="output/Ext.state.Provider.html#Ext.state.Provider-set" ext:member="set" ext:cls="Ext.state.Provider">set</a> and <a href="output/Ext.state.Provider.html#Ext.state.Provider-get" ext:member="get" ext:cls="Ext.state.Provider">get</a> methods to
save and recall name/value pairs. A built-in implementation, <a href="output/Ext.state.CookieProvider.html" ext:cls="Ext.state.CookieProvider">Ext.state.CookieProvider</a> is
available.</p>

<p>To set the state provider for the current page:</p>

<pre><code>Ext.state.Manager.setProvider(<b>new</b> Ext.state.CookieProvider({
    expires: <b>new</b> Date(<b>new</b> Date().getTime()+(1000*60*60*24*7)), <i>//7 days from now</i>
}));</code>
</pre>

<p>A stateful Component attempts to save state when one of the
events listed in the <code><a href="output/Ext.Component.html#Ext.Component-stateEvents" ext:member="stateEvents" ext:cls="Ext.Component">stateEvents</a></code> configuration
fires.</p>

<p>To save state, a stateful Component first serializes its state
by calling <b><code>getState</code></b>. By default, this function
does nothing. The developer must provide an implementation which
returns an object hash which represents the Component's restorable
state.</p>

<p>The value yielded by getState is passed to <a href="output/Ext.state.Manager.html#Ext.state.Manager-set" ext:member="set" ext:cls="Ext.state.Manager">Ext.state.Manager.set</a> which uses
the configured <a href="output/Ext.state.Provider.html" ext:cls="Ext.state.Provider">Ext.state.Provider</a> to save the
object keyed by the Component's <code><a href="output/stateId.html" ext:cls="stateId">stateId</a></code>, or, if that is not specified,
its <code><a href="output/Ext.Component.html#Ext.Component-id" ext:member="id" ext:cls="Ext.Component">id</a></code>.</p>

<p>During construction, a stateful Component attempts to
<i>restore</i> its state by calling <a href="output/Ext.state.Manager.html#Ext.state.Manager-get" ext:member="get" ext:cls="Ext.state.Manager">Ext.state.Manager.get</a> passing the
<code><a href="output/Ext.Component.html#Ext.Component-stateId" ext:member="stateId" ext:cls="Ext.Component">stateId</a></code>,
or, if that is not specified, the <code><a href="output/Ext.Component.html#Ext.Component-id" ext:member="id" ext:cls="Ext.Component">id</a></code>.</p>

<p>The resulting object is passed to
<b><code>applyState</code></b>. The default implementation of
<code>applyState</code> simply copies properties into the object,
but a developer may override this to support more behaviour.</p>

<p>You can perform extra processing on state save and restore by
attaching handlers to the <a href="output/Ext.Component.html#Ext.Component-beforestaterestore" ext:member="beforestaterestore" ext:cls="Ext.Component">beforestaterestore</a>, <a href="output/Ext.Component.html#Ext.Component-staterestore" ext:member="staterestore" ext:cls="Ext.Component">staterestore</a>,
<a href="output/Ext.Component.html#Ext.Component-beforestatesave" ext:member="beforestatesave" ext:cls="Ext.Component">beforestatesave</a> and <a href="output/Ext.Component.html#Ext.Component-statesave" ext:member="statesave" ext:cls="Ext.Component">statesave</a>
events.</p>
]]>
		</description>
		<name>stateful</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[A custom style specification to be applied tothis component's Element. Should be a valid argument to <a href="output/Ext.Element.html#Ext.Element-applyStyles" ext:member="applyStyles" ext:cls="Ext.Element">Ext.Element.applyStyles</a>. 

<pre><code><b>new</b> Ext.Panel({
    title: <em>'Some Title'</em>,
    renderTo: Ext.getBody(),
    width: 400, height: 300,
    layout: <em>'form'</em>,
    items: [{
        xtype: <em>'textarea'</em>,
        style: {
            width: <em>'95%'</em>,
            marginBottom: <em>'10px'</em>
        }
    },
        <b>new</b> Ext.Button({
            text: <em>'Send'</em>,
            minWidth: <em>'100'</em>,
            style: {
                marginBottom: <em>'10px'</em>
            }
        })
    ]
});</code>
</pre>
]]>
		</description>
		<name>style</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p><b>Note</b>: this config is only used when this BoxComponent is
a child item of a TabPanel.</p>

A string to be used as innerHTML (html tags are accepted) to show
in a tooltip when mousing over the associated tab selector element.
<a href="output/Ext.QuickTips.html" ext:cls="Ext.QuickTips">Ext.QuickTips</a>.init() must be called in
order for the tips to render.]]>
		</description>
		<name>tabTip</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>The top toolbar of the panel. This can be a <a href="output/Ext.Toolbar.html" ext:cls="Ext.Toolbar">Ext.Toolbar</a> object, a toolbar config, or
an array of buttons/button configs to be added to the toolbar. Note
that this is not available as a property after render. To access
the top toolbar after render, use <a href="output/Ext.Panel.html#Ext.Panel-getTopToolbar" ext:member="getTopToolbar" ext:cls="Ext.Panel">getTopToolbar</a>.</p>

<p><b>Note:</b> Although a Toolbar may contain Field components,
these will <b>not</b> be updated by a load of an ancestor
FormPanel. A Panel's toolbars are not part of the standard
Container-&gt;Component hierarchy, and so are not scanned to
collect form items. However, the values <b>will</b> be submitted
because form submission parameters are collected from the DOM
tree.</p>
]]>
		</description>
		<name>tbar</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>A <a href="output/Ext.DomHelper.html" ext:cls="Ext.DomHelper">DomHelper</a> element specification object
specifying the element structure of this Panel's <a href="output/Ext.Panel.html#Ext.Panel-tbar" ext:member="tbar" ext:cls="Ext.Panel">tbar</a> Element. See <code><a href="output/Ext.Panel.html#Ext.Panel-bodyCfg" ext:member="bodyCfg" ext:cls="Ext.Panel">bodyCfg</a></code> also.</p>
]]>
		</description>
		<name>tbarCfg</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[The title text to be used as innerHTML (html tagsare accepted) to display in the panel <code><a href="output/Ext.Panel.html#Ext.Panel-header" ext:member="header" ext:cls="Ext.Panel">header</a></code> (defaults to ''). When a
<code>title</code> is specified the <code><a href="output/Ext.Panel.html#Ext.Panel-header" ext:member="header" ext:cls="Ext.Panel">header</a></code> element will automatically be
created and displayed unless <a href="output/Ext.Panel.html#Ext.Panel-header" ext:member="header" ext:cls="Ext.Panel">header</a> is explicitly set to
<code>false</code>. If you do not want to specify a
<code>title</code> at config time, but you may want one later, you
must either specify a non-empty <code>title</code> (a blank space '
' will do) or <code>header:true</code> so that the container
element will get created.]]>
		</description>
		<name>title</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<code>true</code> to allow expanding andcollapsing the panel (when <code><a href="output/Ext.Panel.html#Ext.Panel-collapsible" ext:member="collapsible" ext:cls="Ext.Panel">collapsible</a> =
true</code>) by clicking anywhere in the header bar,
<code>false</code>) to allow it only by clicking to tool button
(defaults to <code>false</code>)). If this panel is a child item of
a border layout also see the <a href="output/Ext.layout.BorderLayout.Region.html" ext:cls="Ext.layout.BorderLayout.Region">BorderLayout.Region</a>
<code><a href="output/Ext.layout.BorderLayout.Region.html#Ext.layout.BorderLayout.Region-floatable" ext:member="floatable" ext:cls="Ext.layout.BorderLayout.Region">floatable</a></code>
config option.]]>
		</description>
		<name>titleCollapse</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[<p>A Template used to create <a href="output/Ext.Panel.html#Ext.Panel-tools" ext:member="tools" ext:cls="Ext.Panel">tools</a> in the <a href="output/Ext.Panel.html#Ext.Panel-header" ext:member="header" ext:cls="Ext.Panel">header</a> Element. Defaults to:</p>

<pre><code><b>new</b> Ext.Template(<em>'&lt;div class=</em>"x-tool x-tool-{id}"</code>&gt;&amp;#160;&lt;/div&gt;')
</pre>

<p>This may may be overridden to provide a custom DOM structure for
tools based upon a more complex XTemplate. The template's data is a
single tool configuration object (Not the entire Array) as
specified in <a href="output/Ext.Panel.html#Ext.Panel-tools" ext:member="tools" ext:cls="Ext.Panel">tools</a>. In the following
example an &lt;a&gt; tag is used to provide a visual indication
when hovering over the tool:</p>

<pre><code><b>var</b> win = <b>new</b> Ext.Window({
    tools: [{
        id: <em>'download'</em>,
        href: <em>'/MyPdfDoc.pdf'</em>
    }],
    toolTemplate: <b>new</b> Ext.XTemplate(
        <em>'&lt;tpl <b>if</b>=</em>"id==\'</code>download\<em>'"</em>&gt;',
            <em>'&lt;a class=</em>"x-tool x-tool-pdf" href=<em>"{href}"</em>&gt;&lt;/a&gt;',
        <em>'&lt;/tpl&gt;'</em>,
        <em>'&lt;tpl <b>if</b>=</em>"id!=\'download\<em>'"</em>&gt;',
            <em>'&lt;div class=</em>"x-tool x-tool-{id}"&gt;&amp;#160;&lt;/div&gt;',
        <em>'&lt;/tpl&gt;'</em>
    ),
    width:500,
    height:300,
    closeAction:<em>'hide'</em>
});
</pre>

<p>Note that the CSS class 'x-tool-pdf' should have an associated
style rule which provides an appropriate background image,
something like:</p>

<pre><code>a.x-tool-pdf {background-image: url(../shared/extjs/images/pdf.gif)!important;}</code>
</pre>
]]>
		</description>
		<name>toolTemplate</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[An array of tool button configs to be added tothe header tool area. When rendered, each tool is stored as an <a href="output/Ext.Element.html" ext:cls="Ext.Element">Element</a>
referenced by a public property called
<code>tools.<i>&lt;tool-type&gt;</i></code> 

<p>Each tool config may contain the following properties:</p>

<div class="mdetail-params">
<ul>
<li><b>id</b> : String

<div class="sub-desc"><b>Required.</b> The type of tool to create.
By default, this assigns a CSS class of the form
<code>x-tool-<i>&lt;tool-type&gt;</i></code> to the resulting tool
Element. Ext provides CSS rules, and an icon sprite containing
images for the tool types listed below. The developer may implement
custom tools by supplying alternate CSS rules and background
images: 

<div style="margin-left: 2em;">
<div><code>toggle</code> (Created by default when <a href="output/Ext.Panel.html#Ext.Panel-collapsible" ext:member="collapsible" ext:cls="Ext.Panel">collapsible</a> is
<code>true</code>)</div>

<div><code>close</code></div>

<div><code>minimize</code></div>

<div><code>maximize</code></div>

<div><code>restore</code></div>

<div><code>gear</code></div>

<div><code>pin</code></div>

<div><code>unpin</code></div>

<div><code>right</code></div>

<div><code>left</code></div>

<div><code>up</code></div>

<div><code>down</code></div>

<div><code>refresh</code></div>

<div><code>minus</code></div>

<div><code>plus</code></div>

<div><code>help</code></div>

<div><code>search</code></div>

<div><code>save</code></div>

<div><code>print</code></div>
</div>
</div>
</li>

<li><b>handler</b> : Function

<div class="sub-desc"><b>Required.</b> The function to call when
clicked. Arguments passed are:

<ul>
<li><b>event</b> : Ext.EventObject

<div class="sub-desc">The click event.</div>
</li>

<li><b>toolEl</b> : Ext.Element

<div class="sub-desc">The tool Element.</div>
</li>

<li><b>panel</b> : Ext.Panel

<div class="sub-desc">The host Panel</div>
</li>

<li><b>tc</b> : Ext.Panel

<div class="sub-desc">The tool configuration object</div>
</li>
</ul>
</div>
</li>

<li><b>stopEvent</b> : Boolean

<div class="sub-desc">Defaults to true. Specify as false to allow
click event to propagate.</div>
</li>

<li><b>scope</b> : Object

<div class="sub-desc">The scope in which to call the handler.</div>
</li>

<li><b>qtip</b> : String/Object

<div class="sub-desc">A tip string, or a config argument to <a href="output/Ext.QuickTip.html#Ext.QuickTip-register" ext:member="register" ext:cls="Ext.QuickTip">Ext.QuickTip.register</a></div>
</li>

<li><b>hidden</b> : Boolean

<div class="sub-desc">True to initially render hidden.</div>
</li>

<li><b>on</b> : Object

<div class="sub-desc">A listener config object specifiying event
listeners in the format of an argument to <a href="output/Ext.Panel.html#Ext.Panel-addListener" ext:member="addListener" ext:cls="Ext.Panel">addListener</a></div>
</li>
</ul>
</div>

<p>Note that, apart from the toggle tool which is provided when a
panel is collapsible, these tools only provide the visual button.
Any required functionality must be provided by adding handlers that
implement the necessary behavior.</p>

<p>Example usage:</p>

<pre><code>tools:[{
    id:<em>'refresh'</em>,
    qtip: <em>'Refresh form Data'</em>,
    <i>// hidden:true,</i>
    handler: <b>function</b>(event, toolEl, panel){
        <i>// refresh logic</i>
    }
},
{
    id:<em>'help'</em>,
    qtip: <em>'Get Help'</em>,
    handler: <b>function</b>(event, toolEl, panel){
        <i>// whatever</i>
    }
}]</code>
</pre>

<p>For the custom id of <code><em>'help'</em></code> define two
relevant css classes with a link to a 15x15 image:</p>

<pre><code>.x-tool-help {background-image: url(images/help.png);}
.x-tool-help-over {background-image: url(images/help_over.png);}
<i>// <b>if</b> using an image sprite:</i>
.x-tool-help {background-image: url(images/help.png) no-repeat 0 0;}
.x-tool-help-over {background-position:-15px 0;}</code>
</pre>
]]>
		</description>
		<name>tools</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[Overrides the <code><a href="output/Ext.Panel.html#Ext.Panel-baseCls" ext:member="baseCls" ext:cls="Ext.Panel">baseCls</a></code> setting to <code><a href="output/Ext.Panel.html#Ext.Panel-baseCls" ext:member="baseCls" ext:cls="Ext.Panel">baseCls</a> = <em>'x-plain'</em></code> whichrenders the panel unstyled except for required attributes for Ext
layouts to function (e.g. overflow:hidden).]]>
		</description>
		<name>unstyled</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[The width of this component in pixels (defaultsto auto). <b>Note</b> to express this dimension as a percentage or
offset see <a href="output/Ext.Component.html#Ext.Component-anchor" ext:member="anchor" ext:cls="Ext.Component">Ext.Component.anchor</a>.]]>
		</description>
		<name>width</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[The X position of the left edge of the window oninitial showing. Defaults to centering the Window within the width
of the Window's container Ext.Element Element) (The Element that
the Window is rendered to).]]>
		</description>
		<name>x</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[The registered <tt>xtype</tt> to create. Thisconfig option is not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a Container is
being specified not as a fully instantiated Component, but as a
<i>Component config object</i>. The <tt>xtype</tt> will be looked
up at render time up to determine what type of child Component to
create.<br>
<br>
The predefined xtypes are listed <a href="output/Ext.Component.html" ext:cls="Ext.Component">here</a>.<br>
<br>
If you subclass Components to create your own Components, you may
register them using <a href="output/Ext.ComponentMgr.html#Ext.ComponentMgr-registerType" ext:member="registerType" ext:cls="Ext.ComponentMgr">Ext.ComponentMgr.registerType</a> in
order to be able to take advantage of lazy instantiation and
rendering.]]>
		</description>
		<name>xtype</name>
		<required>false</required>
	</attribute>
	<attribute>
		<description>        <![CDATA[The Y position of the top edge of the window oninitial showing. Defaults to centering the Window within the height
of the Window's container Ext.Element Element) (The Element that
the Window is rendered to).]]>
		</description>
		<name>y</name>
		<required>false</required>
	</attribute>
</tag>
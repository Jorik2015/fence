<tag><description>    <![CDATA[
<p>This layout allows you to easily render content into an HTML
table. The total number of columns can be specified, and rowspan
and colspan can be used to create complex layouts within the table.
This class is intended to be extended or created via the
layout:'table' <a href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout" ext:cls="Ext.Container">Ext.Container.layout</a> config, and should
generally not need to be created directly via the new keyword.</p>

<p>Note that when creating a layout via config, the layout-specific
config properties must be passed in via the <a href="output/Ext.Container.html#Ext.Container-layoutConfig" ext:member="layoutConfig" ext:cls="Ext.Container">Ext.Container.layoutConfig</a> object which
will then be applied internally to the layout. In the case of
TableLayout, the only valid layout config property is <a href="output/Ext.layout.TableLayout.html#Ext.layout.TableLayout-columns" ext:member="columns" ext:cls="Ext.layout.TableLayout">columns</a>.
However, the items added to a TableLayout can supply the following
table-specific config properties:</p>

<ul>
<li><b>rowspan</b> Applied to the table cell containing the
item.</li>

<li><b>colspan</b> Applied to the table cell containing the
item.</li>

<li><b>cellId</b> An id applied to the table cell containing the
item.</li>

<li><b>cellCls</b> A CSS class name added to the table cell
containing the item.</li>
</ul>

<p>The basic concept of building up a TableLayout is conceptually
very similar to building up a standard HTML table. You simply add
each panel (or "cell") that you want to include along with any span
attributes specified as the special config properties of rowspan
and colspan which work exactly like their HTML counterparts. Rather
than explicitly creating and nesting rows and columns as you would
in HTML, you simply specify the total column count in the
layoutConfig and start adding panels in their natural order from
left to right, top to bottom. The layout will automatically figure
out, based on the column count, rowspans and colspans, how to
position each panel within the table. Just like with HTML tables,
your rowspans and colspans must add up correctly in your overall
layout or you'll end up with missing and/or extra cells! Example
usage:</p>

<pre><code><i>// This code will generate a layout table that is 3 columns by 2 rows
</i>
<i>// <b>with</b> some spanning included.  The basic layout will be:
</i>
<i>// +--------+-----------------+
</i>
<i>// |   A    |   B             |
</i>
<i>// |        |--------+--------|
</i>
<i>// |        |   C    |   D    |
</i>
<i>// +--------+--------+--------+
</i>
<b>var</b> table = <b>new</b> Ext.Panel({
    title: <em>'Table Layout'</em>,
    layout:<em>'table'</em>,
    defaults: {
        <i>// applied to each contained panel
</i>
        bodyStyle:<em>'padding:20px'</em>
    },
    layoutConfig: {
        <i>// The total column count must be specified here
</i>
        columns: 3
    },
    items: [{
        html: <em>'&lt;p&gt;Cell A content&lt;/p&gt;'</em>,
        rowspan: 2
    },{
        html: <em>'&lt;p&gt;Cell B content&lt;/p&gt;'</em>,
        colspan: 2
    },{
        html: <em>'&lt;p&gt;Cell C content&lt;/p&gt;'</em>,
        cellCls: <em>'highlight'</em>
    },{
        html: <em>'&lt;p&gt;Cell D content&lt;/p&gt;'</em>
    }]
});</code>
</pre>
]]></description><name>tablelayout</name><tag-class></tag-class><body-content>JSP</body-content><attribute>	<description>        <![CDATA[The total number of columns to create in thetable for this layout. If not specified, all Components added to
this layout will be rendered into a single row using one column per
Component.]]>    </description>	<name>columns</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>An optional extra CSS class that will be added to the container.
This can be useful for adding customized styles to the container or
any of its children using standard CSS rules. See <a href="output/Ext.Component.html" ext:cls="Ext.Component">Ext.Component</a>.<a href="output/Ext.Component.html#Ext.Component-ctCls" ext:member="ctCls" ext:cls="Ext.Component">ctCls</a> also.</p>

<p><b>Note</b>: <tt>extraCls</tt> defaults to <tt>''</tt> except
for the following classes which assign a value by default:</p>

<div class="mdetail-params">
<ul>
<li><a href="output/Ext.layout.AbsoluteLayout.html" ext:cls="Ext.layout.AbsoluteLayout">Absolute Layout</a> :
<tt>'x-abs-layout-item'</tt></li>

<li><a href="output/Ext.layout.Box.html" ext:cls="Ext.layout.Box">Box Layout</a> :
<tt>'x-box-item'</tt></li>

<li><a href="output/Ext.layout.ColumnLayout.html" ext:cls="Ext.layout.ColumnLayout">Column Layout</a> :
<tt>'x-column'</tt></li>
</ul>
</div>

To configure the above Classes with an extra CSS class append to
the default. For example, for ColumnLayout:

<pre><code>extraCls: <em>'x-column custom-class'</em></code>
</pre>

<br>
<br>
]]>    </description>	<name>extraCls</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[True to hide each contained item on render(defaults to false).]]>    </description>	<name>renderHidden</name>	<required>false</required></attribute><attribute>	<description>        <![CDATA[<p>An object containing properties which are added to the <a href="output/Ext.DomHelper.html" ext:cls="Ext.DomHelper">DomHelper</a> specification used to create
the layout's <tt>&lt;table&gt;</tt> element. Example:</p>

<pre><code>{
    xtype: <em>'panel'</em>,
    layout: <em>'table'</em>,
    layoutConfig: {
        tableAttrs: {
            style: {
                width: <em>'100%'</em>
            }
        },
        columns: 3
    }
}</code>
</pre>
]]>    </description>	<name>tableAttrs</name>	<required>false</required></attribute></tag>
package ext.grid;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * A Column definition class which renders a passed date according to the
 * default locale, or a configured <a
 * href="output/Ext.grid.DateColumn.html#Ext.grid.DateColumn-format"
 * ext:member="format" ext:cls="Ext.grid.DateColumn">format</a>. See the <a
 * href="output/Ext.grid.ColumnModel.html#Ext.grid.ColumnModel-xtype"
 * ext:member="xtype" ext:cls="Ext.grid.ColumnModel">xtype</a> config option of
 * <a href="output/Ext.grid.ColumnModel.html"
 * ext:cls="Ext.grid.ColumnModel">Ext.grid.ColumnModel</a> for more details.
 * </p>
 */
@InstanceOf("Ext.grid.DateColumn")
@ParseConfigMode(ui = false, name = "columns", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Var)
public class DateColumn extends Column {
	public static final String COMPONENT_TYPE = "Ext.grid.DateColumn";
	public static final String COMPONENT_FAMILY = "Ext.grid.DateColumn";

	/**
	 * <p>
	 * Create a new {@link DateColumn} instance with default property values.
	 * </p>
	 */
	public DateColumn() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private String format;

	/**
	 * A formatting string as used by <a href="output/Date.html#Date-format"
	 * ext:member="format" ext:cls="Date">Date.format</a> to format a Date for
	 * this Column(defaults to <tt>'m/d/Y'</tt>).
	 */
	public String getFormat() {
		if (null != this.format) {
			return this.format;
		}
		ValueExpression _ve = getValueExpression("format");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>format</code> property.
	 * </p>
	 */
	public void setFormat(String format) {
		this.format = format;
		this.handleConfig("format", format);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[2];
		}
		_values[0] = super.saveState(_context);
		_values[1] = format;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.format = (String) _values[1];
		this.handleConfig("format", this.format);

	}
}
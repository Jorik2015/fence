package ext.grid;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;

/**
 *Note:This java code is auto generated by abner,do not edit it. A specialized
 * grid implementation intended to mimic the traditional property grid as
 * typically seen in development IDEs. Each row in the grid represents a
 * property of some object, and the data is stored as a set of name/value pairs
 * in <a href="output/Ext.grid.PropertyRecord.html"
 * ext:cls="Ext.grid.PropertyRecord">Ext.grid.PropertyRecord</a>s. Example
 * usage:
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;var&lt;/b&gt; grid = &lt;b&gt;new&lt;/b&gt; Ext.grid.PropertyGrid({
 *     title: &lt;em&gt;'Properties Grid'&lt;/em&gt;,
 *     autoHeight: true,
 *     width: 300,
 *     renderTo: &lt;em&gt;'grid-ct'&lt;/em&gt;,
 *     source: {
 *         &lt;em&gt;&quot;(name)&quot;&lt;/em&gt;: &lt;em&gt;&quot;My Object&quot;&lt;/em&gt;,
 *         &lt;em&gt;&quot;Created&quot;&lt;/em&gt;: &lt;b&gt;new&lt;/b&gt; Date(Date.parse(&lt;em&gt;'10/15/2006'&lt;/em&gt;)),
 *         &lt;em&gt;&quot;Available&quot;&lt;/em&gt;: false,
 *         &lt;em&gt;&quot;Version&quot;&lt;/em&gt;: .01,
 *         &lt;em&gt;&quot;Description&quot;&lt;/em&gt;: &lt;em&gt;&quot;A test object&quot;&lt;/em&gt;
 *     }
 * });&lt;/code&gt;
 * </pre>
 */
@InstanceOf("Ext.grid.PropertyGrid")
public class PropertyGrid extends EditorGridPanel {
	public static final String COMPONENT_TYPE = "Ext.grid.PropertyGrid";
	public static final String COMPONENT_FAMILY = "Ext.grid.PropertyGrid";

	/**
	 * <p>
	 * Create a new {@link PropertyGrid} instance with default property values.
	 * </p>
	 */
	public PropertyGrid() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Object customEditors;

	/**
	 * An object containing name/value pairs of customeditor type definitions
	 * that allow the grid to support additional types of editable fields. By
	 * default, the grid supports strongly-typed editing of strings, dates,
	 * numbers and booleans using built-in form editors, but any custom type can
	 * be supported and associated with a custom input control by specifying a
	 * custom editor. The name of the editor type should correspond with the
	 * name of the property that will use the editor. Example usage:
	 * 
	 * <pre>
	 * &lt;code&gt;&lt;b&gt;var&lt;/b&gt; grid = &lt;b&gt;new&lt;/b&gt; Ext.grid.PropertyGrid({
	 *     ...
	 *     customEditors: {
	 *         &lt;em&gt;'Start Time'&lt;/em&gt;: &lt;b&gt;new&lt;/b&gt; Ext.grid.GridEditor(&lt;b&gt;new&lt;/b&gt; Ext.form.TimeField({selectOnFocus:true}))
	 *     },
	 *     source: {
	 *         &lt;em&gt;'Start Time'&lt;/em&gt;: &lt;em&gt;'10:00 AM'&lt;/em&gt;
	 *     }
	 * });&lt;/code&gt;
	 * </pre>
	 */
	@ClientConfig(JsonMode.Object)
	public Object getCustomEditors() {
		if (null != this.customEditors) {
			return this.customEditors;
		}
		ValueExpression _ve = getValueExpression("customEditors");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>customEditors</code> property.
	 * </p>
	 */
	public void setCustomEditors(Object customEditors) {
		this.customEditors = customEditors;
		this.handleConfig("customEditors", customEditors);
	}

	private Object propertyNames;

	/**
	 * An object containing property name/display namepairs. If specified, the
	 * display name will be shown in the name column instead of the property
	 * name.
	 */
	@ClientConfig(JsonMode.Object)
	public Object getPropertyNames() {
		if (null != this.propertyNames) {
			return this.propertyNames;
		}
		ValueExpression _ve = getValueExpression("propertyNames");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>propertyNames</code> property.
	 * </p>
	 */
	public void setPropertyNames(Object propertyNames) {
		this.propertyNames = propertyNames;
		this.handleConfig("propertyNames", propertyNames);
	}

	private Object source;

	/**
	 * A data object to use as the data source of thegrid (see <a href=
	 * "output/Ext.grid.PropertyGrid.html#Ext.grid.PropertyGrid-setSource"
	 * ext:member="setSource" ext:cls="Ext.grid.PropertyGrid">setSource</a> for
	 * details).
	 */
	@ClientConfig(JsonMode.Object)
	public Object getSource() {
		if (null != this.source) {
			return this.source;
		}
		ValueExpression _ve = getValueExpression("source");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>source</code> property.
	 * </p>
	 */
	public void setSource(Object source) {
		this.source = source;
		this.handleConfig("source", source);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[4];
		}
		_values[0] = super.saveState(_context);
		_values[1] = customEditors;
		_values[2] = propertyNames;
		_values[3] = source;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.customEditors = (Object) _values[1];
		this.handleConfig("customEditors", this.customEditors);
		this.propertyNames = (Object) _values[2];
		this.handleConfig("propertyNames", this.propertyNames);
		this.source = (Object) _values[3];
		this.handleConfig("source", this.source);

	}
}
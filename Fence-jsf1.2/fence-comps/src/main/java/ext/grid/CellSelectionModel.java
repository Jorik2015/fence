package ext.grid;

import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;

/**
 *Note:This java code is auto generated by abner,do not edit it. This class
 * provides the basic implementation for <i>single</i> <b>cell</b> selection in
 * a grid. The object stored as the selection contains the following properties:
 * 
 * <div class="mdetail-params">
 * <ul>
 * <li><b>cell</b> : see <a href="output/Ext.grid.CellSelectionModel.html#Ext.grid.CellSelectionModel-getSelectedCell"
 * ext:member="getSelectedCell"
 * ext:cls="Ext.grid.CellSelectionModel">getSelectedCell</a></li>
 * 
 * <li><b>record</b> : Ext.data.record The <a href="output/Ext.data.Record.html"
 * ext:cls="Ext.data.Record">Record</a> which provides the data for the row
 * containing the selection</li>
 * </ul>
 * </div>
 */
@InstanceOf("Ext.grid.CellSelectionModel")
@ParseConfigMode(name = "selModel", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Var)
public class CellSelectionModel extends AbstractSelectionModel {
	public static final String COMPONENT_TYPE = "Ext.grid.CellSelectionModel";
	public static final String COMPONENT_FAMILY = "Ext.grid.CellSelectionModel";

	/**
	 * <p>
	 * Create a new {@link CellSelectionModel} instance with default property
	 * values.
	 * </p>
	 */
	public CellSelectionModel() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[1];
		}
		_values[0] = super.saveState(_context);

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);

	}
}
package ext.grid;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;

/**
 *Note:This java code is auto generated by abner,do not edit it. The default
 * SelectionModel used by <a href="output/Ext.grid.GridPanel.html"
 * ext:cls="Ext.grid.GridPanel">Ext.grid.GridPanel</a>. It supports multiple
 * selections and keyboard selection/navigation. The objects stored as
 * selections and returned by <a href=
 * "output/Ext.grid.RowSelectionModel.html#Ext.grid.RowSelectionModel-getSelected"
 * ext:member="getSelected"
 * ext:cls="Ext.grid.RowSelectionModel">getSelected</a>, and <a href="output/Ext.grid.RowSelectionModel.html#Ext.grid.RowSelectionModel-getSelections"
 * ext:member="getSelections"
 * ext:cls="Ext.grid.RowSelectionModel">getSelections</a> are the <a
 * href="output/Ext.data.Record.html" ext:cls="Ext.data.Record">Record</a>s
 * which provide the data for the selected rows.
 */
@InstanceOf("Ext.grid.RowSelectionModel")
@ParseConfigMode(name = "selModel", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Var)
public class RowSelectionModel extends AbstractSelectionModel {
	public static final String COMPONENT_TYPE = "Ext.grid.RowSelectionModel";
	public static final String COMPONENT_FAMILY = "Ext.grid.RowSelectionModel";

	/**
	 * <p>
	 * Create a new {@link RowSelectionModel} instance with default property
	 * values.
	 * </p>
	 */
	public RowSelectionModel() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Boolean moveEditorOnEnter;

	/**
	 * <tt>false</tt> to turn off moving the editor tothe next row down when the
	 * enter key is pressed or the next row up when shift + enter keys are
	 * pressed.
	 */
	public Boolean getMoveEditorOnEnter() {
		if (null != this.moveEditorOnEnter) {
			return this.moveEditorOnEnter;
		}
		ValueExpression _ve = getValueExpression("moveEditorOnEnter");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>moveEditorOnEnter</code> property.
	 * </p>
	 */
	public void setMoveEditorOnEnter(Boolean moveEditorOnEnter) {
		this.moveEditorOnEnter = moveEditorOnEnter;
		this.handleConfig("moveEditorOnEnter", moveEditorOnEnter);
	}

	private Boolean singleSelect;

	/**
	 * <tt>true</tt> to allow selection of only one rowat a time (defaults to
	 * <tt>false</tt> allowing multiple selections)
	 */
	public Boolean getSingleSelect() {
		if (null != this.singleSelect) {
			return this.singleSelect;
		}
		ValueExpression _ve = getValueExpression("singleSelect");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>singleSelect</code> property.
	 * </p>
	 */
	public void setSingleSelect(Boolean singleSelect) {
		this.singleSelect = singleSelect;
		this.handleConfig("singleSelect", singleSelect);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[3];
		}
		_values[0] = super.saveState(_context);
		_values[1] = moveEditorOnEnter;
		_values[2] = singleSelect;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.moveEditorOnEnter = (Boolean) _values[1];
		this.handleConfig("moveEditorOnEnter", this.moveEditorOnEnter);
		this.singleSelect = (Boolean) _values[2];
		this.handleConfig("singleSelect", this.singleSelect);

	}
}
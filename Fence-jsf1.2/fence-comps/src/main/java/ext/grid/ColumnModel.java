package ext.grid;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;
import ext.util.Observable;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * After the data has been read into the client side cache (<b><a
 * href="output/Ext.data.Store.html" ext:cls="Ext.data.Store">Store</a></b>),
 * the ColumnModel is used to configure how and what parts of that data will be
 * displayed in the vertical slices (columns) of the grid. The
 * Ext.grid.ColumnModel Class is the default implementation of a ColumnModel
 * used by implentations of <a href="output/Ext.grid.GridPanel.html"
 * ext:cls="Ext.grid.GridPanel">GridPanel</a>.
 * </p>
 * 
 * <p>
 * Data is mapped into the store's records and then indexed into the ColumnModel
 * using the
 * <tt><a href="output/Ext.grid.Column.html#Ext.grid.Column-dataIndex" ext:member="dataIndex" ext:cls="Ext.grid.Column">dataIndex</a></tt>
 * :
 * </p>
 * 
 * <pre>
 * &lt;code&gt;{data source} == mapping ==&gt; {data store} == &lt;b&gt;&lt;tt&gt;&lt;a href=&quot;output/Ext.grid.Column.html#Ext.grid.Column-dataIndex&quot; ext:member=&quot;dataIndex&quot; ext:cls=&quot;Ext.grid.Column&quot;&gt;dataIndex&lt;/a&gt;&lt;/tt&gt;&lt;/b&gt; ==&gt; {ColumnModel}&lt;/code&gt;
 * </pre>
 * 
 * <p>
 * Each <a href="output/Ext.grid.Column.html"
 * ext:cls="Ext.grid.Column">Column</a> in the grid's ColumnModel is configured
 * with a
 * <tt><a href="output/Ext.grid.Column.html#Ext.grid.Column-dataIndex" ext:member="dataIndex" ext:cls="Ext.grid.Column">dataIndex</a></tt>
 * to specify how the data within each record in the store is indexed into the
 * ColumnModel.
 * </p>
 * 
 * <p>
 * There are two ways to initialize the ColumnModel class:
 * </p>
 * 
 * <p>
 * <u>Initialization Method 1: an Array</u>
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;var&lt;/b&gt; colModel = &lt;b&gt;new&lt;/b&gt; Ext.grid.ColumnModel([
 *     { header: &lt;em&gt;&quot;Ticker&quot;&lt;/em&gt;, width: 60, sortable: true},
 *     { header: &lt;em&gt;&quot;Company Name&quot;&lt;/em&gt;, width: 150, sortable: true, id: &lt;em&gt;'company'&lt;/em&gt;},
 *     { header: &lt;em&gt;&quot;Market Cap.&quot;&lt;/em&gt;, width: 100, sortable: true},
 *     { header: &lt;em&gt;&quot;$ Sales&quot;&lt;/em&gt;, width: 100, sortable: true, renderer: money},
 *     { header: &lt;em&gt;&quot;Employees&quot;&lt;/em&gt;, width: 100, sortable: true, resizable: false}
 *  ]);&lt;/code&gt;
 * </pre>
 * 
 * <p>
 * The ColumnModel may be initialized with an Array of <a
 * href="output/Ext.grid.Column.html"
 * ext:cls="Ext.grid.Column">Ext.grid.Column</a> column configuration objects to
 * define the initial layout / display of the columns in the Grid. The order of
 * each <a href="output/Ext.grid.Column.html"
 * ext:cls="Ext.grid.Column">Ext.grid.Column</a> column configuration object
 * within the specified Array defines the initial order of the column display. A
 * Column's display may be initially hidden using the
 * <tt><a href="output/Ext.grid.Column.html#Ext.grid.Column-hidden" ext:member="hidden" ext:cls="Ext.grid.Column">hidden</a></tt>
 * config property (and then shown using the column header menu). Field's that
 * are not included in the ColumnModel will not be displayable at all.
 * </p>
 * 
 * <p>
 * How each column in the grid correlates (maps) to the <a
 * href="output/Ext.data.Record.html"
 * ext:cls="Ext.data.Record">Ext.data.Record</a> field in the <a
 * href="output/Ext.data.Store.html" ext:cls="Ext.data.Store">Store</a> the
 * column draws its data from is configured through the <b>
 * <tt><a href="output/Ext.grid.Column.html#Ext.grid.Column-dataIndex" ext:member="dataIndex" ext:cls="Ext.grid.Column">dataIndex</a></tt>
 * </b>. If the <b>
 * <tt><a href="output/Ext.grid.Column.html#Ext.grid.Column-dataIndex" ext:member="dataIndex" ext:cls="Ext.grid.Column">dataIndex</a></tt>
 * </b> is not explicitly defined (as shown in the example above) it will use
 * the column configuration's index in the Array as the index.
 * </p>
 * 
 * <p>
 * See <b>
 * <tt><a href="output/Ext.grid.Column.html" ext:cls="Ext.grid.Column">Ext.grid.Column</a></tt>
 * </b> for additional configuration options for each column.
 * </p>
 * 
 * <p>
 * <u>Initialization Method 2: an Object</u>
 * </p>
 * 
 * <p>
 * In order to use configuration options from <tt>Ext.grid.ColumnModel</tt>, an
 * Object may be used to initialize the ColumnModel. The column configuration
 * Array will be specified in the
 * <tt><b><a href="output/Ext.grid.ColumnModel.html#Ext.grid.ColumnModel-columns" ext:member="columns" ext:cls="Ext.grid.ColumnModel">columns</a></b></tt>
 * config property. The
 * <tt><b><a href="output/Ext.grid.ColumnModel.html#Ext.grid.ColumnModel-defaults" ext:member="defaults" ext:cls="Ext.grid.ColumnModel">defaults</a></b></tt>
 * config property can be used to apply defaults for all columns, e.g.:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;var&lt;/b&gt; colModel = &lt;b&gt;new&lt;/b&gt; Ext.grid.ColumnModel({
 *     columns: [
 *         { header: &lt;em&gt;&quot;Ticker&quot;&lt;/em&gt;, width: 60, menuDisabled: false},
 *         { header: &lt;em&gt;&quot;Company Name&quot;&lt;/em&gt;, width: 150, id: &lt;em&gt;'company'&lt;/em&gt;},
 *         { header: &lt;em&gt;&quot;Market Cap.&quot;&lt;/em&gt;},
 *         { header: &lt;em&gt;&quot;$ Sales&quot;&lt;/em&gt;, renderer: money},
 *         { header: &lt;em&gt;&quot;Employees&quot;&lt;/em&gt;, resizable: false}
 *     ],
 *     defaults: {
 *         sortable: true,
 *         menuDisabled: true,
 *         width: 100
 *     },
 *     listeners: {
 *         &lt;a href=&quot;output/Ext.grid.ColumnModel.html#Ext.grid.ColumnModel-hiddenchange&quot; ext:member=&quot;hiddenchange&quot; ext:cls=&quot;Ext.grid.ColumnModel&quot;&gt;hiddenchange&lt;/a&gt;: &lt;b&gt;function&lt;/b&gt;(cm, colIndex, hidden) {
 *             saveConfig(colIndex, hidden);
 *         }
 *     }
 * });&lt;/code&gt;
 * </pre>
 * 
 * <p>
 * In both examples above, the ability to apply a CSS class to all cells in a
 * column (including the header) is demonstrated through the use of the <b>
 * 
 * <tt><a href="output/Ext.grid.Column.html#Ext.grid.Column-id" ext:member="id" ext:cls="Ext.grid.Column">id</a></tt>
 * </b> config option. This column could be styled by including the following
 * css:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;i&gt;//add this css *after* the core css is loaded&lt;/i&gt;
 * .x-grid3-td-company {
 *     color: red; &lt;i&gt;// entire column will have red font&lt;/i&gt;
 * }
 * &lt;i&gt;// modify the header row only, adding an icon to the column header&lt;/i&gt;
 * .x-grid3-hd-company {
 *     background: transparent
 *         url(../../resources/images/icons/silk/building.png)
 *         no-repeat 3px 3px ! important;
 *         padding-left:20px;
 * }&lt;/code&gt;
 * </pre>
 * 
 * Note that the "Company Name" column could be specified as the <b>
 * 
 * 
 * <tt><a href="output/Ext.grid.GridPanel.html" ext:cls="Ext.grid.GridPanel">Ext.grid.GridPanel</a>.<a href="output/Ext.grid.GridPanel.html#Ext.grid.GridPanel-autoExpandColumn" ext:member="autoExpandColumn" ext:cls="Ext.grid.GridPanel">autoExpandColumn</a></tt>
 * </b>.
 */
@InstanceOf("Ext.grid.ColumnModel")
@ParseConfigMode(ui = false, name = "cm", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Var)
public class ColumnModel extends Observable {
	public static final String COMPONENT_TYPE = "Ext.grid.ColumnModel";
	public static final String COMPONENT_FAMILY = "Ext.grid.ColumnModel";

	/**
	 * <p>
	 * Create a new {@link ColumnModel} instance with default property values.
	 * </p>
	 */
	public ColumnModel() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Object columns;

	/**
	 * An Array of object literals. The config optionsdefined by <b><a
	 * href="output/Ext.grid.Column.html"
	 * ext:cls="Ext.grid.Column">Ext.grid.Column</a></b> are the options which
	 * may appear in the object literal for each individual column definition.
	 */
	@ClientConfig(JsonMode.Array)
	public Object getColumns() {
		if (null != this.columns) {
			return this.columns;
		}
		ValueExpression _ve = getValueExpression("columns");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>columns</code> property.
	 * </p>
	 */
	public void setColumns(Object columns) {
		this.columns = columns;
		this.handleConfig("columns", columns);
	}

	private Boolean defaultSortable;

	/**
	 * Default sortable of columns which have nosortable specified (defaults to
	 * <tt>false</tt>). This property shall preferably be configured through the
	 * 
	 * 
	 * <tt><b><a href="output/Ext.grid.ColumnModel.html#Ext.grid.ColumnModel-defaults" ext:member="defaults" ext:cls="Ext.grid.ColumnModel">defaults</a></b></tt>
	 * config property.
	 */
	public Boolean getDefaultSortable() {
		if (null != this.defaultSortable) {
			return this.defaultSortable;
		}
		ValueExpression _ve = getValueExpression("defaultSortable");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>defaultSortable</code> property.
	 * </p>
	 */
	public void setDefaultSortable(Boolean defaultSortable) {
		this.defaultSortable = defaultSortable;
		this.handleConfig("defaultSortable", defaultSortable);
	}

	private Integer defaultWidth;

	/**
	 * The width of columns which have no
	 * <tt><a href="output/Ext.grid.ColumnModel.html#Ext.grid.ColumnModel-width" ext:member="width" ext:cls="Ext.grid.ColumnModel">width</a></tt>
	 * specified (defaults to <tt>100</tt>). This property shall preferably be
	 * configured through the
	 * 
	 * <tt><b><a href="output/Ext.grid.ColumnModel.html#Ext.grid.ColumnModel-defaults" ext:member="defaults" ext:cls="Ext.grid.ColumnModel">defaults</a></b></tt>
	 * config property.
	 */
	public Integer getDefaultWidth() {
		if (null != this.defaultWidth) {
			return this.defaultWidth;
		}
		ValueExpression _ve = getValueExpression("defaultWidth");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>defaultWidth</code> property.
	 * </p>
	 */
	public void setDefaultWidth(Integer defaultWidth) {
		this.defaultWidth = defaultWidth;
		this.handleConfig("defaultWidth", defaultWidth);
	}

	private Object defaults;

	/**
	 * Object literal which will be used to apply <a
	 * href="output/Ext.grid.Column.html"
	 * ext:cls="Ext.grid.Column">Ext.grid.Column</a> configuration optionsto all
	 * 
	 * <tt><b><a href="output/Ext.grid.ColumnModel.html#Ext.grid.ColumnModel-columns" ext:member="columns" ext:cls="Ext.grid.ColumnModel">columns</a></b></tt>
	 * . Configuration options specified with individual <a
	 * href="output/Ext.grid.Column.html" ext:cls="Ext.grid.Column">column</a>
	 * configs will supersede these
	 * 
	 * <tt><b><a href="output/Ext.grid.ColumnModel.html#Ext.grid.ColumnModel-defaults" ext:member="defaults" ext:cls="Ext.grid.ColumnModel">defaults</a></b></tt>
	 * .
	 */
	@ClientConfig(JsonMode.Object)
	public Object getDefaults() {
		if (null != this.defaults) {
			return this.defaults;
		}
		ValueExpression _ve = getValueExpression("defaults");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>defaults</code> property.
	 * </p>
	 */
	public void setDefaults(Object defaults) {
		this.defaults = defaults;
		this.handleConfig("defaults", defaults);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[5];
		}
		_values[0] = super.saveState(_context);
		_values[1] = columns;
		_values[2] = defaultSortable;
		_values[3] = defaultWidth;
		_values[4] = defaults;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.columns = (Object) _values[1];
		this.handleConfig("columns", this.columns);
		this.defaultSortable = (Boolean) _values[2];
		this.handleConfig("defaultSortable", this.defaultSortable);
		this.defaultWidth = (Integer) _values[3];
		this.handleConfig("defaultWidth", this.defaultWidth);
		this.defaults = (Object) _values[4];
		this.handleConfig("defaults", this.defaults);

	}
}
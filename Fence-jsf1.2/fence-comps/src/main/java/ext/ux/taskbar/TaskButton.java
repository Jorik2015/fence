package ext.ux.taskbar;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.Button;
import ext.annotation.ClientConfig;
import ext.annotation.JsonMode;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 */
public class TaskButton extends Button {
	/**
	 * <p>
	 * Create a new {@link TaskButton} instance with default property values.
	 * </p>
	 */
	public TaskButton() {
		super();
		setRendererType(COMPONENT_TYPE);
	}

	public String getFamily() {
		return (COMPONENT_TYPE);
	}

	private String allSelectedText;

	/**
	 * Text to display when all items areselected
	 */
	public String getAllSelectedText() {
		if (null != this.allSelectedText) {
			return this.allSelectedText;
		}
		ValueExpression _ve = getValueExpression("allSelectedText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>allSelectedText</code> property.
	 * </p>
	 */
	public void setAllSelectedText(String allSelectedText) {
		this.allSelectedText = allSelectedText;
		handleConfig("allSelectedText", allSelectedText);
	}

	private Integer autoSelectKey;

	/**
	 * [44] COMMA Sets the key used to auto-select anauto-suggest highlighted
	 * query. When pressed, the highlighted text-item will be selected as if the
	 * user selected the row with a mouse click.
	 */
	public Integer getAutoSelectKey() {
		if (null != this.autoSelectKey) {
			return this.autoSelectKey;
		}
		ValueExpression _ve = getValueExpression("autoSelectKey");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>autoSelectKey</code> property.
	 * </p>
	 */
	public void setAutoSelectKey(Integer autoSelectKey) {
		this.autoSelectKey = autoSelectKey;
		handleConfig("autoSelectKey", autoSelectKey);
	}

	private String checkSelector;

	/**
	 * DomQuery config for locating checkbox
	 */
	public String getCheckSelector() {
		if (null != this.checkSelector) {
			return this.checkSelector;
		}
		ValueExpression _ve = getValueExpression("checkSelector");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>checkSelector</code> property.
	 * </p>
	 */
	public void setCheckSelector(String checkSelector) {
		this.checkSelector = checkSelector;
		handleConfig("checkSelector", checkSelector);
	}

	private String clearAllText;

	/**
	 * the text to display for "clear all" link
	 */
	public String getClearAllText() {
		if (null != this.clearAllText) {
			return this.clearAllText;
		}
		ValueExpression _ve = getValueExpression("clearAllText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>clearAllText</code> property.
	 * </p>
	 */
	public void setClearAllText(String clearAllText) {
		this.clearAllText = clearAllText;
		handleConfig("clearAllText", clearAllText);
	}

	private String cls;

	/**
  * 
  */
	public String getCls() {
		if (null != this.cls) {
			return this.cls;
		}
		ValueExpression _ve = getValueExpression("cls");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>cls</code> property.
	 * </p>
	 */
	public void setCls(String cls) {
		this.cls = cls;
		handleConfig("cls", cls);
	}

	private Boolean enableKeyEvents;

	/**
	 * for typeAhead
	 */
	public Boolean getEnableKeyEvents() {
		if (null != this.enableKeyEvents) {
			return this.enableKeyEvents;
		}
		ValueExpression _ve = getValueExpression("enableKeyEvents");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>enableKeyEvents</code> property.
	 * </p>
	 */
	public void setEnableKeyEvents(Boolean enableKeyEvents) {
		this.enableKeyEvents = enableKeyEvents;
		handleConfig("enableKeyEvents", enableKeyEvents);
	}

	private String highlightClass;

	/**
	 * The css class applied to rows which are hoveredwith mouse selected via
	 * key-nav, or highlighted when a text-query matches a single item.
	 */
	public String getHighlightClass() {
		if (null != this.highlightClass) {
			return this.highlightClass;
		}
		ValueExpression _ve = getValueExpression("highlightClass");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>highlightClass</code> property.
	 * </p>
	 */
	public void setHighlightClass(String highlightClass) {
		this.highlightClass = highlightClass;
		handleConfig("highlightClass", highlightClass);
	}

	private String itemSelector;

	/**
	 * <b>This setting is required if a custom XTemplatehas been specified in <a
	 * href
	 * ="output/Ext.ux.TaskBar.TaskButton.html#Ext.ux.TaskBar.TaskButton-tpl"
	 * ext:member="tpl" ext:cls="Ext.ux.TaskBar.TaskButton">tpl</a> which
	 * assigns a class other than</b>
	 * 
	 * <pre>
	 * &lt;b&gt;'x-combo-list-item'&lt;/b&gt;
	 * </pre>
	 * 
	 * <b>to dropdown list items</b>. A simple CSS selector (e.g. div.some-class
	 * or span:first-child) that will be used to determine what nodes the
	 * DataView which handles the dropdown display will be working with.
	 */
	public String getItemSelector() {
		if (null != this.itemSelector) {
			return this.itemSelector;
		}
		ValueExpression _ve = getValueExpression("itemSelector");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>itemSelector</code> property.
	 * </p>
	 */
	public void setItemSelector(String itemSelector) {
		this.itemSelector = itemSelector;
		handleConfig("itemSelector", itemSelector);
	}

	private Integer maxDisplayRows;

	/**
	 * The maximum number of rows to show beforeapplying vscroll
	 */
	public Integer getMaxDisplayRows() {
		if (null != this.maxDisplayRows) {
			return this.maxDisplayRows;
		}
		ValueExpression _ve = getValueExpression("maxDisplayRows");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>maxDisplayRows</code> property.
	 * </p>
	 */
	public void setMaxDisplayRows(Integer maxDisplayRows) {
		this.maxDisplayRows = maxDisplayRows;
		handleConfig("maxDisplayRows", maxDisplayRows);
	}

	private Integer minChars;

	/**
	 * [0]
	 */
	public Integer getMinChars() {
		if (null != this.minChars) {
			return this.minChars;
		}
		ValueExpression _ve = getValueExpression("minChars");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>minChars</code> property.
	 * </p>
	 */
	public void setMinChars(Integer minChars) {
		this.minChars = minChars;
		handleConfig("minChars", minChars);
	}

	private String overClass;

	/**
	 * [x-grid3-row-over]
	 */
	public String getOverClass() {
		if (null != this.overClass) {
			return this.overClass;
		}
		ValueExpression _ve = getValueExpression("overClass");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>overClass</code> property.
	 * </p>
	 */
	public void setOverClass(String overClass) {
		this.overClass = overClass;
		handleConfig("overClass", overClass);
	}

	private String selectAllText;

	/**
	 * The "SELECT ALL" phrase [Select All]
	 */
	public String getSelectAllText() {
		if (null != this.selectAllText) {
			return this.selectAllText;
		}
		ValueExpression _ve = getValueExpression("selectAllText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>selectAllText</code> property.
	 * </p>
	 */
	public void setSelectAllText(String selectAllText) {
		this.selectAllText = selectAllText;
		handleConfig("selectAllText", selectAllText);
	}

	private String selectedClass;

	/**
	 * [x-grid3-row-selected]
	 */
	public String getSelectedClass() {
		if (null != this.selectedClass) {
			return this.selectedClass;
		}
		ValueExpression _ve = getValueExpression("selectedClass");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>selectedClass</code> property.
	 * </p>
	 */
	public void setSelectedClass(String selectedClass) {
		this.selectedClass = selectedClass;
		handleConfig("selectedClass", selectedClass);
	}

	private String separatorHtml;

	/**
	 * arbitrary html rendered after Checkablecontrols. Can be used to add an
	 * html separator markup.
	 */
	public String getSeparatorHtml() {
		if (null != this.separatorHtml) {
			return this.separatorHtml;
		}
		ValueExpression _ve = getValueExpression("separatorHtml");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>separatorHtml</code> property.
	 * </p>
	 */
	public void setSeparatorHtml(String separatorHtml) {
		this.separatorHtml = separatorHtml;
		handleConfig("separatorHtml", separatorHtml);
	}

	private String tpl;

	/**
	 * The template string, or <a href="output/Ext.XTemplate.html"
	 * ext:cls="Ext.XTemplate">Ext.XTemplate</a> instance to use todisplay each
	 * item in the dropdown list. Use this to create custom UI layouts for items
	 * in the list.
	 * 
	 * <p>
	 * If you wish to preserve the default visual look of list items, add the
	 * CSS class name
	 * </p>
	 * 
	 * <pre>
	 * x - combo - list - item
	 * </pre>
	 * 
	 * to the template's container element.
	 * 
	 * <p>
	 * <b>The template must contain one or more substitution parameters using
	 * field names from the Combo's</b> <a href=
	 * "output/Ext.ux.TaskBar.TaskButton.html#Ext.ux.TaskBar.TaskButton-store"
	 * ext:member="store" ext:cls="Ext.ux.TaskBar.TaskButton">Store</a>. An
	 * example of a custom template would be adding an
	 * </p>
	 * 
	 * <pre>
	 * ext:qtip
	 * </pre>
	 * 
	 * attribute which might display other fields from the Store.
	 * 
	 * <p>
	 * The dropdown list is displayed in a DataView. See <a
	 * href="output/Ext.DataView.html" ext:cls="Ext.DataView">Ext.DataView</a>
	 * for details.
	 * </p>
	 */
	public String getTpl() {
		if (null != this.tpl) {
			return this.tpl;
		}
		ValueExpression _ve = getValueExpression("tpl");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>tpl</code> property.
	 * </p>
	 */
	public void setTpl(String tpl) {
		this.tpl = tpl;
		handleConfig("tpl", tpl);
	}

	private String url;

	/**
	 * This will be a url of a location to load theBookStore This is a
	 * specialized Store which maintains books. It already knows about Amazon's
	 * XML definition and will expose the following Record defintion: - Author -
	 * Manufacturer - ProductGroup - DetailPageURL
	 */
	public String getUrl() {
		if (null != this.url) {
			return this.url;
		}
		ValueExpression _ve = getValueExpression("url");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>url</code> property.
	 * </p>
	 */
	public void setUrl(String url) {
		this.url = url;
		handleConfig("url", url);
	}

	private Object value;

	/**
	 * CheckboxCombo expresses its value as anarray.
	 */
	@ClientConfig(JsonMode.Array)
	public Object getValue() {
		if (null != this.value) {
			return this.value;
		}
		ValueExpression _ve = getValueExpression("value");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>value</code> property.
	 * </p>
	 */
	public void setValue(Object value) {
		this.value = value;
		handleConfig("value", value);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[18];
		}
		_values[0] = super.saveState(_context);
		_values[1] = allSelectedText;
		_values[2] = autoSelectKey;
		_values[3] = checkSelector;
		_values[4] = clearAllText;
		_values[5] = cls;
		_values[6] = enableKeyEvents;
		_values[7] = highlightClass;
		_values[8] = itemSelector;
		_values[9] = maxDisplayRows;
		_values[10] = minChars;
		_values[11] = overClass;
		_values[12] = selectAllText;
		_values[13] = selectedClass;
		_values[14] = separatorHtml;
		_values[15] = tpl;
		_values[16] = url;
		_values[17] = value;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.allSelectedText = (String) _values[1];
		this.handleConfig("allSelectedText", this.allSelectedText);
		this.autoSelectKey = (Integer) _values[2];
		this.handleConfig("autoSelectKey", this.autoSelectKey);
		this.checkSelector = (String) _values[3];
		this.handleConfig("checkSelector", this.checkSelector);
		this.clearAllText = (String) _values[4];
		this.handleConfig("clearAllText", this.clearAllText);
		this.cls = (String) _values[5];
		this.handleConfig("cls", this.cls);
		this.enableKeyEvents = (Boolean) _values[6];
		this.handleConfig("enableKeyEvents", this.enableKeyEvents);
		this.highlightClass = (String) _values[7];
		this.handleConfig("highlightClass", this.highlightClass);
		this.itemSelector = (String) _values[8];
		this.handleConfig("itemSelector", this.itemSelector);
		this.maxDisplayRows = (Integer) _values[9];
		this.handleConfig("maxDisplayRows", this.maxDisplayRows);
		this.minChars = (Integer) _values[10];
		this.handleConfig("minChars", this.minChars);
		this.overClass = (String) _values[11];
		this.handleConfig("overClass", this.overClass);
		this.selectAllText = (String) _values[12];
		this.handleConfig("selectAllText", this.selectAllText);
		this.selectedClass = (String) _values[13];
		this.handleConfig("selectedClass", this.selectedClass);
		this.separatorHtml = (String) _values[14];
		this.handleConfig("separatorHtml", this.separatorHtml);
		this.tpl = (String) _values[15];
		this.handleConfig("tpl", this.tpl);
		this.url = (String) _values[16];
		this.handleConfig("url", this.url);
		this.value = (Object) _values[17];
		this.handleConfig("value", this.value);

	}
}
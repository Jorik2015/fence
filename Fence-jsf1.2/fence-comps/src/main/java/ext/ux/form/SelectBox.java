package ext.ux.form;

import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.UXResources;
import ext.annotation.XType;
import ext.form.ComboBox;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * Makes a ComboBox more closely mimic an HTML SELECT. Supports clicking and
 * dragging through the list, with item selection occurring when the mouse
 * button is released. When used will automatically set <a
 * href="output/Ext.ux.form.SelectBox.html#Ext.ux.form.SelectBox-editable"
 * ext:member="editable" ext:cls="Ext.ux.form.SelectBox">editable</a> to false
 * and call <a href="output/Ext.Element.html#Ext.Element-unselectable"
 * ext:member="unselectable" ext:cls="Ext.Element">Ext.Element.unselectable</a>
 * on inner elements. Re-enabling editable after calling this will NOT work.
 * </p>
 */
@XType("selectbox")
@InstanceOf("Ext.ux.form.SelectBox")
@UXResources(js = "ext[version]/ux/SelectBox.js")
public class SelectBox extends ComboBox {
	public static final String COMPONENT_TYPE = "Ext.ux.form.SelectBox";
	public static final String COMPONENT_FAMILY = "Ext.ux.form.SelectBox";

	/**
	 * <p>
	 * Create a new {@link SelectBox} instance with default property values.
	 * </p>
	 */
	public SelectBox() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[1];
		}
		_values[0] = super.saveState(_context);

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);

	}
}
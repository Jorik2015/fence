package ext.ux.grid.filter;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.util.Observable;

/**
 *Note:This java code is auto generated by abner,do not edit it. Abstract base
 * class for filter implementations.
 */
@InstanceOf("Ext.ux.grid.filter.Filter")
public abstract class Filter extends Observable {
	public static final String COMPONENT_TYPE = "Ext.ux.grid.filter.Filter";
	public static final String COMPONENT_FAMILY = "Ext.ux.grid.filter.Filter";

	/**
	 * <p>
	 * Create a new {@link Filter} instance with default property values.
	 * </p>
	 */
	public Filter() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Boolean active;

	/**
	 * Indicates the initial status of the filter(defaults to false).
	 */
	public Boolean getActive() {
		if (null != this.active) {
			return this.active;
		}
		ValueExpression _ve = getValueExpression("active");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>active</code> property.
	 * </p>
	 */
	public void setActive(Boolean active) {
		this.active = active;
		this.handleConfig("active", active);
	}

	private String dataIndex;

	/**
	 * The <a href="output/Ext.data.Store.html"
	 * ext:cls="Ext.data.Store">Ext.data.Store</a> dataIndex of the fieldthis
	 * filter represents. The dataIndex does not actually have to exist in the
	 * store.
	 */
	public String getDataIndex() {
		if (null != this.dataIndex) {
			return this.dataIndex;
		}
		ValueExpression _ve = getValueExpression("dataIndex");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>dataIndex</code> property.
	 * </p>
	 */
	public void setDataIndex(String dataIndex) {
		this.dataIndex = dataIndex;
		this.handleConfig("dataIndex", dataIndex);
	}

	private Integer updateBuffer;

	/**
	 * Number of milliseconds to wait after userinteraction to fire an update.
	 * Only supported by filters: 'list', 'numeric', and 'string'. Defaults to
	 * 500.
	 */
	public Integer getUpdateBuffer() {
		if (null != this.updateBuffer) {
			return this.updateBuffer;
		}
		ValueExpression _ve = getValueExpression("updateBuffer");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>updateBuffer</code> property.
	 * </p>
	 */
	public void setUpdateBuffer(Integer updateBuffer) {
		this.updateBuffer = updateBuffer;
		this.handleConfig("updateBuffer", updateBuffer);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[4];
		}
		_values[0] = super.saveState(_context);
		_values[1] = active;
		_values[2] = dataIndex;
		_values[3] = updateBuffer;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.active = (Boolean) _values[1];
		this.handleConfig("active", this.active);
		this.dataIndex = (String) _values[2];
		this.handleConfig("dataIndex", this.dataIndex);
		this.updateBuffer = (Integer) _values[3];
		this.handleConfig("updateBuffer", this.updateBuffer);

	}
}
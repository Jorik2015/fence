package ext.ux.grid;

import javax.faces.context.FacesContext;

import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;
import ext.annotation.UXResources;
import ext.grid.Column;

/**
 *Note:This java code is auto generated by abner,do not edit it. GridPanel
 * plugin to add a column with check boxes to a grid.
 * 
 * <p>
 * Example usage:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;i&gt;// create the column
 * &lt;/i&gt;
 * &lt;b&gt;var&lt;/b&gt; checkColumn = &lt;b&gt;new&lt;/b&gt; Ext.grid.CheckColumn({
 *    header: &lt;em&gt;'Indoor?'&lt;/em&gt;,
 *    dataIndex: &lt;em&gt;'indoor'&lt;/em&gt;,
 *    id: &lt;em&gt;'check'&lt;/em&gt;,
 *    width: 55
 * });
 * 
 * &lt;i&gt;// add the column to the column model
 * &lt;/i&gt;
 * &lt;b&gt;var&lt;/b&gt; cm = &lt;b&gt;new&lt;/b&gt; Ext.grid.ColumnModel([{
 *        header: &lt;em&gt;'Foo'&lt;/em&gt;,
 *        ...
 *     },
 *     checkColumn
 * ]);
 * 
 * &lt;i&gt;// create the grid
 * &lt;/i&gt;
 * &lt;b&gt;var&lt;/b&gt; grid = &lt;b&gt;new&lt;/b&gt; Ext.grid.EditorGridPanel({
 *     ...
 *     cm: cm,
 *     plugins: [checkColumn], &lt;i&gt;// include plugin
 * &lt;/i&gt;
 *     ...
 * });&lt;/code&gt;
 * </pre>
 * 
 * In addition to storing a Boolean value within the record data, this class
 * toggles a css class between <tt>'x-grid3-check-col'</tt> and <tt>'x-grid3-check-col-on'</tt> to alter the background image used
 * for a column.
 */
@UXResources(js = "ext[version]/ux/CheckColumn.js")
@ParseConfigMode(ui = false, name = "columns", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Var)
public class CheckColumn extends Column {
	public static final String COMPONENT_TYPE = "Ext.ux.grid.CheckColumn";

	/**
	 * <p>
	 * Create a new {@link CheckColumn} instance with default property values.
	 * </p>
	 */
	public CheckColumn() {
		super();
		setRendererType(COMPONENT_TYPE);
	}

	public String getFamily() {
		return (COMPONENT_TYPE);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[1];
		}
		_values[0] = super.saveState(_context);

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);

	}
}
package ext.ux.layout;

import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.Layout;
import ext.annotation.LayoutType;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;
import ext.layout.FitLayout;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * This is a very simple layout style used to center contents within a
 * container. This layout works within nested containers and can also be used as
 * expected as a Viewport layout to center the page layout.
 * </p>
 * 
 * <p>
 * As a subclass of FitLayout, CenterLayout expects to have a single child panel
 * of the container that uses the layout. The layout does not require any config
 * options, although the child panel contained within the layout must provide a
 * fixed or percentage width. The child panel's height will fit to the container
 * by default, but you can specify <tt>autoHeight:true</tt> to allow it to
 * autosize based on its content height. Example usage:
 * </p>
 * 
 * <pre>
 * <code><i>// The content panel is centered <b>in</b> the container</i>
 * <b>var</b> p = <b>new</b> Ext.Panel({
 *     title: <em>'Center Layout'</em>,
 *     layout: <em>'ux.center'</em>,
 *     items: [{
 *         title: <em>'Centered Content'</em>,
 *         width: <em>'75%'</em>,
 *         html: <em>'Some content'</em>
 *     }]
 * });
 * 
 * <i>// If you leave the title blank and specify no border</i>
 * <i>// you<em>'ll create a non-visual, structural panel just</em>
 * </i>// <b>for</b> centering the contents <b>in</b> the main container.</code>
 * <b>var</b> p = <b>new</b> Ext.Panel({
 *     layout: 'ux.center<em>',
 *     border: false,
 *     items: [{
 *         title: '</em>Centered Content<em>',
 *         width: 300,
 *         autoHeight: true,
 *         html: '</em>Some content<em>'
 *     }]
 * });</em>
 * </pre>
 */
@Layout(LayoutType.center)
@InstanceOf("Ext.ux.layout.CenterLayout")
@ParseConfigMode(ui = false, pmode = PersistenceMode.InnerProperty, rmode = ReferenceMode.Config)
public class CenterLayout extends FitLayout {
	public static final String COMPONENT_TYPE = "Ext.ux.layout.CenterLayout";
	public static final String COMPONENT_FAMILY = "Ext.ux.layout.CenterLayout";

	/**
	 * <p>
	 * Create a new {@link CenterLayout} instance with default property values.
	 * </p>
	 */
	public CenterLayout() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[1];
		}
		_values[0] = super.saveState(_context);

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);

	}
}
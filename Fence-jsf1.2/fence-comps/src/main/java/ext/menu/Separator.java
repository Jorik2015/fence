package ext.menu;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;
import ext.annotation.XType;

/**
 *Note:This java code is auto generated by abner,do not edit it. Adds a
 * separator bar to a menu, used to divide logical groups of menu items.
 * Generally you will add one of these by using "-" in you call to add() or in
 * your items config rather than creating one directly.
 */
@XType("menuseparator")
@InstanceOf("Ext.menu.Separator")
@ParseConfigMode(name = "items", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Config)
public class Separator extends BaseItem {
	public static final String COMPONENT_TYPE = "Ext.menu.Separator";
	public static final String COMPONENT_FAMILY = "Ext.menu.Separator";

	/**
	 * <p>
	 * Create a new {@link Separator} instance with default property values.
	 * </p>
	 */
	public Separator() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Boolean hideOnClick;

	/**
	 * True to hide the containing menu after this itemis clicked (defaults to
	 * false)
	 */
	public Boolean getHideOnClick() {
		if (null != this.hideOnClick) {
			return this.hideOnClick;
		}
		ValueExpression _ve = getValueExpression("hideOnClick");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>hideOnClick</code> property.
	 * </p>
	 */
	public void setHideOnClick(Boolean hideOnClick) {
		this.hideOnClick = hideOnClick;
		this.handleConfig("hideOnClick", hideOnClick);
	}

	private String itemCls;

	/**
	 * The default CSS class to use for separators(defaults to "x-menu-sep")
	 */
	public String getItemCls() {
		if (null != this.itemCls) {
			return this.itemCls;
		}
		ValueExpression _ve = getValueExpression("itemCls");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>itemCls</code> property.
	 * </p>
	 */
	public void setItemCls(String itemCls) {
		this.itemCls = itemCls;
		this.handleConfig("itemCls", itemCls);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[3];
		}
		_values[0] = super.saveState(_context);
		_values[1] = hideOnClick;
		_values[2] = itemCls;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.hideOnClick = (Boolean) _values[1];
		this.handleConfig("hideOnClick", this.hideOnClick);
		this.itemCls = (String) _values[2];
		this.handleConfig("itemCls", this.itemCls);

	}
}
package ext.toolbar;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;
import ext.annotation.XType;

/**
 *Note:This java code is auto generated by abner,do not edit it. A simple
 * element that adds extra horizontal space between items in a toolbar. By
 * default a 2px wide space is added via css specification:
 * 
 * <pre>
 * &lt;code&gt;.x-toolbar .xtb-spacer {
 *     width:2px;
 * }&lt;/code&gt;
 * </pre>
 * 
 * <p>
 * Example usage:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;new&lt;/b&gt; Ext.Panel({
 *     tbar : [
 *         &lt;em&gt;'Item 1'&lt;/em&gt;,
 *         {xtype: &lt;em&gt;'tbspacer'&lt;/em&gt;}, &lt;i&gt;// or &lt;em&gt;' '&lt;/em&gt;
 * &lt;/i&gt;
 *         &lt;em&gt;'Item 2'&lt;/em&gt;,
 *         &lt;i&gt;// space width is also configurable via javascript
 * &lt;/i&gt;
 *         {xtype: &lt;em&gt;'tbspacer'&lt;/em&gt;, width: 50}, &lt;i&gt;// add a 50px space
 * &lt;/i&gt;
 *         &lt;em&gt;'Item 3'&lt;/em&gt;
 *     ]
 * });&lt;/code&gt;
 * </pre>
 */
@XType("tbspacer")
@InstanceOf("Ext.Toolbar.Spacer")
@ParseConfigMode(name = "items", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Config)
public class Spacer extends Item {
	public static final String COMPONENT_TYPE = "Ext.Toolbar.Spacer";
	public static final String COMPONENT_FAMILY = "Ext.Toolbar.Spacer";

	/**
	 * <p>
	 * Create a new {@link Spacer} instance with default property values.
	 * </p>
	 */
	public Spacer() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Integer width;

	/**
	 * The width of the spacer in pixels (defaults to2px via css style
	 * <tt>.x-toolbar .xtb-spacer</tt>).
	 */
	public Integer getWidth() {
		if (null != this.width) {
			return this.width;
		}
		ValueExpression _ve = getValueExpression("width");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>width</code> property.
	 * </p>
	 */
	public void setWidth(Integer width) {
		this.width = width;
		this.handleConfig("width", width);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[2];
		}
		_values[0] = super.saveState(_context);
		_values[1] = width;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.width = (Integer) _values[1];
		this.handleConfig("width", this.width);

	}
}
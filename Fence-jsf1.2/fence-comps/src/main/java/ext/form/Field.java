package ext.form;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.XType;
import ext.base.ExtInput;

/**
 *Note:This java code is auto generated by abner,do not edit it. Base class for
 * form fields that provides default event handling, sizing, value handling and
 * other functionality.
 */
@XType("field")
@InstanceOf("Ext.form.Field")
public class Field extends ExtInput {
	public static final String COMPONENT_TYPE = "Ext.form.Field";
	public static final String COMPONENT_FAMILY = "Ext.form.Field";

	/**
	 * <p>
	 * Create a new {@link Field} instance with default property values.
	 * </p>
	 */
	public Field() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private String autoCreate;

	/**
	 * <p>
	 * A <a href="output/Ext.DomHelper.html"
	 * ext:cls="Ext.DomHelper">DomHelper</a> element spec, or true for a default
	 * element spec. Used to create the <a
	 * href="output/Ext.Component.html#Ext.Component-getEl" ext:member="getEl"
	 * ext:cls="Ext.Component">Element</a> which will encapsulate this
	 * Component. See
	 * <tt><a href="output/Ext.Component.html#Ext.Component-autoEl" ext:member="autoEl" ext:cls="Ext.Component">autoEl</a></tt>
	 * for details. Defaults to:
	 * </p>
	 * 
	 * <pre>
	 * &lt;code&gt;{tag: &lt;em&gt;&quot;input&quot;&lt;/em&gt;, type: &lt;em&gt;&quot;text&quot;&lt;/em&gt;, size: &lt;em&gt;&quot;20&quot;&lt;/em&gt;, autocomplete: &lt;em&gt;&quot;off&quot;&lt;/em&gt;}&lt;/code&gt;
	 * </pre>
	 */
	public String getAutoCreate() {
		if (null != this.autoCreate) {
			return this.autoCreate;
		}
		ValueExpression _ve = getValueExpression("autoCreate");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>autoCreate</code> property.
	 * </p>
	 */
	public void setAutoCreate(String autoCreate) {
		this.autoCreate = autoCreate;
		this.handleConfig("autoCreate", autoCreate);
	}

	private String cls;

	/**
	 * A custom CSS class to apply to the field'sunderlying element (defaults to
	 * "").
	 */
	public String getCls() {
		if (null != this.cls) {
			return this.cls;
		}
		ValueExpression _ve = getValueExpression("cls");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>cls</code> property.
	 * </p>
	 */
	public void setCls(String cls) {
		this.cls = cls;
		this.handleConfig("cls", cls);
	}

	private Boolean disabled;

	/**
	 * True to disable the field (defaults to false).
	 * <p>
	 * Be aware that conformant with the <a
	 * href="http://www.w3.org/TR/html401/interact/forms.html#h-17.12.1">HTML
	 * specification</a>, disabled Fields will not be <a
	 * href="output/Ext.form.BasicForm.html#Ext.form.BasicForm-submit"
	 * ext:member="submit" ext:cls="Ext.form.BasicForm">submitted</a>.
	 * </p>
	 */
	@ClientConfig(value = JsonMode.Ignore)
	public Boolean getDisabled() {
		if (null != this.disabled) {
			return this.disabled;
		}
		ValueExpression _ve = getValueExpression("disabled");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>disabled</code> property.
	 * </p>
	 */
	public void setDisabled(Boolean disabled) {
		this.disabled = disabled;
		this.handleConfig("disabled", disabled);
	}
	
	private Boolean extDisabled;

	/**
	 * True to disable all components using this action, false to enable them
	 * (defaults to false).
	 */
	@ClientConfig(name="disabled")
	public Boolean getExtDisabled() {
		if (null != this.extDisabled) {
			return this.extDisabled;
		}
		ValueExpression _ve = getValueExpression("extDisabled");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>disabled</code> property.
	 * </p>
	 */
	public void setExtDisabled(Boolean extDisabled) {
		this.extDisabled = extDisabled;
		this.handleConfig("extDisabled", extDisabled);
	}

	private String fieldClass;

	/**
	 * The default CSS class for the field (defaults to"x-form-field")
	 */
	public String getFieldClass() {
		if (null != this.fieldClass) {
			return this.fieldClass;
		}
		ValueExpression _ve = getValueExpression("fieldClass");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>fieldClass</code> property.
	 * </p>
	 */
	public void setFieldClass(String fieldClass) {
		this.fieldClass = fieldClass;
		this.handleConfig("fieldClass", fieldClass);
	}

	private String focusClass;

	/**
	 * The CSS class to use when the field receivesfocus (defaults to
	 * "x-form-focus")
	 */
	public String getFocusClass() {
		if (null != this.focusClass) {
			return this.focusClass;
		}
		ValueExpression _ve = getValueExpression("focusClass");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>focusClass</code> property.
	 * </p>
	 */
	public void setFocusClass(String focusClass) {
		this.focusClass = focusClass;
		this.handleConfig("focusClass", focusClass);
	}

	private String inputType;

	/**
	 * The type attribute for input fields -- e.g.radio, text, password, file
	 * (defaults to "text"). The types "file" and "password" must be used to
	 * render those field types currently -- there are no separate Ext
	 * components for those. Note that if you use <tt>inputType:'file'</tt>, <a
	 * href="output/Ext.form.Field.html#Ext.form.Field-emptyText"
	 * ext:member="emptyText" ext:cls="Ext.form.Field">emptyText</a> is not
	 * supported and should be avoided.
	 */
	public String getInputType() {
		if (null != this.inputType) {
			return this.inputType;
		}
		ValueExpression _ve = getValueExpression("inputType");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>inputType</code> property.
	 * </p>
	 */
	public void setInputType(String inputType) {
		this.inputType = inputType;
		this.handleConfig("inputType", inputType);
	}

	private String invalidClass;

	/**
	 * The CSS class to use when marking a fieldinvalid (defaults to
	 * "x-form-invalid")
	 */
	public String getInvalidClass() {
		if (null != this.invalidClass) {
			return this.invalidClass;
		}
		ValueExpression _ve = getValueExpression("invalidClass");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>invalidClass</code> property.
	 * </p>
	 */
	public void setInvalidClass(String invalidClass) {
		this.invalidClass = invalidClass;
		this.handleConfig("invalidClass", invalidClass);
	}

	private String invalidText;

	/**
	 * The error text to use when marking a fieldinvalid and no message is
	 * provided (defaults to "The value in this field is invalid")
	 */
	public String getInvalidText() {
		if (null != this.invalidText) {
			return this.invalidText;
		}
		ValueExpression _ve = getValueExpression("invalidText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>invalidText</code> property.
	 * </p>
	 */
	public void setInvalidText(String invalidText) {
		this.invalidText = invalidText;
		this.handleConfig("invalidText", invalidText);
	}

	private String msgFx;

	/**
	 * <b>Experimental</b> The effect used whendisplaying a validation message
	 * under the field (defaults to 'normal').
	 */
	public String getMsgFx() {
		if (null != this.msgFx) {
			return this.msgFx;
		}
		ValueExpression _ve = getValueExpression("msgFx");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>msgFx</code> property.
	 * </p>
	 */
	public void setMsgFx(String msgFx) {
		this.msgFx = msgFx;
		this.handleConfig("msgFx", msgFx);
	}

	private String msgTarget;

	/**
	 * The location where error text should display.Should be one of the
	 * following values (defaults to 'qtip'):
	 * 
	 * <pre>
	 * Value         Description
	 * -----------   ----------------------------------------------------------------------
	 * qtip          Display a quick tip when the user hovers over the field
	 * title         Display a default browser title attribute popup
	 * under         Add a block div beneath the field containing the error text
	 * side          Add an error icon to the right of the field with a popup on hover
	 * [element id]  Add the error text directly to the innerHTML of the specified element
	 * </pre>
	 */
	public String getMsgTarget() {
		if (null != this.msgTarget) {
			return this.msgTarget;
		}
		ValueExpression _ve = getValueExpression("msgTarget");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>msgTarget</code> property.
	 * </p>
	 */
	public void setMsgTarget(String msgTarget) {
		this.msgTarget = msgTarget;
		this.handleConfig("msgTarget", msgTarget);
	}

	private String name;

	/**
	 * The field's HTML name attribute (defaults to "").<b>Note</b>: this
	 * property must be set if this field is to be automatically included with
	 * <a href="output/Ext.form.BasicForm.html#Ext.form.BasicForm-submit"
	 * ext:member="submit" ext:cls="Ext.form.BasicForm">form submit()</a>.
	 */
	public String getName() {
		if (null != this.name) {
			return this.name;
		}
		ValueExpression _ve = getValueExpression("name");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>name</code> property.
	 * </p>
	 */
	public void setName(String name) {
		this.name = name;
		this.handleConfig("name", name);
	}

	private Boolean readOnly;

	/**
	 * <tt>true</tt> to mark the field as readOnly inHTML (defaults to
	 * <tt>false</tt>).<br>
	 * <p>
	 * <b>Note</b>: this only sets the element's readOnly DOM attribute. Setting
	 * <code>readOnly=true</code>, for example, will not disable triggering a
	 * ComboBox or DateField; it gives you the option of forcing the user to
	 * choose via the trigger without typing in the text box. To hide the
	 * trigger use
	 * 
	 * <code><a href="output/Ext.form.TriggerField.html#Ext.form.TriggerField-hideTrigger" ext:member="hideTrigger" ext:cls="Ext.form.TriggerField">hideTrigger</a></code>
	 * .
	 * </p>
	 */
	public Boolean getReadOnly() {
		if (null != this.readOnly) {
			return this.readOnly;
		}
		ValueExpression _ve = getValueExpression("readOnly");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>readOnly</code> property.
	 * </p>
	 */
	public void setReadOnly(Boolean readOnly) {
		this.readOnly = readOnly;
		this.handleConfig("readOnly", readOnly);
	}

	private Integer tabIndex;

	/**
	 * The tabIndex for this field. Note this onlyapplies to fields that are
	 * rendered, not those which are built via applyTo (defaults to undefined).
	 */
	public Integer getTabIndex() {
		if (null != this.tabIndex) {
			return this.tabIndex;
		}
		ValueExpression _ve = getValueExpression("tabIndex");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>tabIndex</code> property.
	 * </p>
	 */
	public void setTabIndex(Integer tabIndex) {
		this.tabIndex = tabIndex;
		this.handleConfig("tabIndex", tabIndex);
	}

	private Boolean validateOnBlur;

	/**
	 * Whether the field should validate when it losesfocus (defaults to true).
	 */
	public Boolean getValidateOnBlur() {
		if (null != this.validateOnBlur) {
			return this.validateOnBlur;
		}
		ValueExpression _ve = getValueExpression("validateOnBlur");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>validateOnBlur</code> property.
	 * </p>
	 */
	public void setValidateOnBlur(Boolean validateOnBlur) {
		this.validateOnBlur = validateOnBlur;
		this.handleConfig("validateOnBlur", validateOnBlur);
	}

	private Integer validationDelay;

	/**
	 * The length of time in milliseconds after userinput begins until
	 * validation is initiated (defaults to 250)
	 */
	public Integer getValidationDelay() {
		if (null != this.validationDelay) {
			return this.validationDelay;
		}
		ValueExpression _ve = getValueExpression("validationDelay");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>validationDelay</code> property.
	 * </p>
	 */
	public void setValidationDelay(Integer validationDelay) {
		this.validationDelay = validationDelay;
		this.handleConfig("validationDelay", validationDelay);
	}

	private String validationEvent;

	/**
	 * The event that should initiate field validation.Set to false to disable
	 * automatic validation (defaults to "keyup").
	 */
	public String getValidationEvent() {
		if (null != this.validationEvent) {
			return this.validationEvent;
		}
		ValueExpression _ve = getValueExpression("validationEvent");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>validationEvent</code> property.
	 * </p>
	 */
	public void setValidationEvent(String validationEvent) {
		this.validationEvent = validationEvent;
		this.handleConfig("validationEvent", validationEvent);
	}

	private Object value;

	/**
	 * A value to initialize this field with (defaultsto undefined).
	 */
	public Object getValue() {
		if (null != this.value) {
			return this.value;
		}
		ValueExpression _ve = getValueExpression("value");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>FIXED this must super.setValue
	 * Set the value of the <code>value</code> property.
	 * </p>
	 */
	public void setValue(Object value) {
		this.value = value;
		super.setValue(value);
		this.handleConfig("value", value);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[19];
		}
		_values[0] = super.saveState(_context);
		_values[1] = autoCreate;
		_values[2] = cls;
		_values[3] = disabled;
		_values[4] = fieldClass;
		_values[5] = focusClass;
		_values[6] = inputType;
		_values[7] = invalidClass;
		_values[8] = invalidText;
		_values[9] = msgFx;
		_values[10] = msgTarget;
		_values[11] = name;
		_values[12] = readOnly;
		_values[13] = tabIndex;
		_values[14] = validateOnBlur;
		_values[15] = validationDelay;
		_values[16] = validationEvent;
		_values[17] = value;
		_values[18] = extDisabled;
		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.autoCreate = (String) _values[1];
		this.handleConfig("autoCreate", this.autoCreate);
		this.cls = (String) _values[2];
		this.handleConfig("cls", this.cls);
		this.disabled = (Boolean) _values[3];
		this.handleConfig("disabled", this.disabled);
		this.fieldClass = (String) _values[4];
		this.handleConfig("fieldClass", this.fieldClass);
		this.focusClass = (String) _values[5];
		this.handleConfig("focusClass", this.focusClass);
		this.inputType = (String) _values[6];
		this.handleConfig("inputType", this.inputType);
		this.invalidClass = (String) _values[7];
		this.handleConfig("invalidClass", this.invalidClass);
		this.invalidText = (String) _values[8];
		this.handleConfig("invalidText", this.invalidText);
		this.msgFx = (String) _values[9];
		this.handleConfig("msgFx", this.msgFx);
		this.msgTarget = (String) _values[10];
		this.handleConfig("msgTarget", this.msgTarget);
		this.name = (String) _values[11];
		this.handleConfig("name", this.name);
		this.readOnly = (Boolean) _values[12];
		this.handleConfig("readOnly", this.readOnly);
		this.tabIndex = (Integer) _values[13];
		this.handleConfig("tabIndex", this.tabIndex);
		this.validateOnBlur = (Boolean) _values[14];
		this.handleConfig("validateOnBlur", this.validateOnBlur);
		this.validationDelay = (Integer) _values[15];
		this.handleConfig("validationDelay", this.validationDelay);
		this.validationEvent = (String) _values[16];
		this.handleConfig("validationEvent", this.validationEvent);
		this.value = (Object) _values[17];
		this.handleConfig("value", this.value);
		this.extDisabled = (Boolean) _values[18];
		this.handleConfig("extDisabled", this.extDisabled);
	}
}
package ext.form;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.XType;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * A grouping container for <a href="output/Ext.form.Checkbox.html"
 * ext:cls="Ext.form.Checkbox">Ext.form.Checkbox</a> controls.
 * </p>
 * 
 * <p>
 * Sample usage:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;var&lt;/b&gt; myCheckboxGroup = &lt;b&gt;new&lt;/b&gt; Ext.form.CheckboxGroup({
 *     id:&lt;em&gt;'myGroup'&lt;/em&gt;,
 *     xtype: &lt;em&gt;'checkboxgroup'&lt;/em&gt;,
 *     fieldLabel: &lt;em&gt;'Single Column'&lt;/em&gt;,
 *     itemCls: &lt;em&gt;'x-check-group-alt'&lt;/em&gt;,
 *     &lt;i&gt;// Put all controls &lt;b&gt;in&lt;/b&gt; a single column &lt;b&gt;with&lt;/b&gt; width 100%&lt;/i&gt;
 *     columns: 1,
 *     items: [
 *         {boxLabel: &lt;em&gt;'Item 1'&lt;/em&gt;, name: &lt;em&gt;'cb-col-1'&lt;/em&gt;},
 *         {boxLabel: &lt;em&gt;'Item 2'&lt;/em&gt;, name: &lt;em&gt;'cb-col-2'&lt;/em&gt;, checked: true},
 *         {boxLabel: &lt;em&gt;'Item 3'&lt;/em&gt;, name: &lt;em&gt;'cb-col-3'&lt;/em&gt;}
 *     ]
 * });&lt;/code&gt;
 * </pre>
 */
@XType("checkboxgroup")
@InstanceOf("Ext.form.CheckboxGroup")
public class CheckboxGroup extends Field {
	public static final String COMPONENT_TYPE = "Ext.form.CheckboxGroup";
	public static final String COMPONENT_FAMILY = "Ext.form.CheckboxGroup";

	/**
	 * <p>
	 * Create a new {@link CheckboxGroup} instance with default property values.
	 * </p>
	 */
	public CheckboxGroup() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Boolean allowBlank;

	/**
	 * False to validate that at least one item in thegroup is checked (defaults
	 * to true). If no items are selected at validation time, {@link

	 */
	public Boolean getAllowBlank() {
		if (null != this.allowBlank) {
			return this.allowBlank;
		}
		ValueExpression _ve = getValueExpression("allowBlank");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>allowBlank</code> property.
	 * </p>
	 */
	public void setAllowBlank(Boolean allowBlank) {
		this.allowBlank = allowBlank;
		this.handleConfig("allowBlank", allowBlank);
	}

	private String blankText;

	/**
	 * Error text to display if the <a href=
	 * "output/Ext.form.CheckboxGroup.html#Ext.form.CheckboxGroup-allowBlank"
	 * ext:member="allowBlank" ext:cls="Ext.form.CheckboxGroup">allowBlank</a>
	 * validation fails(defaults to "You must select at least one item in this
	 * group")
	 */
	public String getBlankText() {
		if (null != this.blankText) {
			return this.blankText;
		}
		ValueExpression _ve = getValueExpression("blankText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>blankText</code> property.
	 * </p>
	 */
	public void setBlankText(String blankText) {
		this.blankText = blankText;
		this.handleConfig("blankText", blankText);
	}

	private Object columns;

	/**
	 * Specifies the number of columns to use whendisplaying grouped
	 * checkbox/radio controls using automatic layout. This config can take
	 * several types of values:
	 * 
	 * <ul>
	 * <li><b>'auto'</b> :
	 * 
	 * <p class="sub-desc">
	 * The controls will be rendered one per column on one row and the width of
	 * each column will be evenly distributed based on the width of the overall
	 * field container. This is the default.
	 * </p>
	 * </li>
	 * 
	 * <li><b>Number</b> :
	 * 
	 * <p class="sub-desc">
	 * If you specific a number (e.g., 3) that number of columns will be created
	 * and the contained controls will be automatically distributed based on the
	 * value of <a href=
	 * "output/Ext.form.CheckboxGroup.html#Ext.form.CheckboxGroup-vertical"
	 * ext:member="vertical" ext:cls="Ext.form.CheckboxGroup">vertical</a>.
	 * </p>
	 * </li>
	 * 
	 * <li><b>Array</b> : Object
	 * 
	 * <p class="sub-desc">
	 * You can also specify an array of column widths, mixing integer (fixed
	 * width) and float (percentage width) values as needed (e.g., [100, .25,
	 * .75]). Any integer values will be rendered first, then any float values
	 * will be calculated as a percentage of the remaining space. Float values
	 * do not have to add up to 1 (100%) although if you want the controls to
	 * take up the entire field container you should do so.
	 * </p>
	 * </li>
	 * </ul>
	 */
	@ClientConfig(JsonMode.Array)
	public Object getColumns() {
		if (null != this.columns) {
			return this.columns;
		}
		ValueExpression _ve = getValueExpression("columns");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>columns</code> property.
	 * </p>
	 */
	public void setColumns(Object columns) {
		this.columns = columns;
		this.handleConfig("columns", columns);
	}

	private Object items;

	/**
	 * An Array of <a href="output/Ext.form.Checkbox.html"
	 * ext:cls="Ext.form.Checkbox">Checkbox</a>es or Checkbox configobjects to
	 * arrange in the group.
	 */
	@ClientConfig(JsonMode.Array)
	public Object getItems() {
		if (null != this.items) {
			return this.items;
		}
		ValueExpression _ve = getValueExpression("items");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>items</code> property.
	 * </p>
	 */
	public void setItems(Object items) {
		this.items = items;
		this.handleConfig("items", items);
	}

	private Boolean vertical;

	/**
	 * True to distribute contained controls acrosscolumns, completely filling
	 * each column top to bottom before starting on the next column. The number
	 * of controls in each column will be automatically calculated to keep
	 * columns as even as possible. The default value is false, so that controls
	 * will be added to columns one at a time, completely filling each row left
	 * to right before starting on the next row.
	 */
	public Boolean getVertical() {
		if (null != this.vertical) {
			return this.vertical;
		}
		ValueExpression _ve = getValueExpression("vertical");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>vertical</code> property.
	 * </p>
	 */
	public void setVertical(Boolean vertical) {
		this.vertical = vertical;
		this.handleConfig("vertical", vertical);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[6];
		}
		_values[0] = super.saveState(_context);
		_values[1] = allowBlank;
		_values[2] = blankText;
		_values[3] = columns;
		_values[4] = items;
		_values[5] = vertical;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.allowBlank = (Boolean) _values[1];
		this.handleConfig("allowBlank", this.allowBlank);
		this.blankText = (String) _values[2];
		this.handleConfig("blankText", this.blankText);
		this.columns = (Object) _values[3];
		this.handleConfig("columns", this.columns);
		this.items = (Object) _values[4];
		this.handleConfig("items", this.items);
		this.vertical = (Boolean) _values[5];
		this.handleConfig("vertical", this.vertical);

	}
}
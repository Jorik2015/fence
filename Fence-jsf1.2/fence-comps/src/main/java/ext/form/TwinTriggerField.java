package ext.form;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * TwinTriggerField is not a public class to be used directly. It is meant as an
 * abstract base class to be extended by an implementing class. For an example
 * of implementing this class, see the custom SearchField implementation here:
 * <a href="http://extjs.com/deploy/ext/examples/form/custom.html">http://extjs.
 * com/deploy/ext/examples/form/custom.html</a>
 */
@InstanceOf("Ext.form.TwinTriggerField")
public class TwinTriggerField extends TriggerField {
	public static final String COMPONENT_TYPE = "Ext.form.TwinTriggerField";
	public static final String COMPONENT_FAMILY = "Ext.form.TwinTriggerField";

	/**
	 * <p>
	 * Create a new {@link TwinTriggerField} instance with default property
	 * values.
	 * </p>
	 */
	public TwinTriggerField() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private String trigger1Class;

	/**
	 * An additional CSS class used to style the triggerbutton. The trigger will
	 * always get the class <tt>'x-form-trigger'</tt> by default and <tt>triggerClass</tt> will be
	 * <b>appended</b> if specified.
	 */
	public String getTrigger1Class() {
		if (null != this.trigger1Class) {
			return this.trigger1Class;
		}
		ValueExpression _ve = getValueExpression("trigger1Class");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>trigger1Class</code> property.
	 * </p>
	 */
	public void setTrigger1Class(String trigger1Class) {
		this.trigger1Class = trigger1Class;
		this.handleConfig("trigger1Class", trigger1Class);
	}

	private String trigger2Class;

	/**
	 * An additional CSS class used to style the triggerbutton. The trigger will
	 * always get the class <tt>'x-form-trigger'</tt> by default and <tt>triggerClass</tt> will be
	 * <b>appended</b> if specified.
	 */
	public String getTrigger2Class() {
		if (null != this.trigger2Class) {
			return this.trigger2Class;
		}
		ValueExpression _ve = getValueExpression("trigger2Class");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>trigger2Class</code> property.
	 * </p>
	 */
	public void setTrigger2Class(String trigger2Class) {
		this.trigger2Class = trigger2Class;
		this.handleConfig("trigger2Class", trigger2Class);
	}

	private Object triggerConfig;

	/**
	 * <p>
	 * A <a href="output/Ext.DomHelper.html"
	 * ext:cls="Ext.DomHelper">DomHelper</a> config object specifying the
	 * structure of the trigger elements for this Field. (Optional).
	 * </p>
	 * 
	 * <p>
	 * Specify this when you need a customized element to contain the two
	 * trigger elements for this Field. Each trigger element must be marked by
	 * the CSS class <tt>x-form-trigger</tt> (also see
	 * 
	 * <tt><a href="output/Ext.form.TwinTriggerField.html#Ext.form.TwinTriggerField-trigger1Class" ext:member="trigger1Class" ext:cls="Ext.form.TwinTriggerField">trigger1Class</a></tt>
	 * and
	 * 
	 * <tt><a href="output/Ext.form.TwinTriggerField.html#Ext.form.TwinTriggerField-trigger2Class" ext:member="trigger2Class" ext:cls="Ext.form.TwinTriggerField">trigger2Class</a></tt>
	 * ).
	 * </p>
	 * 
	 * <p>
	 * Note that when using this option, it is the developer's responsibility to
	 * ensure correct sizing, positioning and appearance of the triggers.
	 * </p>
	 */
	@ClientConfig(JsonMode.Object)
	public Object getTriggerConfig() {
		if (null != this.triggerConfig) {
			return this.triggerConfig;
		}
		ValueExpression _ve = getValueExpression("triggerConfig");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>triggerConfig</code> property.
	 * </p>
	 */
	public void setTriggerConfig(Object triggerConfig) {
		this.triggerConfig = triggerConfig;
		this.handleConfig("triggerConfig", triggerConfig);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[4];
		}
		_values[0] = super.saveState(_context);
		_values[1] = trigger1Class;
		_values[2] = trigger2Class;
		_values[3] = triggerConfig;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.trigger1Class = (String) _values[1];
		this.handleConfig("trigger1Class", this.trigger1Class);
		this.trigger2Class = (String) _values[2];
		this.handleConfig("trigger2Class", this.trigger2Class);
		this.triggerConfig = (Object) _values[3];
		this.handleConfig("triggerConfig", this.triggerConfig);

	}
}
package ext.form;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.XType;

/**
 *Note:This java code is auto generated by abner,do not edit it. A display-only
 * text field which is not validated and not submitted.
 */
@XType("displayfield")
@InstanceOf("Ext.form.DisplayField")
public class DisplayField extends Field {
	public static final String COMPONENT_TYPE = "Ext.form.DisplayField";
	public static final String COMPONENT_FAMILY = "Ext.form.DisplayField";

	/**
	 * <p>
	 * Create a new {@link DisplayField} instance with default property values.
	 * </p>
	 */
	public DisplayField() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private String fieldClass;

	/**
	 * The default CSS class for the field (defaults to
	 * <tt>"x-form-display-field"</tt>)
	 */
	public String getFieldClass() {
		if (null != this.fieldClass) {
			return this.fieldClass;
		}
		ValueExpression _ve = getValueExpression("fieldClass");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>fieldClass</code> property.
	 * </p>
	 */
	public void setFieldClass(String fieldClass) {
		this.fieldClass = fieldClass;
		this.handleConfig("fieldClass", fieldClass);
	}

	private Boolean htmlEncode;

	/**
	 * <tt>false</tt> to skip HTML-encoding the textwhen rendering it (defaults
	 * to <tt>false</tt>). This might be useful if you want to include tags in
	 * the field's innerHTML rather than rendering them as string literals per
	 * the default logic.
	 */
	public Boolean getHtmlEncode() {
		if (null != this.htmlEncode) {
			return this.htmlEncode;
		}
		ValueExpression _ve = getValueExpression("htmlEncode");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>htmlEncode</code> property.
	 * </p>
	 */
	public void setHtmlEncode(Boolean htmlEncode) {
		this.htmlEncode = htmlEncode;
		this.handleConfig("htmlEncode", htmlEncode);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[3];
		}
		_values[0] = super.saveState(_context);
		_values[1] = fieldClass;
		_values[2] = htmlEncode;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.fieldClass = (String) _values[1];
		this.handleConfig("fieldClass", this.fieldClass);
		this.htmlEncode = (Boolean) _values[2];
		this.handleConfig("htmlEncode", this.htmlEncode);

	}
}
package ext.form;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.XType;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * A combobox control with support for autocomplete, remote-loading, paging and
 * many other features.
 * </p>
 * 
 * <p>
 * A ComboBox works in a similar manner to a traditional HTML &lt;select&gt;
 * field. The difference is that to submit the <a
 * href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-valueField"
 * ext:member="valueField" ext:cls="Ext.form.ComboBox">valueField</a>, you must
 * specify a <a
 * href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-hiddenName"
 * ext:member="hiddenName" ext:cls="Ext.form.ComboBox">hiddenName</a> to create
 * a hidden input field to hold the value of the valueField. The <i><a
 * href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-displayField"
 * ext:member="displayField" ext:cls="Ext.form.ComboBox">displayField</a></i> is
 * shown in the text field which is named according to the <a
 * href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-name" ext:member="name"
 * ext:cls="Ext.form.ComboBox">name</a>.
 * </p>
 * 
 * <p>
 * <b><u>Events</u></b>
 * </p>
 * 
 * <p>
 * To do something when something in ComboBox is selected, configure the select
 * event:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;var&lt;/b&gt; cb = &lt;b&gt;new&lt;/b&gt; Ext.form.ComboBox({
 *     &lt;i&gt;// all of your config options&lt;/i&gt;
 *     listeners:{
 *          scope: yourScope,
 *          &lt;em&gt;'select'&lt;/em&gt;: yourFunction
 *     }
 * });
 * 
 * &lt;i&gt;// Alternatively, you can assign events after the object is created:&lt;/i&gt;
 * &lt;b&gt;var&lt;/b&gt; cb = &lt;b&gt;new&lt;/b&gt; Ext.form.ComboBox(yourOptions);
 * cb.on(&lt;em&gt;'select'&lt;/em&gt;, yourFunction, yourScope);&lt;/code&gt;
 * </pre>
 * 
 * <br>
 * <br>
 * 
 * 
 * <p>
 * <b><u>ComboBox in Grid</u></b>
 * </p>
 * 
 * <p>
 * If using a ComboBox in an <a href="output/Ext.grid.EditorGridPanel.html"
 * ext:cls="Ext.grid.EditorGridPanel">Editor Grid</a> a <a
 * href="output/Ext.grid.Column.html#Ext.grid.Column-renderer"
 * ext:member="renderer" ext:cls="Ext.grid.Column">renderer</a> will be needed
 * to show the displayField when the editor is not active. Set up the renderer
 * manually, or implement a reusable render, for example:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;i&gt;// create reusable renderer&lt;/i&gt;
 * Ext.util.Format.comboRenderer = &lt;b&gt;function&lt;/b&gt;(combo){
 *     &lt;b&gt;return&lt;/b&gt; &lt;b&gt;function&lt;/b&gt;(value){
 *         &lt;b&gt;var&lt;/b&gt; record = combo.findRecord(combo.&lt;a href=&quot;output/Ext.form.ComboBox.html#Ext.form.ComboBox-valueField&quot; ext:member=&quot;valueField&quot; ext:cls=&quot;Ext.form.ComboBox&quot;&gt;valueField&lt;/a&gt;, value);
 *         &lt;b&gt;return&lt;/b&gt; record ? record.get(combo.&lt;a href=&quot;output/Ext.form.ComboBox.html#Ext.form.ComboBox-displayField&quot; ext:member=&quot;displayField&quot; ext:cls=&quot;Ext.form.ComboBox&quot;&gt;displayField&lt;/a&gt;) : combo.&lt;a href=&quot;output/Ext.form.ComboBox.html#Ext.form.ComboBox-valueNotFoundText&quot; ext:member=&quot;valueNotFoundText&quot; ext:cls=&quot;Ext.form.ComboBox&quot;&gt;valueNotFoundText&lt;/a&gt;;
 *     }
 * }
 * 
 * &lt;i&gt;// create the combo instance&lt;/i&gt;
 * &lt;b&gt;var&lt;/b&gt; combo = &lt;b&gt;new&lt;/b&gt; Ext.form.ComboBox({
 *     &lt;a href=&quot;output/Ext.form.ComboBox.html#Ext.form.ComboBox-typeAhead&quot; ext:member=&quot;typeAhead&quot; ext:cls=&quot;Ext.form.ComboBox&quot;&gt;typeAhead&lt;/a&gt;: true,
 *     &lt;a href=&quot;output/Ext.form.ComboBox.html#Ext.form.ComboBox-triggerAction&quot; ext:member=&quot;triggerAction&quot; ext:cls=&quot;Ext.form.ComboBox&quot;&gt;triggerAction&lt;/a&gt;: &lt;em&gt;'all'&lt;/em&gt;,
 *     &lt;a href=&quot;output/Ext.form.ComboBox.html#Ext.form.ComboBox-lazyRender&quot; ext:member=&quot;lazyRender&quot; ext:cls=&quot;Ext.form.ComboBox&quot;&gt;lazyRender&lt;/a&gt;:true,
 *     &lt;a href=&quot;output/Ext.form.ComboBox.html#Ext.form.ComboBox-mode&quot; ext:member=&quot;mode&quot; ext:cls=&quot;Ext.form.ComboBox&quot;&gt;mode&lt;/a&gt;: &lt;em&gt;'local'&lt;/em&gt;,
 *     &lt;a href=&quot;output/Ext.form.ComboBox.html#Ext.form.ComboBox-store&quot; ext:member=&quot;store&quot; ext:cls=&quot;Ext.form.ComboBox&quot;&gt;store&lt;/a&gt;: &lt;b&gt;new&lt;/b&gt; Ext.data.ArrayStore({
 *         id: 0,
 *         fields: [
 *             &lt;em&gt;'myId'&lt;/em&gt;,
 *             &lt;em&gt;'displayText'&lt;/em&gt;
 *         ],
 *         data: [[1, &lt;em&gt;'item1'&lt;/em&gt;], [2, &lt;em&gt;'item2'&lt;/em&gt;]]
 *     }),
 *     &lt;a href=&quot;output/Ext.form.ComboBox.html#Ext.form.ComboBox-valueField&quot; ext:member=&quot;valueField&quot; ext:cls=&quot;Ext.form.ComboBox&quot;&gt;valueField&lt;/a&gt;: &lt;em&gt;'myId'&lt;/em&gt;,
 *     &lt;a href=&quot;output/Ext.form.ComboBox.html#Ext.form.ComboBox-displayField&quot; ext:member=&quot;displayField&quot; ext:cls=&quot;Ext.form.ComboBox&quot;&gt;displayField&lt;/a&gt;: &lt;em&gt;'displayText'&lt;/em&gt;
 * });
 * 
 * &lt;i&gt;// snippet of column model used within grid&lt;/i&gt;
 * &lt;b&gt;var&lt;/b&gt; cm = &lt;b&gt;new&lt;/b&gt; Ext.grid.ColumnModel([{
 *        ...
 *     },{
 *        header: &lt;em&gt;&quot;Some Header&quot;&lt;/em&gt;,
 *        dataIndex: &lt;em&gt;'whatever'&lt;/em&gt;,
 *        width: 130,
 *        editor: combo, &lt;i&gt;// specify reference to combo instance&lt;/i&gt;
 *        renderer: Ext.util.Format.comboRenderer(combo) &lt;i&gt;// pass combo instance to reusable renderer&lt;/i&gt;
 *     },
 *     ...
 * ]);&lt;/code&gt;
 * </pre>
 * 
 * <br>
 * <br>
 * 
 * 
 * <p>
 * <b><u>Filtering</u></b>
 * </p>
 * 
 * <p>
 * A ComboBox <a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-doQuery"
 * ext:member="doQuery" ext:cls="Ext.form.ComboBox">uses filtering itself</a>,
 * for information about filtering the ComboBox store manually see
 * <tt><a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-lastQuery" ext:member="lastQuery" ext:cls="Ext.form.ComboBox">lastQuery</a></tt>
 * .
 * </p>
 */
@XType("combo")
@InstanceOf("Ext.form.ComboBox")
public class ComboBox extends TriggerField {
	public static final String COMPONENT_TYPE = "Ext.form.ComboBox";
	public static final String COMPONENT_FAMILY = "Ext.form.ComboBox";

	/**
	 * <p>
	 * Create a new {@link ComboBox} instance with default property values.
	 * </p>
	 */
	public ComboBox() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private String allQuery;

	/**
	 * The text query to send to the server to returnall records for the list
	 * with no filtering (defaults to '')
	 */
	public String getAllQuery() {
		if (null != this.allQuery) {
			return this.allQuery;
		}
		ValueExpression _ve = getValueExpression("allQuery");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>allQuery</code> property.
	 * </p>
	 */
	public void setAllQuery(String allQuery) {
		this.allQuery = allQuery;
		this.handleConfig("allQuery", allQuery);
	}

	private String autoCreate;

	/**
	 * <p>
	 * A <a href="output/Ext.DomHelper.html"
	 * ext:cls="Ext.DomHelper">DomHelper</a> element spec, or <tt>true</tt> for
	 * a default element spec. Used to create the <a
	 * href="output/Ext.Component.html#Ext.Component-getEl" ext:member="getEl"
	 * ext:cls="Ext.Component">Element</a> which will encapsulate this
	 * Component. See
	 * <tt><a href="output/Ext.Component.html#Ext.Component-autoEl" ext:member="autoEl" ext:cls="Ext.Component">autoEl</a></tt>
	 * for details. Defaults to:
	 * </p>
	 * 
	 * <pre>
	 * &lt;code&gt;{tag: &lt;em&gt;&quot;input&quot;&lt;/em&gt;, type: &lt;em&gt;&quot;text&quot;&lt;/em&gt;, size: &lt;em&gt;&quot;24&quot;&lt;/em&gt;, autocomplete: &lt;em&gt;&quot;off&quot;&lt;/em&gt;}&lt;/code&gt;
	 * </pre>
	 */
	public String getAutoCreate() {
		if (null != this.autoCreate) {
			return this.autoCreate;
		}
		ValueExpression _ve = getValueExpression("autoCreate");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>autoCreate</code> property.
	 * </p>
	 */
	public void setAutoCreate(String autoCreate) {
		this.autoCreate = autoCreate;
		this.handleConfig("autoCreate", autoCreate);
	}

	private String displayField;

	/**
	 * The underlying <a href="output/Ext.data.Field.html#Ext.data.Field-name"
	 * ext:member="name" ext:cls="Ext.data.Field">data field name</a> tobind to
	 * this ComboBox (defaults to undefined if
	 * <tt><a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-mode" ext:member="mode" ext:cls="Ext.form.ComboBox">mode</a> =
'remote'</tt> or <tt>'text'</tt> if <a
	 * href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-transform"
	 * ext:member="transform" ext:cls="Ext.form.ComboBox">transforming a
	 * select</a> a select).
	 * 
	 * <p>
	 * See also
	 * <tt><a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-valueField" ext:member="valueField" ext:cls="Ext.form.ComboBox">valueField</a></tt>
	 * .
	 * </p>
	 * 
	 * <p>
	 * <b>Note</b>: if using a ComboBox in an <a
	 * href="output/Ext.grid.EditorGridPanel.html"
	 * ext:cls="Ext.grid.EditorGridPanel">Editor Grid</a> a <a
	 * href="output/Ext.grid.Column.html#Ext.grid.Column-renderer"
	 * ext:member="renderer" ext:cls="Ext.grid.Column">renderer</a> will be
	 * needed to show the displayField when the editor is not active.
	 * </p>
	 */
	public String getDisplayField() {
		if (null != this.displayField) {
			return this.displayField;
		}
		ValueExpression _ve = getValueExpression("displayField");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>displayField</code> property.
	 * </p>
	 */
	public void setDisplayField(String displayField) {
		this.displayField = displayField;
		this.handleConfig("displayField", displayField);
	}

	private Boolean forceSelection;

	/**
	 * <tt>true</tt> to restrict the selected value toone of the values in the
	 * list, <tt>false</tt> to allow the user to set arbitrary text into the
	 * field (defaults to <tt>false</tt>)
	 */
	public Boolean getForceSelection() {
		if (null != this.forceSelection) {
			return this.forceSelection;
		}
		ValueExpression _ve = getValueExpression("forceSelection");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>forceSelection</code> property.
	 * </p>
	 */
	public void setForceSelection(Boolean forceSelection) {
		this.forceSelection = forceSelection;
		this.handleConfig("forceSelection", forceSelection);
	}

	private Integer handleHeight;

	/**
	 * The height in pixels of the dropdown list resizehandle if
	 * <tt><a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-resizable" ext:member="resizable" ext:cls="Ext.form.ComboBox">resizable</a> =
true</tt> (defaults to <tt>8</tt>)
	 */
	public Integer getHandleHeight() {
		if (null != this.handleHeight) {
			return this.handleHeight;
		}
		ValueExpression _ve = getValueExpression("handleHeight");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>handleHeight</code> property.
	 * </p>
	 */
	public void setHandleHeight(Integer handleHeight) {
		this.handleHeight = handleHeight;
		this.handleConfig("handleHeight", handleHeight);
	}

	private String hiddenId;

	/**
	 * If
	 * <tt><a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-hiddenName" ext:member="hiddenName" ext:cls="Ext.form.ComboBox">hiddenName</a></tt>
	 * is specified,<tt>hiddenId</tt> can also be provided to give the hidden
	 * field a unique id (defaults to the
	 * <tt><a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-hiddenName" ext:member="hiddenName" ext:cls="Ext.form.ComboBox">hiddenName</a></tt>
	 * ). The <tt>hiddenId</tt> and combo <a
	 * href="output/Ext.Component.html#Ext.Component-id" ext:member="id"
	 * ext:cls="Ext.Component">id</a> should be different, since no two DOM
	 * nodes should share the same id.
	 */
	public String getHiddenId() {
		if (null != this.hiddenId) {
			return this.hiddenId;
		}
		ValueExpression _ve = getValueExpression("hiddenId");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>hiddenId</code> property.
	 * </p>
	 */
	public void setHiddenId(String hiddenId) {
		this.hiddenId = hiddenId;
		this.handleConfig("hiddenId", hiddenId);
	}

	private String hiddenName;

	/**
	 * If specified, a hidden form field with this nameis dynamically generated
	 * to store the field's data value (defaults to the underlying DOM element's
	 * name). Required for the combo's value to automatically post during a form
	 * submission. See also <a
	 * href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-valueField"
	 * ext:member="valueField" ext:cls="Ext.form.ComboBox">valueField</a>.
	 * 
	 * 
	 * <p>
	 * <b>Note</b>: the hidden field's id will also default to this name if <a
	 * href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-hiddenId"
	 * ext:member="hiddenId" ext:cls="Ext.form.ComboBox">hiddenId</a> is not
	 * specified. The ComboBox <a
	 * href="output/Ext.Component.html#Ext.Component-id" ext:member="id"
	 * ext:cls="Ext.Component">id</a> and the
	 * <tt><a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-hiddenId" ext:member="hiddenId" ext:cls="Ext.form.ComboBox">hiddenId</a></tt>
	 * <b>should be different</b>, since no two DOM nodes should share the same
	 * id. So, if the ComboBox
	 * <tt><a href="output/Ext.form.Field.html#Ext.form.Field-name" ext:member="name" ext:cls="Ext.form.Field">name</a></tt>
	 * and <tt>hiddenName</tt> are the same, you should specify a unique
	 * 
	 * <tt><a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-hiddenId" ext:member="hiddenId" ext:cls="Ext.form.ComboBox">hiddenId</a></tt>
	 * .
	 * </p>
	 */
	public String getHiddenName() {
		if (null != this.hiddenName) {
			return this.hiddenName;
		}
		ValueExpression _ve = getValueExpression("hiddenName");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>hiddenName</code> property.
	 * </p>
	 */
	public void setHiddenName(String hiddenName) {
		this.hiddenName = hiddenName;
		this.handleConfig("hiddenName", hiddenName);
	}

	private String hiddenValue;

	/**
	 * Sets the initial value of the hidden field if <a
	 * href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-hiddenName"
	 * ext:member="hiddenName" ext:cls="Ext.form.ComboBox">hiddenName</a>is
	 * specified to contain the selected <a
	 * href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-valueField"
	 * ext:member="valueField" ext:cls="Ext.form.ComboBox">valueField</a>, from
	 * the Store. Defaults to the configured
	 * <tt><a href="output/Ext.form.Field.html#Ext.form.Field-value" ext:member="value" ext:cls="Ext.form.Field">value</a></tt>
	 * .
	 */
	public String getHiddenValue() {
		if (null != this.hiddenValue) {
			return this.hiddenValue;
		}
		ValueExpression _ve = getValueExpression("hiddenValue");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>hiddenValue</code> property.
	 * </p>
	 */
	public void setHiddenValue(String hiddenValue) {
		this.hiddenValue = hiddenValue;
		this.handleConfig("hiddenValue", hiddenValue);
	}

	private String itemSelector;

	/**
	 * <p>
	 * A simple CSS selector (e.g. div.some-class or span:first-child) that will
	 * be used to determine what nodes the <a
	 * href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-view"
	 * ext:member="view" ext:cls="Ext.form.ComboBox">Ext.DataView</a> which
	 * handles the dropdown display will be working with.
	 * </p>
	 * 
	 * <p>
	 * <b>Note</b>: this setting is <b>required</b> if a custom XTemplate has
	 * been specified in <a
	 * href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-tpl"
	 * ext:member="tpl" ext:cls="Ext.form.ComboBox">tpl</a> which assigns a
	 * class other than
	 * </p>
	 * 
	 * <pre>
	 * 'x-combo-list-item'
	 * </pre>
	 * 
	 * to dropdown list items
	 */
	public String getItemSelector() {
		if (null != this.itemSelector) {
			return this.itemSelector;
		}
		ValueExpression _ve = getValueExpression("itemSelector");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>itemSelector</code> property.
	 * </p>
	 */
	public void setItemSelector(String itemSelector) {
		this.itemSelector = itemSelector;
		this.handleConfig("itemSelector", itemSelector);
	}

	private Boolean lazyInit;

	/**
	 * <tt>true</tt> to not initialize the list forthis combo until the field is
	 * focused (defaults to <tt>true</tt>)
	 */
	public Boolean getLazyInit() {
		if (null != this.lazyInit) {
			return this.lazyInit;
		}
		ValueExpression _ve = getValueExpression("lazyInit");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>lazyInit</code> property.
	 * </p>
	 */
	public void setLazyInit(Boolean lazyInit) {
		this.lazyInit = lazyInit;
		this.handleConfig("lazyInit", lazyInit);
	}

	private Boolean lazyRender;

	/**
	 * <tt>true</tt> to prevent the ComboBox fromrendering until requested
	 * (should always be used when rendering into an <a
	 * href="output/Ext.Editor.html" ext:cls="Ext.Editor">Ext.Editor</a> (e.g.
	 * <a href="output/Ext.grid.EditorGridPanel.html"
	 * ext:cls="Ext.grid.EditorGridPanel">Grids</a>), defaults to <tt>false</tt>
	 * ).
	 */
	public Boolean getLazyRender() {
		if (null != this.lazyRender) {
			return this.lazyRender;
		}
		ValueExpression _ve = getValueExpression("lazyRender");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>lazyRender</code> property.
	 * </p>
	 */
	public void setLazyRender(Boolean lazyRender) {
		this.lazyRender = lazyRender;
		this.handleConfig("lazyRender", lazyRender);
	}

	private String listAlign;

	/**
	 * A valid anchor position value. See
	 * <tt><a href="output/Ext.Element.html#Ext.Element-alignTo" ext:member="alignTo" ext:cls="Ext.Element">Ext.Element.alignTo</a></tt>
	 * for details onsupported anchor positions (defaults to <tt>'tl-bl?'</tt>)
	 */
	public String getListAlign() {
		if (null != this.listAlign) {
			return this.listAlign;
		}
		ValueExpression _ve = getValueExpression("listAlign");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>listAlign</code> property.
	 * </p>
	 */
	public void setListAlign(String listAlign) {
		this.listAlign = listAlign;
		this.handleConfig("listAlign", listAlign);
	}

	private String listClass;

	/**
	 * The CSS class to add to the predefined<tt>'x-combo-list'</tt> class applied the dropdown
	 * list element (defaults to '').
	 */
	public String getListClass() {
		if (null != this.listClass) {
			return this.listClass;
		}
		ValueExpression _ve = getValueExpression("listClass");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>listClass</code> property.
	 * </p>
	 */
	public void setListClass(String listClass) {
		this.listClass = listClass;
		this.handleConfig("listClass", listClass);
	}

	private String listEmptyText;

	/**
	 * The empty text to display in the data view if noitems are found.
	 * (defaults to '')
	 */
	public String getListEmptyText() {
		if (null != this.listEmptyText) {
			return this.listEmptyText;
		}
		ValueExpression _ve = getValueExpression("listEmptyText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>listEmptyText</code> property.
	 * </p>
	 */
	public void setListEmptyText(String listEmptyText) {
		this.listEmptyText = listEmptyText;
		this.handleConfig("listEmptyText", listEmptyText);
	}

	private Integer listWidth;

	/**
	 * The width (used as a parameter to <a
	 * href="output/Ext.Element.html#Ext.Element-setWidth" ext:member="setWidth"
	 * ext:cls="Ext.Element">Ext.Element.setWidth</a>) of the dropdownlist
	 * (defaults to the width of the ComboBox field). See also
	 * 
	 * <tt><a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-minListWidth" ext:member="minListWidth" ext:cls="Ext.form.ComboBox">minListWidth</a></tt>
	 */
	public Integer getListWidth() {
		if (null != this.listWidth) {
			return this.listWidth;
		}
		ValueExpression _ve = getValueExpression("listWidth");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>listWidth</code> property.
	 * </p>
	 */
	public void setListWidth(Integer listWidth) {
		this.listWidth = listWidth;
		this.handleConfig("listWidth", listWidth);
	}

	private String loadingText;

	/**
	 * The text to display in the dropdown list whiledata is loading. Only
	 * applies when
	 * <tt><a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-mode" ext:member="mode" ext:cls="Ext.form.ComboBox">mode</a> =
'remote'</tt> (defaults to <tt>'Loading...'</tt>)
	 */
	public String getLoadingText() {
		if (null != this.loadingText) {
			return this.loadingText;
		}
		ValueExpression _ve = getValueExpression("loadingText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>loadingText</code> property.
	 * </p>
	 */
	public void setLoadingText(String loadingText) {
		this.loadingText = loadingText;
		this.handleConfig("loadingText", loadingText);
	}

	private Integer maxHeight;

	/**
	 * The maximum height in pixels of the dropdownlist before scrollbars are
	 * shown (defaults to <tt>300</tt>)
	 */
	public Integer getMaxHeight() {
		if (null != this.maxHeight) {
			return this.maxHeight;
		}
		ValueExpression _ve = getValueExpression("maxHeight");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>maxHeight</code> property.
	 * </p>
	 */
	public void setMaxHeight(Integer maxHeight) {
		this.maxHeight = maxHeight;
		this.handleConfig("maxHeight", maxHeight);
	}

	private Integer minChars;

	/**
	 * The minimum number of characters the user musttype before autocomplete
	 * and <a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-typeAhead"
	 * ext:member="typeAhead" ext:cls="Ext.form.ComboBox">typeAhead</a> activate
	 * (defaults to <tt>4</tt> if
	 * <tt><a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-mode" ext:member="mode" ext:cls="Ext.form.ComboBox">mode</a> =
'remote'</tt> or <tt>0</tt> if
	 * <tt><a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-mode" ext:member="mode" ext:cls="Ext.form.ComboBox">mode</a> =
'local'</tt>, does not apply if
	 * <tt><a href="output/Ext.form.TriggerField.html#Ext.form.TriggerField-editable" ext:member="editable" ext:cls="Ext.form.TriggerField">editable</a>
= false</tt>).
	 */
	public Integer getMinChars() {
		if (null != this.minChars) {
			return this.minChars;
		}
		ValueExpression _ve = getValueExpression("minChars");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>minChars</code> property.
	 * </p>
	 */
	public void setMinChars(Integer minChars) {
		this.minChars = minChars;
		this.handleConfig("minChars", minChars);
	}

	private Integer minHeight;

	/**
	 * The minimum height in pixels of the dropdown listwhen the list is
	 * constrained by its distance to the viewport edges (defaults to
	 * <tt>90</tt>)
	 */
	public Integer getMinHeight() {
		if (null != this.minHeight) {
			return this.minHeight;
		}
		ValueExpression _ve = getValueExpression("minHeight");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>minHeight</code> property.
	 * </p>
	 */
	public void setMinHeight(Integer minHeight) {
		this.minHeight = minHeight;
		this.handleConfig("minHeight", minHeight);
	}

	private Integer minListWidth;

	/**
	 * The minimum width of the dropdown list in pixels(defaults to <tt>70</tt>,
	 * will be ignored if
	 * <tt><a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-listWidth" ext:member="listWidth" ext:cls="Ext.form.ComboBox">listWidth</a></tt>
	 * has a higher value)
	 */
	public Integer getMinListWidth() {
		if (null != this.minListWidth) {
			return this.minListWidth;
		}
		ValueExpression _ve = getValueExpression("minListWidth");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>minListWidth</code> property.
	 * </p>
	 */
	public void setMinListWidth(Integer minListWidth) {
		this.minListWidth = minListWidth;
		this.handleConfig("minListWidth", minListWidth);
	}

	private String mode;

	/**
	 * Acceptable values are: <div class="mdetail-params">
	 * <ul>
	 * <li><b><tt>'remote'</tt></b> : <b>Default</b>
	 * 
	 * <p class="sub-desc">
	 * Automatically loads the
	 * <tt><a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-store" ext:member="store" ext:cls="Ext.form.ComboBox">store</a></tt>
	 * the <b>first</b> time the trigger is clicked. If you do not want the
	 * store to be automatically loaded the first time the trigger is clicked,
	 * set to <tt>'local'</tt> and manually load the store. To force a requery of the store
	 * <b>every</b> time the trigger is clicked see
	 * <tt><a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-lastQuery" ext:member="lastQuery" ext:cls="Ext.form.ComboBox">lastQuery</a></tt>
	 * .
	 * </p>
	 * </li>
	 * 
	 * <li><b><tt>'local'</tt></b> :
	 * 
	 * <p class="sub-desc">
	 * ComboBox loads local data
	 * </p>
	 * 
	 * <pre>
	 * &lt;code&gt;&lt;b&gt;var&lt;/b&gt; combo = &lt;b&gt;new&lt;/b&gt; Ext.form.ComboBox({
	 *     renderTo: document.body,
	 *     mode: &lt;em&gt;'local'&lt;/em&gt;,
	 *     store: &lt;b&gt;new&lt;/b&gt; Ext.data.ArrayStore({
	 *         id: 0,
	 *         fields: [
	 *             &lt;em&gt;'myId'&lt;/em&gt;,  &lt;i&gt;// numeric value is the key&lt;/i&gt;
	 *             &lt;em&gt;'displayText'&lt;/em&gt;
	 *         ],
	 *         data: [[1, &lt;em&gt;'item1'&lt;/em&gt;], [2, &lt;em&gt;'item2'&lt;/em&gt;]]  &lt;i&gt;// data is local&lt;/i&gt;
	 *     }),
	 *     valueField: &lt;em&gt;'myId'&lt;/em&gt;,
	 *     displayField: &lt;em&gt;'displayText'&lt;/em&gt;,
	 *     triggerAction: &lt;em&gt;'all'&lt;/em&gt;
	 * });&lt;/code&gt;
	 * </pre>
	 * 
	 * </li>
	 * </ul>
	 * </div>
	 */
	public String getMode() {
		if (null != this.mode) {
			return this.mode;
		}
		ValueExpression _ve = getValueExpression("mode");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>mode</code> property.
	 * </p>
	 */
	public void setMode(String mode) {
		this.mode = mode;
		this.handleConfig("mode", mode);
	}

	private Integer pageSize;

	/**
	 * If greater than <tt>0</tt>, a <a href="output/Ext.PagingToolbar.html"
	 * ext:cls="Ext.PagingToolbar">Ext.PagingToolbar</a> is displayed inthe
	 * footer of the dropdown list and the <a
	 * href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-doQuery"
	 * ext:member="doQuery" ext:cls="Ext.form.ComboBox">filter queries</a> will
	 * execute with page start and <a
	 * href="output/Ext.PagingToolbar.html#Ext.PagingToolbar-pageSize"
	 * ext:member="pageSize" ext:cls="Ext.PagingToolbar">limit</a> parameters.
	 * Only applies when
	 * <tt><a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-mode" ext:member="mode" ext:cls="Ext.form.ComboBox">mode</a> =
'remote'</tt> (defaults to <tt>0</tt>).
	 */
	public Integer getPageSize() {
		if (null != this.pageSize) {
			return this.pageSize;
		}
		ValueExpression _ve = getValueExpression("pageSize");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>pageSize</code> property.
	 * </p>
	 */
	public void setPageSize(Integer pageSize) {
		this.pageSize = pageSize;
		this.handleConfig("pageSize", pageSize);
	}

	private Integer queryDelay;

	/**
	 * The length of time in milliseconds to delaybetween the start of typing
	 * and sending the query to filter the dropdown list (defaults to
	 * <tt>500</tt> if
	 * <tt><a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-mode" ext:member="mode" ext:cls="Ext.form.ComboBox">mode</a> =
'remote'</tt> or <tt>10</tt> if
	 * <tt><a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-mode" ext:member="mode" ext:cls="Ext.form.ComboBox">mode</a> =
'local'</tt>)
	 */
	public Integer getQueryDelay() {
		if (null != this.queryDelay) {
			return this.queryDelay;
		}
		ValueExpression _ve = getValueExpression("queryDelay");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>queryDelay</code> property.
	 * </p>
	 */
	public void setQueryDelay(Integer queryDelay) {
		this.queryDelay = queryDelay;
		this.handleConfig("queryDelay", queryDelay);
	}

	private String queryParam;

	/**
	 * Name of the query (<a
	 * href="output/Ext.data.Store.html#Ext.data.Store-baseParam"
	 * ext:member="baseParam" ext:cls="Ext.data.Store">baseParam</a> namefor the
	 * store) as it will be passed on the querystring (defaults to <tt>'query'</tt>)
	 */
	public String getQueryParam() {
		if (null != this.queryParam) {
			return this.queryParam;
		}
		ValueExpression _ve = getValueExpression("queryParam");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>queryParam</code> property.
	 * </p>
	 */
	public void setQueryParam(String queryParam) {
		this.queryParam = queryParam;
		this.handleConfig("queryParam", queryParam);
	}

	private Boolean resizable;

	/**
	 * <tt>true</tt> to add a resize handle to thebottom of the dropdown list
	 * (creates an <a href="output/Ext.Resizable.html"
	 * ext:cls="Ext.Resizable">Ext.Resizable</a> with 'se' <a
	 * href="output/Ext.Resizable.html#Ext.Resizable-pinned" ext:member="pinned"
	 * ext:cls="Ext.Resizable">pinned</a> handles). Defaults to <tt>false</tt>.
	 */
	public Boolean getResizable() {
		if (null != this.resizable) {
			return this.resizable;
		}
		ValueExpression _ve = getValueExpression("resizable");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>resizable</code> property.
	 * </p>
	 */
	public void setResizable(Boolean resizable) {
		this.resizable = resizable;
		this.handleConfig("resizable", resizable);
	}

	private Boolean selectOnFocus;

	/**
	 * <tt>true</tt> to select any existing text in thefield immediately on
	 * focus. Only applies when
	 * <tt><a href="output/Ext.form.TriggerField.html#Ext.form.TriggerField-editable" ext:member="editable" ext:cls="Ext.form.TriggerField">editable</a>
= true</tt> (defaults to <tt>false</tt>).
	 */
	public Boolean getSelectOnFocus() {
		if (null != this.selectOnFocus) {
			return this.selectOnFocus;
		}
		ValueExpression _ve = getValueExpression("selectOnFocus");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>selectOnFocus</code> property.
	 * </p>
	 */
	public void setSelectOnFocus(Boolean selectOnFocus) {
		this.selectOnFocus = selectOnFocus;
		this.handleConfig("selectOnFocus", selectOnFocus);
	}

	private String selectedClass;

	/**
	 * CSS class to apply to the selected item in thedropdown list (defaults to
	 * <tt>'x-combo-selected'</tt>)
	 */
	public String getSelectedClass() {
		if (null != this.selectedClass) {
			return this.selectedClass;
		}
		ValueExpression _ve = getValueExpression("selectedClass");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>selectedClass</code> property.
	 * </p>
	 */
	public void setSelectedClass(String selectedClass) {
		this.selectedClass = selectedClass;
		this.handleConfig("selectedClass", selectedClass);
	}

	private Boolean shadow;

	/**
	 * <tt>true</tt> or <tt>"sides"</tt> for thedefault effect, <tt>"frame"</tt>
	 * for 4-way shadow, and <tt>"drop"</tt> for bottom-right
	 */
	public Boolean getShadow() {
		if (null != this.shadow) {
			return this.shadow;
		}
		ValueExpression _ve = getValueExpression("shadow");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>shadow</code> property.
	 * </p>
	 */
	public void setShadow(Boolean shadow) {
		this.shadow = shadow;
		this.handleConfig("shadow", shadow);
	}

	private Object store;

	/**
	 * The data source to which this combo is bound(defaults to
	 * <tt>undefined</tt>). Acceptable values for this property are:
	 * 
	 * <div class="mdetail-params">
	 * <ul>
	 * <li><b>any <a href="output/Ext.data.Store.html"
	 * ext:cls="Ext.data.Store">Store</a> subclass</b></li>
	 * 
	 * <li><b>an Array</b> : Arrays will be converted to a <a
	 * href="output/Ext.data.ArrayStore.html"
	 * ext:cls="Ext.data.ArrayStore">Ext.data.ArrayStore</a> internally.
	 * 
	 * <div class="mdetail-params">
	 * <ul>
	 * <li><b>1-dimensional array</b> : (e.g., <tt>['Foo','Bar']</tt>)
	 * 
	 * <div class="sub-desc">A 1-dimensional array will automatically be
	 * expanded (each array item will be the combo <a
	 * href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-valueField"
	 * ext:member="valueField" ext:cls="Ext.form.ComboBox">value</a> and <a
	 * href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-displayField"
	 * ext:member="displayField" ext:cls="Ext.form.ComboBox">text</a>)</div></li>
	 * 
	 * <li><b>2-dimensional array</b> : (e.g., <tt>[['f','Foo'],['b','Bar']]</tt>)
	 * 
	 * <div class="sub-desc">For a multi-dimensional array, the value in index 0
	 * of each item will be assumed to be the combo <a
	 * href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-valueField"
	 * ext:member="valueField" ext:cls="Ext.form.ComboBox">value</a>, while the
	 * value at index 1 is assumed to be the combo <a
	 * href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-displayField"
	 * ext:member="displayField" ext:cls="Ext.form.ComboBox">text</a>.</div></li>
	 * </ul>
	 * </div></li>
	 * </ul>
	 * </div>
	 * 
	 * <p>
	 * See also
	 * <tt><a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-mode" ext:member="mode" ext:cls="Ext.form.ComboBox">mode</a></tt>
	 * .
	 * </p>
	 */
	@ClientConfig(JsonMode.Object)
	public Object getStore() {
		if (null != this.store) {
			return this.store;
		}
		ValueExpression _ve = getValueExpression("store");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>store</code> property.
	 * </p>
	 */
	public void setStore(Object store) {
		this.store = store;
		this.handleConfig("store", store);
	}

	private String title;

	/**
	 * If supplied, a header element is createdcontaining this text and added
	 * into the top of the dropdown list (defaults to undefined, with no header
	 * element)
	 */
	public String getTitle() {
		if (null != this.title) {
			return this.title;
		}
		ValueExpression _ve = getValueExpression("title");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>title</code> property.
	 * </p>
	 */
	public void setTitle(String title) {
		this.title = title;
		this.handleConfig("title", title);
	}

	private String tpl;

	/**
	 * <p>
	 * The template string, or <a href="output/Ext.XTemplate.html"
	 * ext:cls="Ext.XTemplate">Ext.XTemplate</a> instance to use to display each
	 * item in the dropdown list. The dropdown list is displayed in a DataView.
	 * See <a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-view"
	 * ext:member="view" ext:cls="Ext.form.ComboBox">view</a>.
	 * </p>
	 * 
	 * <p>
	 * The default template string is:
	 * </p>
	 * 
	 * <pre>
	 * &lt;code&gt;&lt;em&gt;'&lt;tpl &lt;b&gt;for&lt;/b&gt;=&lt;/em&gt;&quot;.&quot;&lt;/code&gt;&gt;&lt;div class=&lt;em&gt;&quot;x-combo-list-item&quot;&lt;/em&gt;&gt;{' + this.displayField + &lt;em&gt;'}&lt;/div&gt;&lt;/tpl&gt;'&lt;/em&gt;
	 * </pre>
	 * 
	 * <p>
	 * Override the default value to create custom UI layouts for items in the
	 * list. For example:
	 * </p>
	 * 
	 * <pre>
	 * &lt;code&gt;&lt;em&gt;'&lt;tpl &lt;b&gt;for&lt;/b&gt;=&lt;/em&gt;&quot;.&quot;&lt;/code&gt;&gt;&lt;div ext:qtip=&lt;em&gt;&quot;{state}. {nick}&quot;&lt;/em&gt; class=&lt;em&gt;&quot;x-combo-list-item&quot;&lt;/em&gt;&gt;{state}&lt;/div&gt;&lt;/tpl&gt;'
	 * </pre>
	 * 
	 * <p>
	 * The template <b>must</b> contain one or more substitution parameters
	 * using field names from the Combo's <a
	 * href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-store"
	 * ext:member="store" ext:cls="Ext.form.ComboBox">Store</a>. In the example
	 * above an
	 * </p>
	 * 
	 * <pre>
	 * ext:qtip
	 * </pre>
	 * 
	 * attribute is added to display other fields from the Store.<br>
	 * <br>
	 * 
	 * 
	 * <p>
	 * To preserve the default visual look of list items, add the CSS class name
	 * </p>
	 * 
	 * <pre>
	 * x - combo - list - item
	 * </pre>
	 * 
	 * to the template's container element.<br>
	 * <br>
	 * 
	 * 
	 * <p>
	 * Also see <a
	 * href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-itemSelector"
	 * ext:member="itemSelector" ext:cls="Ext.form.ComboBox">itemSelector</a>
	 * for additional details.
	 * </p>
	 */
	public String getTpl() {
		if (null != this.tpl) {
			return this.tpl;
		}
		ValueExpression _ve = getValueExpression("tpl");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>tpl</code> property.
	 * </p>
	 */
	public void setTpl(String tpl) {
		this.tpl = tpl;
		this.handleConfig("tpl", tpl);
	}

	private Object transform;

	/**
	 * The id, DOM node or element of an existing HTMLSELECT to convert to a
	 * ComboBox. Note that if you specify this and the combo is going to be in
	 * an <a href="output/Ext.form.BasicForm.html"
	 * ext:cls="Ext.form.BasicForm">Ext.form.BasicForm</a> or <a
	 * href="output/Ext.form.FormPanel.html"
	 * ext:cls="Ext.form.FormPanel">Ext.form.FormPanel</a>, you must also set
	 * 
	 * <tt><a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-lazyRender" ext:member="lazyRender" ext:cls="Ext.form.ComboBox">lazyRender</a>
= true</tt>.
	 */
	@ClientConfig(JsonMode.Object)
	public Object getTransform() {
		if (null != this.transform) {
			return this.transform;
		}
		ValueExpression _ve = getValueExpression("transform");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>transform</code> property.
	 * </p>
	 */
	public void setTransform(Object transform) {
		this.transform = transform;
		this.handleConfig("transform", transform);
	}

	private String triggerAction;

	/**
	 * The action to execute when the trigger isclicked.
	 * 
	 * <div class="mdetail-params">
	 * <ul>
	 * <li><b><tt>'query'</tt></b> : <b>Default</b>
	 * 
	 * <p class="sub-desc">
	 * <a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-doQuery"
	 * ext:member="doQuery" ext:cls="Ext.form.ComboBox">run the query</a> using
	 * the <a href="output/Ext.form.Field.html#Ext.form.Field-getRawValue"
	 * ext:member="getRawValue" ext:cls="Ext.form.Field">raw value</a>.
	 * </p>
	 * </li>
	 * 
	 * <li><b><tt>'all'</tt></b> :
	 * 
	 * <p class="sub-desc">
	 * <a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-doQuery"
	 * ext:member="doQuery" ext:cls="Ext.form.ComboBox">run the query</a>
	 * specified by the
	 * <tt><a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-allQuery" ext:member="allQuery" ext:cls="Ext.form.ComboBox">allQuery</a></tt>
	 * config option
	 * </p>
	 * </li>
	 * </ul>
	 * </div>
	 * 
	 * <p>
	 * See also
	 * 
	 * <code><a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-queryParam" ext:member="queryParam" ext:cls="Ext.form.ComboBox">queryParam</a></code>
	 * .
	 * </p>
	 */
	public String getTriggerAction() {
		if (null != this.triggerAction) {
			return this.triggerAction;
		}
		ValueExpression _ve = getValueExpression("triggerAction");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>triggerAction</code> property.
	 * </p>
	 */
	public void setTriggerAction(String triggerAction) {
		this.triggerAction = triggerAction;
		this.handleConfig("triggerAction", triggerAction);
	}

	private String triggerClass;

	/**
	 * An additional CSS class used to style the triggerbutton. The trigger will
	 * always get the class <tt>'x-form-trigger'</tt> and <tt>triggerClass</tt> will be
	 * <b>appended</b> if specified (defaults to <tt>'x-form-arrow-trigger'</tt> which displays a downward
	 * arrow icon).
	 */
	public String getTriggerClass() {
		if (null != this.triggerClass) {
			return this.triggerClass;
		}
		ValueExpression _ve = getValueExpression("triggerClass");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>triggerClass</code> property.
	 * </p>
	 */
	public void setTriggerClass(String triggerClass) {
		this.triggerClass = triggerClass;
		this.handleConfig("triggerClass", triggerClass);
	}

	private Boolean typeAhead;

	/**
	 * <tt>true</tt> to populate and autoselect theremainder of the text being
	 * typed after a configurable delay (<a
	 * href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-typeAheadDelay"
	 * ext:member="typeAheadDelay"
	 * ext:cls="Ext.form.ComboBox">typeAheadDelay</a>) if it matches a known
	 * value (defaults to <tt>false</tt>)
	 */
	public Boolean getTypeAhead() {
		if (null != this.typeAhead) {
			return this.typeAhead;
		}
		ValueExpression _ve = getValueExpression("typeAhead");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>typeAhead</code> property.
	 * </p>
	 */
	public void setTypeAhead(Boolean typeAhead) {
		this.typeAhead = typeAhead;
		this.handleConfig("typeAhead", typeAhead);
	}

	private Integer typeAheadDelay;

	/**
	 * The length of time in milliseconds to wait untilthe typeahead text is
	 * displayed if
	 * <tt><a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-typeAhead" ext:member="typeAhead" ext:cls="Ext.form.ComboBox">typeAhead</a> =
true</tt> (defaults to <tt>250</tt>)
	 */
	public Integer getTypeAheadDelay() {
		if (null != this.typeAheadDelay) {
			return this.typeAheadDelay;
		}
		ValueExpression _ve = getValueExpression("typeAheadDelay");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>typeAheadDelay</code> property.
	 * </p>
	 */
	public void setTypeAheadDelay(Integer typeAheadDelay) {
		this.typeAheadDelay = typeAheadDelay;
		this.handleConfig("typeAheadDelay", typeAheadDelay);
	}

	private String valueField;

	/**
	 * The underlying <a href="output/Ext.data.Field.html#Ext.data.Field-name"
	 * ext:member="name" ext:cls="Ext.data.Field">data value name</a> tobind to
	 * this ComboBox (defaults to undefined if
	 * <tt><a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-mode" ext:member="mode" ext:cls="Ext.form.ComboBox">mode</a> =
'remote'</tt> or <tt>'value'</tt> if <a
	 * href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-transform"
	 * ext:member="transform" ext:cls="Ext.form.ComboBox">transforming a
	 * select</a>).
	 * 
	 * <p>
	 * <b>Note</b>: use of a <tt>valueField</tt> requires the user to make a
	 * selection in order for a value to be mapped. See also
	 * <tt><a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-hiddenName" ext:member="hiddenName" ext:cls="Ext.form.ComboBox">hiddenName</a></tt>,
	 * 
	 * <tt><a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-hiddenValue" ext:member="hiddenValue" ext:cls="Ext.form.ComboBox">hiddenValue</a></tt>
	 * , and
	 * 
	 * <tt><a href="output/Ext.form.ComboBox.html#Ext.form.ComboBox-displayField" ext:member="displayField" ext:cls="Ext.form.ComboBox">displayField</a></tt>
	 * .
	 * </p>
	 */
	public String getValueField() {
		if (null != this.valueField) {
			return this.valueField;
		}
		ValueExpression _ve = getValueExpression("valueField");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>valueField</code> property.
	 * </p>
	 */
	public void setValueField(String valueField) {
		this.valueField = valueField;
		this.handleConfig("valueField", valueField);
	}

	private String valueNotFoundText;

	/**
	 * When using a name/value combo, if the valuepassed to setValue is not
	 * found in the store, valueNotFoundText will be displayed as the field text
	 * if defined (defaults to undefined). If this default text is used, it
	 * means there is no value set and no validation will occur on this field.
	 */
	public String getValueNotFoundText() {
		if (null != this.valueNotFoundText) {
			return this.valueNotFoundText;
		}
		ValueExpression _ve = getValueExpression("valueNotFoundText");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>valueNotFoundText</code> property.
	 * </p>
	 */
	public void setValueNotFoundText(String valueNotFoundText) {
		this.valueNotFoundText = valueNotFoundText;
		this.handleConfig("valueNotFoundText", valueNotFoundText);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[39];
		}
		_values[0] = super.saveState(_context);
		_values[1] = allQuery;
		_values[2] = autoCreate;
		_values[3] = displayField;
		_values[4] = forceSelection;
		_values[5] = handleHeight;
		_values[6] = hiddenId;
		_values[7] = hiddenName;
		_values[8] = hiddenValue;
		_values[9] = itemSelector;
		_values[10] = lazyInit;
		_values[11] = lazyRender;
		_values[12] = listAlign;
		_values[13] = listClass;
		_values[14] = listEmptyText;
		_values[15] = listWidth;
		_values[16] = loadingText;
		_values[17] = maxHeight;
		_values[18] = minChars;
		_values[19] = minHeight;
		_values[20] = minListWidth;
		_values[21] = mode;
		_values[22] = pageSize;
		_values[23] = queryDelay;
		_values[24] = queryParam;
		_values[25] = resizable;
		_values[26] = selectOnFocus;
		_values[27] = selectedClass;
		_values[28] = shadow;
		_values[29] = store;
		_values[30] = title;
		_values[31] = tpl;
		_values[32] = transform;
		_values[33] = triggerAction;
		_values[34] = triggerClass;
		_values[35] = typeAhead;
		_values[36] = typeAheadDelay;
		_values[37] = valueField;
		_values[38] = valueNotFoundText;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.allQuery = (String) _values[1];
		this.handleConfig("allQuery", this.allQuery);
		this.autoCreate = (String) _values[2];
		this.handleConfig("autoCreate", this.autoCreate);
		this.displayField = (String) _values[3];
		this.handleConfig("displayField", this.displayField);
		this.forceSelection = (Boolean) _values[4];
		this.handleConfig("forceSelection", this.forceSelection);
		this.handleHeight = (Integer) _values[5];
		this.handleConfig("handleHeight", this.handleHeight);
		this.hiddenId = (String) _values[6];
		this.handleConfig("hiddenId", this.hiddenId);
		this.hiddenName = (String) _values[7];
		this.handleConfig("hiddenName", this.hiddenName);
		this.hiddenValue = (String) _values[8];
		this.handleConfig("hiddenValue", this.hiddenValue);
		this.itemSelector = (String) _values[9];
		this.handleConfig("itemSelector", this.itemSelector);
		this.lazyInit = (Boolean) _values[10];
		this.handleConfig("lazyInit", this.lazyInit);
		this.lazyRender = (Boolean) _values[11];
		this.handleConfig("lazyRender", this.lazyRender);
		this.listAlign = (String) _values[12];
		this.handleConfig("listAlign", this.listAlign);
		this.listClass = (String) _values[13];
		this.handleConfig("listClass", this.listClass);
		this.listEmptyText = (String) _values[14];
		this.handleConfig("listEmptyText", this.listEmptyText);
		this.listWidth = (Integer) _values[15];
		this.handleConfig("listWidth", this.listWidth);
		this.loadingText = (String) _values[16];
		this.handleConfig("loadingText", this.loadingText);
		this.maxHeight = (Integer) _values[17];
		this.handleConfig("maxHeight", this.maxHeight);
		this.minChars = (Integer) _values[18];
		this.handleConfig("minChars", this.minChars);
		this.minHeight = (Integer) _values[19];
		this.handleConfig("minHeight", this.minHeight);
		this.minListWidth = (Integer) _values[20];
		this.handleConfig("minListWidth", this.minListWidth);
		this.mode = (String) _values[21];
		this.handleConfig("mode", this.mode);
		this.pageSize = (Integer) _values[22];
		this.handleConfig("pageSize", this.pageSize);
		this.queryDelay = (Integer) _values[23];
		this.handleConfig("queryDelay", this.queryDelay);
		this.queryParam = (String) _values[24];
		this.handleConfig("queryParam", this.queryParam);
		this.resizable = (Boolean) _values[25];
		this.handleConfig("resizable", this.resizable);
		this.selectOnFocus = (Boolean) _values[26];
		this.handleConfig("selectOnFocus", this.selectOnFocus);
		this.selectedClass = (String) _values[27];
		this.handleConfig("selectedClass", this.selectedClass);
		this.shadow = (Boolean) _values[28];
		this.handleConfig("shadow", this.shadow);
		this.store = (Object) _values[29];
		this.handleConfig("store", this.store);
		this.title = (String) _values[30];
		this.handleConfig("title", this.title);
		this.tpl = (String) _values[31];
		this.handleConfig("tpl", this.tpl);
		this.transform = (Object) _values[32];
		this.handleConfig("transform", this.transform);
		this.triggerAction = (String) _values[33];
		this.handleConfig("triggerAction", this.triggerAction);
		this.triggerClass = (String) _values[34];
		this.handleConfig("triggerClass", this.triggerClass);
		this.typeAhead = (Boolean) _values[35];
		this.handleConfig("typeAhead", this.typeAhead);
		this.typeAheadDelay = (Integer) _values[36];
		this.handleConfig("typeAheadDelay", this.typeAheadDelay);
		this.valueField = (String) _values[37];
		this.handleConfig("valueField", this.valueField);
		this.valueNotFoundText = (String) _values[38];
		this.handleConfig("valueNotFoundText", this.valueNotFoundText);

	}
}
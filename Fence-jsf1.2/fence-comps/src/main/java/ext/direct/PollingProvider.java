package ext.direct;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.JsonMode;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * Provides for repetitive polling of the server at distinct <a href=
 * "output/Ext.direct.PollingProvider.html#Ext.direct.PollingProvider-interval"
 * ext:member="interval" ext:cls="Ext.direct.PollingProvider">intervals</a>. The
 * initial request for data originates from the client, and then is responded to
 * by the server.
 * </p>
 * 
 * <p>
 * All configurations for the PollingProvider should be generated by the
 * server-side API portion of the Ext.Direct stack.
 * </p>
 * 
 * <p>
 * An instance of PollingProvider may be created directly via the new keyword or
 * by simply specifying <tt>type = 'polling'</tt>. For example:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;var&lt;/b&gt; pollA = &lt;b&gt;new&lt;/b&gt; Ext.direct.PollingProvider({
 *     type:&lt;em&gt;'polling'&lt;/em&gt;,
 *     url: &lt;em&gt;'php/pollA.php'&lt;/em&gt;,
 * });
 * Ext.Direct.addProvider(pollA);
 * pollA.disconnect();
 * 
 * Ext.Direct.addProvider(
 *     {
 *         type:&lt;em&gt;'polling'&lt;/em&gt;,
 *         url: &lt;em&gt;'php/pollB.php'&lt;/em&gt;,
 *         id: &lt;em&gt;'pollB-provider'&lt;/em&gt;
 *     }
 * );
 * &lt;b&gt;var&lt;/b&gt; pollB = Ext.Direct.getProvider(&lt;em&gt;'pollB-provider'&lt;/em&gt;);&lt;/code&gt;
 * </pre>
 */
public class PollingProvider extends JsonProvider {
	public static final String COMPONENT_TYPE = "Ext.direct.PollingProvider";

	/**
	 * <p>
	 * Create a new {@link PollingProvider} instance with default property
	 * values.
	 * </p>
	 */
	public PollingProvider() {
		super();
		setRendererType(COMPONENT_TYPE);
	}

	public String getFamily() {
		return (COMPONENT_TYPE);
	}

	private Object baseParams;

	/**
	 * An object containing properties which are to besent as parameters on
	 * every polling request
	 */
	@ClientConfig(JsonMode.Object)
	public Object getBaseParams() {
		if (null != this.baseParams) {
			return this.baseParams;
		}
		ValueExpression _ve = getValueExpression("baseParams");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>baseParams</code> property.
	 * </p>
	 */
	public void setBaseParams(Object baseParams) {
		this.baseParams = baseParams;
		handleConfig("baseParams", baseParams);
	}

	private Integer interval;

	/**
	 * How often to poll the server-side inmilliseconds (defaults to
	 * <tt>3000</tt> - every 3 seconds).
	 */
	public Integer getInterval() {
		if (null != this.interval) {
			return this.interval;
		}
		ValueExpression _ve = getValueExpression("interval");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>interval</code> property.
	 * </p>
	 */
	public void setInterval(Integer interval) {
		this.interval = interval;
		handleConfig("interval", interval);
	}

	private Integer priority;

	/**
	 * Priority of the request (defaults to<tt>3</tt>). See <a
	 * href="output/Ext.direct.Provider.html#Ext.direct.Provider-priority"
	 * ext:member="priority"
	 * ext:cls="Ext.direct.Provider">Ext.direct.Provider.priority</a>.
	 */
	public Integer getPriority() {
		if (null != this.priority) {
			return this.priority;
		}
		ValueExpression _ve = getValueExpression("priority");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>priority</code> property.
	 * </p>
	 */
	public void setPriority(Integer priority) {
		this.priority = priority;
		handleConfig("priority", priority);
	}

	private String url;

	/**
	 * The url which the PollingProvider should contactwith each request. This
	 * can also be an imported Ext.Direct method which will accept the
	 * baseParams as its only argument.
	 */
	public String getUrl() {
		if (null != this.url) {
			return this.url;
		}
		ValueExpression _ve = getValueExpression("url");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>url</code> property.
	 * </p>
	 */
	public void setUrl(String url) {
		this.url = url;
		handleConfig("url", url);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[5];
		}
		_values[0] = super.saveState(_context);
		_values[1] = baseParams;
		_values[2] = interval;
		_values[3] = priority;
		_values[4] = url;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.baseParams = (Object) _values[1];
		this.handleConfig("baseParams", this.baseParams);
		this.interval = (Integer) _values[2];
		this.handleConfig("interval", this.interval);
		this.priority = (Integer) _values[3];
		this.handleConfig("priority", this.priority);
		this.url = (String) _values[4];
		this.handleConfig("url", this.url);

	}
}
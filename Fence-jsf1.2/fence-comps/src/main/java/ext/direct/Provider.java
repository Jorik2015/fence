package ext.direct;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.util.Observable;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * Ext.direct.Provider is an abstract class meant to be extended.
 * </p>
 * 
 * <p>
 * For example ExtJs implements the following subclasses:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;Provider
 * |
 * +---&lt;a href=&quot;output/Ext.direct.JsonProvider.html&quot; ext:cls=&quot;Ext.direct.JsonProvider&quot;&gt;JsonProvider&lt;/a&gt; 
 *     |
 *     +---&lt;a href=&quot;output/Ext.direct.PollingProvider.html&quot; ext:cls=&quot;Ext.direct.PollingProvider&quot;&gt;PollingProvider&lt;/a&gt;   
 *     |
 *     +---&lt;a href=&quot;output/Ext.direct.RemotingProvider.html&quot; ext:cls=&quot;Ext.direct.RemotingProvider&quot;&gt;RemotingProvider&lt;/a&gt;&lt;/code&gt;
 * </pre>
 */
public class Provider extends Observable {
	public static final String COMPONENT_TYPE = "Ext.direct.Provider";

	/**
	 * <p>
	 * Create a new {@link Provider} instance with default property values.
	 * </p>
	 */
	public Provider() {
		super();
		setRendererType(COMPONENT_TYPE);
	}

	public String getFamily() {
		return (COMPONENT_TYPE);
	}

	private String id;

	/**
	 * The unique id of the provider (defaults to an <a
	 * href="output/Ext.html#Ext-id" ext:member="id" ext:cls="Ext">auto-assigned
	 * id</a>). You should assign an id if youneed to be able to access the
	 * provider later and you do not have an object reference available, for
	 * example:
	 * 
	 * <pre>
	 * &lt;code&gt;Ext.Direct.addProvider(
	 *     {
	 *         type: &lt;em&gt;'polling'&lt;/em&gt;,
	 *         url:  &lt;em&gt;'php/poll.php'&lt;/em&gt;,
	 *         id:   &lt;em&gt;'poll-provider'&lt;/em&gt;
	 *     }
	 * );
	 *      
	 * &lt;b&gt;var&lt;/b&gt; p = &lt;a href=&quot;output/Ext.Direct.html&quot; ext:cls=&quot;Ext.Direct&quot;&gt;Ext.Direct&lt;/a&gt;.&lt;a href=&quot;output/Ext.Direct.html#Ext.Direct-getProvider&quot; ext:member=&quot;getProvider&quot; ext:cls=&quot;Ext.Direct&quot;&gt;getProvider&lt;/a&gt;(&lt;em&gt;'poll-provider'&lt;/em&gt;);
	 * p.disconnect();&lt;/code&gt;
	 * </pre>
	 */
	public String getId() {
		if (null != this.id) {
			return this.id;
		}
		ValueExpression _ve = getValueExpression("id");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>id</code> property.
	 * </p>
	 */
	public void setId(String id) {
		this.id = id;
		handleConfig("id", id);
	}

	private Integer priority;

	/**
	 * Priority of the request. Lower is higherpriority, <tt>0</tt> means
	 * "duplex" (always on). All Providers default to <tt>1</tt> except for
	 * PollingProvider which defaults to <tt>3</tt>.
	 */
	public Integer getPriority() {
		if (null != this.priority) {
			return this.priority;
		}
		ValueExpression _ve = getValueExpression("priority");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>priority</code> property.
	 * </p>
	 */
	public void setPriority(Integer priority) {
		this.priority = priority;
		handleConfig("priority", priority);
	}

	private String type;

	/**
	 * <b>Required</b>, <tt>undefined</tt> by default.The <tt>type</tt> of
	 * provider specified to <a href="output/Ext.Direct.html"
	 * ext:cls="Ext.Direct">Ext.Direct</a>.<a
	 * href="output/Ext.Direct.html#Ext.Direct-addProvider"
	 * ext:member="addProvider" ext:cls="Ext.Direct">addProvider</a> to create a
	 * new Provider. Acceptable values by default are:
	 * 
	 * <div class="mdetail-params">
	 * <ul>
	 * <li><b><tt>polling</tt></b> : <a
	 * href="output/Ext.direct.PollingProvider.html"
	 * ext:cls="Ext.direct.PollingProvider">PollingProvider</a></li>
	 * 
	 * <li><b><tt>remoting</tt></b> : <a
	 * href="output/Ext.direct.RemotingProvider.html"
	 * ext:cls="Ext.direct.RemotingProvider">RemotingProvider</a></li>
	 * </ul>
	 * </div>
	 */
	public String getType() {
		if (null != this.type) {
			return this.type;
		}
		ValueExpression _ve = getValueExpression("type");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>type</code> property.
	 * </p>
	 */
	public void setType(String type) {
		this.type = type;
		handleConfig("type", type);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[4];
		}
		_values[0] = super.saveState(_context);
		_values[1] = id;
		_values[2] = priority;
		_values[3] = type;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.id = (String) _values[1];
		this.handleConfig("id", this.id);
		this.priority = (Integer) _values[2];
		this.handleConfig("priority", this.priority);
		this.type = (String) _values[3];
		this.handleConfig("type", this.type);

	}
}
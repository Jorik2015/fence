package ext.tree;

import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.base.ExtOutput;

/**
 *Note:This java code is auto generated by abner,do not edit it. This class
 * provides the default UI implementation for <b>root</b> Ext TreeNodes. The
 * RootTreeNode UI implementation allows customizing the appearance of the root
 * tree node.<br>
 * <p>
 * If you are customizing the Tree's user interface, you may need to extend this
 * class, but you should never need to instantiate this class.<br>
 * </p>
 */
@InstanceOf("Ext.tree.RootTreeNodeUI")
public class RootTreeNodeUI extends ExtOutput {
	public static final String COMPONENT_TYPE = "Ext.tree.RootTreeNodeUI";
	public static final String COMPONENT_FAMILY = "Ext.tree.RootTreeNodeUI";

	/**
	 * <p>
	 * Create a new {@link RootTreeNodeUI} instance with default property
	 * values.
	 * </p>
	 */
	public RootTreeNodeUI() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[1];
		}
		_values[0] = super.saveState(_context);

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);

	}
}
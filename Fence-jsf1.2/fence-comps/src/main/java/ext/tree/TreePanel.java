package ext.tree;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.Panel;
import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.XType;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * The TreePanel provides tree-structured UI representation of tree-structured
 * data.
 * </p>
 * 
 * <p>
 * <a href="output/Ext.tree.TreeNode.html"
 * ext:cls="Ext.tree.TreeNode">TreeNode</a>s added to the TreePanel may each
 * contain metadata used by your application in their <a
 * href="output/Ext.tree.TreeNode.html#Ext.tree.TreeNode-attributes"
 * ext:member="attributes" ext:cls="Ext.tree.TreeNode">attributes</a> property.
 * </p>
 * 
 * <p>
 * <b>A TreePanel must have a <a
 * href="output/Ext.tree.TreePanel.html#Ext.tree.TreePanel-root"
 * ext:member="root" ext:cls="Ext.tree.TreePanel">root</a> node before it is
 * rendered.</b> This may either be specified using the <a
 * href="output/Ext.tree.TreePanel.html#Ext.tree.TreePanel-root"
 * ext:member="root" ext:cls="Ext.tree.TreePanel">root</a> config option, or
 * using the <a
 * href="output/Ext.tree.TreePanel.html#Ext.tree.TreePanel-setRootNode"
 * ext:member="setRootNode" ext:cls="Ext.tree.TreePanel">setRootNode</a> method.
 * </p>
 * 
 * <p>
 * An example of tree rendered to an existing div:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;var&lt;/b&gt; tree = &lt;b&gt;new&lt;/b&gt; Ext.tree.TreePanel({
 *     renderTo: &lt;em&gt;'tree-div'&lt;/em&gt;,
 *     useArrows: true,
 *     autoScroll: true,
 *     animate: true,
 *     enableDD: true,
 *     containerScroll: true,
 *     border: false,
 *     &lt;i&gt;// auto create TreeLoader
 * &lt;/i&gt;
 *     dataUrl: &lt;em&gt;'get-nodes.php'&lt;/em&gt;,
 * 
 *     root: {
 *         nodeType: &lt;em&gt;'async'&lt;/em&gt;,
 *         text: &lt;em&gt;'Ext JS'&lt;/em&gt;,
 *         draggable: false,
 *         id: &lt;em&gt;'source'&lt;/em&gt;
 *     }
 * });
 * 
 * tree.getRootNode().expand();&lt;/code&gt;
 * </pre>
 * 
 * <p>
 * The example above would work with a data packet similar to this:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;[{
 *     &lt;em&gt;&quot;text&quot;&lt;/em&gt;: &lt;em&gt;&quot;adapter&quot;&lt;/em&gt;,
 *     &lt;em&gt;&quot;id&quot;&lt;/em&gt;: &lt;em&gt;&quot;source\/adapter&quot;&lt;/em&gt;,
 *     &lt;em&gt;&quot;cls&quot;&lt;/em&gt;: &lt;em&gt;&quot;folder&quot;&lt;/em&gt;
 * }, {
 *     &lt;em&gt;&quot;text&quot;&lt;/em&gt;: &lt;em&gt;&quot;dd&quot;&lt;/em&gt;,
 *     &lt;em&gt;&quot;id&quot;&lt;/em&gt;: &lt;em&gt;&quot;source\/dd&quot;&lt;/em&gt;,
 *     &lt;em&gt;&quot;cls&quot;&lt;/em&gt;: &lt;em&gt;&quot;folder&quot;&lt;/em&gt;
 * }, {
 *     &lt;em&gt;&quot;text&quot;&lt;/em&gt;: &lt;em&gt;&quot;debug.js&quot;&lt;/em&gt;,
 *     &lt;em&gt;&quot;id&quot;&lt;/em&gt;: &lt;em&gt;&quot;source\/debug.js&quot;&lt;/em&gt;,
 *     &lt;em&gt;&quot;leaf&quot;&lt;/em&gt;: true,
 *     &lt;em&gt;&quot;cls&quot;&lt;/em&gt;: &lt;em&gt;&quot;file&quot;&lt;/em&gt;
 * }]&lt;/code&gt;
 * </pre>
 * 
 * <p>
 * An example of tree within a Viewport:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;new&lt;/b&gt; Ext.Viewport({
 *     layout: &lt;em&gt;'border'&lt;/em&gt;,
 *     items: [{
 *         region: &lt;em&gt;'west'&lt;/em&gt;,
 *         collapsible: true,
 *         title: &lt;em&gt;'Navigation'&lt;/em&gt;,
 *         xtype: &lt;em&gt;'treepanel'&lt;/em&gt;,
 *         width: 200,
 *         autoScroll: true,
 *         split: true,
 *         loader: &lt;b&gt;new&lt;/b&gt; Ext.tree.TreeLoader(),
 *         root: &lt;b&gt;new&lt;/b&gt; Ext.tree.AsyncTreeNode({
 *             expanded: true,
 *             children: [{
 *                 text: &lt;em&gt;'Menu Option 1'&lt;/em&gt;,
 *                 leaf: true
 *             }, {
 *                 text: &lt;em&gt;'Menu Option 2'&lt;/em&gt;,
 *                 leaf: true
 *             }, {
 *                 text: &lt;em&gt;'Menu Option 3'&lt;/em&gt;,
 *                 leaf: true
 *             }]
 *         }),
 *         rootVisible: false,
 *         listeners: {
 *             click: &lt;b&gt;function&lt;/b&gt;(n) {
 *                 Ext.Msg.alert(&lt;em&gt;'Navigation Tree Click'&lt;/em&gt;, &lt;em&gt;'You clicked:&lt;/em&gt; &quot;'&lt;/code&gt; + n.attributes.text + &lt;em&gt;'&quot;&lt;/em&gt;');
 *             }
 *         }
 *     }, {
 *         region: &lt;em&gt;'center'&lt;/em&gt;,
 *         xtype: &lt;em&gt;'tabpanel'&lt;/em&gt;,
 *         &lt;i&gt;// remaining code not shown ...
 * &lt;/i&gt;
 *     }]
 * });
 * </pre>
 */
@XType("treepanel")
@InstanceOf("Ext.tree.TreePanel")
public class TreePanel extends Panel {
	public static final String COMPONENT_TYPE = "Ext.tree.TreePanel";
	public static final String COMPONENT_FAMILY = "Ext.tree.TreePanel";

	/**
	 * <p>
	 * Create a new {@link TreePanel} instance with default property values.
	 * </p>
	 */
	public TreePanel() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Boolean animate;

	/**
	 * <tt>true</tt> to enable animated expand/collapse(defaults to the value of
	 * <a href="output/Ext.html#Ext-enableFx" ext:member="enableFx"
	 * ext:cls="Ext">Ext.enableFx</a>)
	 */
	public Boolean getAnimate() {
		if (null != this.animate) {
			return this.animate;
		}
		ValueExpression _ve = getValueExpression("animate");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>animate</code> property.
	 * </p>
	 */
	public void setAnimate(Boolean animate) {
		this.animate = animate;
		this.handleConfig("animate", animate);
	}

	private Boolean containerScroll;

	/**
	 * <tt>true</tt> to register this container withScrollManager
	 */
	public Boolean getContainerScroll() {
		if (null != this.containerScroll) {
			return this.containerScroll;
		}
		ValueExpression _ve = getValueExpression("containerScroll");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>containerScroll</code> property.
	 * </p>
	 */
	public void setContainerScroll(Boolean containerScroll) {
		this.containerScroll = containerScroll;
		this.handleConfig("containerScroll", containerScroll);
	}

	private Boolean ddAppendOnly;

	/**
	 * <tt>true</tt> if the tree should only allowappend drops (use for trees
	 * which are sorted)
	 */
	public Boolean getDdAppendOnly() {
		if (null != this.ddAppendOnly) {
			return this.ddAppendOnly;
		}
		ValueExpression _ve = getValueExpression("ddAppendOnly");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>ddAppendOnly</code> property.
	 * </p>
	 */
	public void setDdAppendOnly(Boolean ddAppendOnly) {
		this.ddAppendOnly = ddAppendOnly;
		this.handleConfig("ddAppendOnly", ddAppendOnly);
	}

	private String ddGroup;

	/**
	 * The DD group this TreePanel belongs to
	 */
	public String getDdGroup() {
		if (null != this.ddGroup) {
			return this.ddGroup;
		}
		ValueExpression _ve = getValueExpression("ddGroup");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>ddGroup</code> property.
	 * </p>
	 */
	public void setDdGroup(String ddGroup) {
		this.ddGroup = ddGroup;
		this.handleConfig("ddGroup", ddGroup);
	}

	private Boolean ddScroll;

	/**
	 * <tt>true</tt> to enable body scrolling
	 */
	public Boolean getDdScroll() {
		if (null != this.ddScroll) {
			return this.ddScroll;
		}
		ValueExpression _ve = getValueExpression("ddScroll");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>ddScroll</code> property.
	 * </p>
	 */
	public void setDdScroll(Boolean ddScroll) {
		this.ddScroll = ddScroll;
		this.handleConfig("ddScroll", ddScroll);
	}

	private Object dragConfig;

	/**
	 * Custom config to pass to the <a href="output/Ext.tree.TreeDragZone.html"
	 * ext:cls="Ext.tree.TreeDragZone">Ext.tree.TreeDragZone</a>instance
	 */
	@ClientConfig(JsonMode.Object)
	public Object getDragConfig() {
		if (null != this.dragConfig) {
			return this.dragConfig;
		}
		ValueExpression _ve = getValueExpression("dragConfig");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>dragConfig</code> property.
	 * </p>
	 */
	public void setDragConfig(Object dragConfig) {
		this.dragConfig = dragConfig;
		this.handleConfig("dragConfig", dragConfig);
	}

	private Object dropConfig;

	/**
	 * Custom config to pass to the <a href="output/Ext.tree.TreeDropZone.html"
	 * ext:cls="Ext.tree.TreeDropZone">Ext.tree.TreeDropZone</a>instance
	 */
	@ClientConfig(JsonMode.Object)
	public Object getDropConfig() {
		if (null != this.dropConfig) {
			return this.dropConfig;
		}
		ValueExpression _ve = getValueExpression("dropConfig");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>dropConfig</code> property.
	 * </p>
	 */
	public void setDropConfig(Object dropConfig) {
		this.dropConfig = dropConfig;
		this.handleConfig("dropConfig", dropConfig);
	}

	private Boolean enableDD;

	/**
	 * <tt>true</tt> to enable drag and drop
	 */
	public Boolean getEnableDD() {
		if (null != this.enableDD) {
			return this.enableDD;
		}
		ValueExpression _ve = getValueExpression("enableDD");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>enableDD</code> property.
	 * </p>
	 */
	public void setEnableDD(Boolean enableDD) {
		this.enableDD = enableDD;
		this.handleConfig("enableDD", enableDD);
	}

	private Boolean enableDrag;

	/**
	 * <tt>true</tt> to enable just drag
	 */
	public Boolean getEnableDrag() {
		if (null != this.enableDrag) {
			return this.enableDrag;
		}
		ValueExpression _ve = getValueExpression("enableDrag");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>enableDrag</code> property.
	 * </p>
	 */
	public void setEnableDrag(Boolean enableDrag) {
		this.enableDrag = enableDrag;
		this.handleConfig("enableDrag", enableDrag);
	}

	private Boolean enableDrop;

	/**
	 * <tt>true</tt> to enable just drop
	 */
	public Boolean getEnableDrop() {
		if (null != this.enableDrop) {
			return this.enableDrop;
		}
		ValueExpression _ve = getValueExpression("enableDrop");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>enableDrop</code> property.
	 * </p>
	 */
	public void setEnableDrop(Boolean enableDrop) {
		this.enableDrop = enableDrop;
		this.handleConfig("enableDrop", enableDrop);
	}

	private String hlColor;

	/**
	 * The color of the node highlight (defaults to<tt>'C3DAF9'</tt>)
	 */
	public String getHlColor() {
		if (null != this.hlColor) {
			return this.hlColor;
		}
		ValueExpression _ve = getValueExpression("hlColor");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>hlColor</code> property.
	 * </p>
	 */
	public void setHlColor(String hlColor) {
		this.hlColor = hlColor;
		this.handleConfig("hlColor", hlColor);
	}

	private Boolean hlDrop;

	/**
	 * <tt>false</tt> to disable node highlight on drop(defaults to the value of
	 * <a href="output/Ext.html#Ext-enableFx" ext:member="enableFx"
	 * ext:cls="Ext">Ext.enableFx</a>)
	 */
	public Boolean getHlDrop() {
		if (null != this.hlDrop) {
			return this.hlDrop;
		}
		ValueExpression _ve = getValueExpression("hlDrop");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>hlDrop</code> property.
	 * </p>
	 */
	public void setHlDrop(Boolean hlDrop) {
		this.hlDrop = hlDrop;
		this.handleConfig("hlDrop", hlDrop);
	}

	private Boolean lines;

	/**
	 * <tt>false</tt> to disable tree lines (defaultsto <tt>true</tt>)
	 */
	public Boolean getLines() {
		if (null != this.lines) {
			return this.lines;
		}
		ValueExpression _ve = getValueExpression("lines");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>lines</code> property.
	 * </p>
	 */
	public void setLines(Boolean lines) {
		this.lines = lines;
		this.handleConfig("lines", lines);
	}

	private Object loader;

	/**
	 * A <a href="output/Ext.tree.TreeLoader.html"
	 * ext:cls="Ext.tree.TreeLoader">Ext.tree.TreeLoader</a> for use withthis
	 * TreePanel
	 */
	@ClientConfig(JsonMode.Object)
	public Object getLoader() {
		if (null != this.loader) {
			return this.loader;
		}
		ValueExpression _ve = getValueExpression("loader");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>loader</code> property.
	 * </p>
	 */
	public void setLoader(Object loader) {
		this.loader = loader;
		this.handleConfig("loader", loader);
	}

	private String pathSeparator;

	/**
	 * The token used to separate sub-paths in pathstrings (defaults to
	 * <tt>'/'</tt>)
	 */
	public String getPathSeparator() {
		if (null != this.pathSeparator) {
			return this.pathSeparator;
		}
		ValueExpression _ve = getValueExpression("pathSeparator");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>pathSeparator</code> property.
	 * </p>
	 */
	public void setPathSeparator(String pathSeparator) {
		this.pathSeparator = pathSeparator;
		this.handleConfig("pathSeparator", pathSeparator);
	}

	private String requestMethod;

	/**
	 * The HTTP request method for loading data(defaults to the value of <a
	 * href="output/Ext.Ajax.html#Ext.Ajax-method" ext:member="method"
	 * ext:cls="Ext.Ajax">Ext.Ajax.method</a>).
	 */
	public String getRequestMethod() {
		if (null != this.requestMethod) {
			return this.requestMethod;
		}
		ValueExpression _ve = getValueExpression("requestMethod");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>requestMethod</code> property.
	 * </p>
	 */
	public void setRequestMethod(String requestMethod) {
		this.requestMethod = requestMethod;
		this.handleConfig("requestMethod", requestMethod);
	}

	private Object root;

	/**
	 * The root node for the tree.
	 */
	@ClientConfig(JsonMode.Object)
	public Object getRoot() {
		if (null != this.root) {
			return this.root;
		}
		ValueExpression _ve = getValueExpression("root");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>root</code> property.
	 * </p>
	 */
	public void setRoot(Object root) {
		this.root = root;
		this.handleConfig("root", root);
	}

	private Boolean rootVisible;

	/**
	 * <tt>false</tt> to hide the root node (defaultsto <tt>true</tt>)
	 */
	public Boolean getRootVisible() {
		if (null != this.rootVisible) {
			return this.rootVisible;
		}
		ValueExpression _ve = getValueExpression("rootVisible");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>rootVisible</code> property.
	 * </p>
	 */
	public void setRootVisible(Boolean rootVisible) {
		this.rootVisible = rootVisible;
		this.handleConfig("rootVisible", rootVisible);
	}

	private Object selModel;

	/**
	 * A tree selection model to use with thisTreePanel (defaults to an <a
	 * href="output/Ext.tree.DefaultSelectionModel.html"
	 * ext:cls="Ext.tree.DefaultSelectionModel"
	 * >Ext.tree.DefaultSelectionModel</a>)
	 */
	@ClientConfig(JsonMode.Object)
	public Object getSelModel() {
		if (null != this.selModel) {
			return this.selModel;
		}
		ValueExpression _ve = getValueExpression("selModel");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>selModel</code> property.
	 * </p>
	 */
	public void setSelModel(Object selModel) {
		this.selModel = selModel;
		this.handleConfig("selModel", selModel);
	}

	private Boolean singleExpand;

	/**
	 * <tt>true</tt> if only 1 node per branch may beexpanded
	 */
	public Boolean getSingleExpand() {
		if (null != this.singleExpand) {
			return this.singleExpand;
		}
		ValueExpression _ve = getValueExpression("singleExpand");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>singleExpand</code> property.
	 * </p>
	 */
	public void setSingleExpand(Boolean singleExpand) {
		this.singleExpand = singleExpand;
		this.handleConfig("singleExpand", singleExpand);
	}

	private Boolean trackMouseOver;

	/**
	 * <tt>false</tt> to disable mouse overhighlighting
	 */
	public Boolean getTrackMouseOver() {
		if (null != this.trackMouseOver) {
			return this.trackMouseOver;
		}
		ValueExpression _ve = getValueExpression("trackMouseOver");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>trackMouseOver</code> property.
	 * </p>
	 */
	public void setTrackMouseOver(Boolean trackMouseOver) {
		this.trackMouseOver = trackMouseOver;
		this.handleConfig("trackMouseOver", trackMouseOver);
	}

	private Boolean useArrows;

	/**
	 * <tt>true</tt> to use Vista-style arrows in thetree (defaults to
	 * <tt>false</tt>)
	 */
	public Boolean getUseArrows() {
		if (null != this.useArrows) {
			return this.useArrows;
		}
		ValueExpression _ve = getValueExpression("useArrows");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>useArrows</code> property.
	 * </p>
	 */
	public void setUseArrows(Boolean useArrows) {
		this.useArrows = useArrows;
		this.handleConfig("useArrows", useArrows);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[23];
		}
		_values[0] = super.saveState(_context);
		_values[1] = animate;
		_values[2] = containerScroll;
		_values[3] = ddAppendOnly;
		_values[4] = ddGroup;
		_values[5] = ddScroll;
		_values[6] = dragConfig;
		_values[7] = dropConfig;
		_values[8] = enableDD;
		_values[9] = enableDrag;
		_values[10] = enableDrop;
		_values[11] = hlColor;
		_values[12] = hlDrop;
		_values[13] = lines;
		_values[14] = loader;
		_values[15] = pathSeparator;
		_values[16] = requestMethod;
		_values[17] = root;
		_values[18] = rootVisible;
		_values[19] = selModel;
		_values[20] = singleExpand;
		_values[21] = trackMouseOver;
		_values[22] = useArrows;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.animate = (Boolean) _values[1];
		this.handleConfig("animate", this.animate);
		this.containerScroll = (Boolean) _values[2];
		this.handleConfig("containerScroll", this.containerScroll);
		this.ddAppendOnly = (Boolean) _values[3];
		this.handleConfig("ddAppendOnly", this.ddAppendOnly);
		this.ddGroup = (String) _values[4];
		this.handleConfig("ddGroup", this.ddGroup);
		this.ddScroll = (Boolean) _values[5];
		this.handleConfig("ddScroll", this.ddScroll);
		this.dragConfig = (Object) _values[6];
		this.handleConfig("dragConfig", this.dragConfig);
		this.dropConfig = (Object) _values[7];
		this.handleConfig("dropConfig", this.dropConfig);
		this.enableDD = (Boolean) _values[8];
		this.handleConfig("enableDD", this.enableDD);
		this.enableDrag = (Boolean) _values[9];
		this.handleConfig("enableDrag", this.enableDrag);
		this.enableDrop = (Boolean) _values[10];
		this.handleConfig("enableDrop", this.enableDrop);
		this.hlColor = (String) _values[11];
		this.handleConfig("hlColor", this.hlColor);
		this.hlDrop = (Boolean) _values[12];
		this.handleConfig("hlDrop", this.hlDrop);
		this.lines = (Boolean) _values[13];
		this.handleConfig("lines", this.lines);
		this.loader = (Object) _values[14];
		this.handleConfig("loader", this.loader);
		this.pathSeparator = (String) _values[15];
		this.handleConfig("pathSeparator", this.pathSeparator);
		this.requestMethod = (String) _values[16];
		this.handleConfig("requestMethod", this.requestMethod);
		this.root = (Object) _values[17];
		this.handleConfig("root", this.root);
		this.rootVisible = (Boolean) _values[18];
		this.handleConfig("rootVisible", this.rootVisible);
		this.selModel = (Object) _values[19];
		this.handleConfig("selModel", this.selModel);
		this.singleExpand = (Boolean) _values[20];
		this.handleConfig("singleExpand", this.singleExpand);
		this.trackMouseOver = (Boolean) _values[21];
		this.handleConfig("trackMouseOver", this.trackMouseOver);
		this.useArrows = (Boolean) _values[22];
		this.handleConfig("useArrows", this.useArrows);

	}
}
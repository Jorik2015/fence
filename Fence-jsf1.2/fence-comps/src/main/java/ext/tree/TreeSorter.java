package ext.tree;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.base.ExtOutput;

/**
 *Note:This java code is auto generated by abner,do not edit it. Provides
 * sorting of nodes in a <a href="output/Ext.tree.TreePanel.html"
 * ext:cls="Ext.tree.TreePanel">Ext.tree.TreePanel</a>. The TreeSorter
 * automatically monitors events on the associated TreePanel that might affect
 * the tree's sort order (beforechildrenrendered, append, insert and
 * textchange). Example usage:<br>
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;new&lt;/b&gt; Ext.tree.TreeSorter(myTree, {
 *     folderSort: true,
 *     dir: &lt;em&gt;&quot;desc&quot;&lt;/em&gt;,
 *     sortType: &lt;b&gt;function&lt;/b&gt;(node) {
 *         &lt;i&gt;// sort by a custom, typed attribute:
 * &lt;/i&gt;
 *         &lt;b&gt;return&lt;/b&gt; parseInt(node.id, 10);
 *     }
 * });&lt;/code&gt;
 * </pre>
 */
@InstanceOf("Ext.tree.TreeSorter")
public class TreeSorter extends ExtOutput {
	public static final String COMPONENT_TYPE = "Ext.tree.TreeSorter";
	public static final String COMPONENT_FAMILY = "Ext.tree.TreeSorter";

	/**
	 * <p>
	 * Create a new {@link TreeSorter} instance with default property values.
	 * </p>
	 */
	public TreeSorter() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Boolean caseSensitive;

	/**
	 * true for case-sensitive sort (defaults tofalse)
	 */
	public Boolean getCaseSensitive() {
		if (null != this.caseSensitive) {
			return this.caseSensitive;
		}
		ValueExpression _ve = getValueExpression("caseSensitive");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>caseSensitive</code> property.
	 * </p>
	 */
	public void setCaseSensitive(Boolean caseSensitive) {
		this.caseSensitive = caseSensitive;
		this.handleConfig("caseSensitive", caseSensitive);
	}

	private String dir;

	/**
	 * The direction to sort ("asc" or "desc,"case-insensitive, defaults to
	 * "asc")
	 */
	public String getDir() {
		if (null != this.dir) {
			return this.dir;
		}
		ValueExpression _ve = getValueExpression("dir");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>dir</code> property.
	 * </p>
	 */
	public void setDir(String dir) {
		this.dir = dir;
		this.handleConfig("dir", dir);
	}

	private Boolean folderSort;

	/**
	 * True to sort leaf nodes under non-leaf nodes(defaults to false)
	 */
	public Boolean getFolderSort() {
		if (null != this.folderSort) {
			return this.folderSort;
		}
		ValueExpression _ve = getValueExpression("folderSort");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>folderSort</code> property.
	 * </p>
	 */
	public void setFolderSort(Boolean folderSort) {
		this.folderSort = folderSort;
		this.handleConfig("folderSort", folderSort);
	}

	private String leafAttr;

	/**
	 * The attribute used to determine leaf nodes when<a
	 * href="output/Ext.tree.TreeSorter.html#Ext.tree.TreeSorter-folderSort"
	 * ext:member="folderSort" ext:cls="Ext.tree.TreeSorter">folderSort</a> =
	 * true (defaults to "leaf")
	 */
	public String getLeafAttr() {
		if (null != this.leafAttr) {
			return this.leafAttr;
		}
		ValueExpression _ve = getValueExpression("leafAttr");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>leafAttr</code> property.
	 * </p>
	 */
	public void setLeafAttr(String leafAttr) {
		this.leafAttr = leafAttr;
		this.handleConfig("leafAttr", leafAttr);
	}

	private String property;

	/**
	 * The named attribute on the node to sort by(defaults to "text"). Note that
	 * this property is only used if no <a
	 * href="output/Ext.tree.TreeSorter.html#Ext.tree.TreeSorter-sortType"
	 * ext:member="sortType" ext:cls="Ext.tree.TreeSorter">sortType</a> function
	 * is specified, otherwise it is ignored.
	 */
	public String getProperty() {
		if (null != this.property) {
			return this.property;
		}
		ValueExpression _ve = getValueExpression("property");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>property</code> property.
	 * </p>
	 */
	public void setProperty(String property) {
		this.property = property;
		this.handleConfig("property", property);
	}

	private Object sortType;

	/**
	 * A custom "casting" function used to convert nodevalues before sorting.
	 * The function will be called with a single parameter (the <a
	 * href="output/Ext.tree.TreeNode.html"
	 * ext:cls="Ext.tree.TreeNode">Ext.tree.TreeNode</a> being evaluated) and is
	 * expected to return the node's sort value cast to the specific data type
	 * required for sorting. This could be used, for example, when a node's text
	 * (or other attribute) should be sorted as a date or numeric value. See the
	 * class description for example usage. Note that if a sortType is
	 * specified, any <a
	 * href="output/Ext.tree.TreeSorter.html#Ext.tree.TreeSorter-property"
	 * ext:member="property" ext:cls="Ext.tree.TreeSorter">property</a> config
	 * will be ignored.
	 */
	@ClientConfig(JsonMode.Function)
	public Object getSortType() {
		if (null != this.sortType) {
			return this.sortType;
		}
		ValueExpression _ve = getValueExpression("sortType");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>sortType</code> property.
	 * </p>
	 */
	public void setSortType(Object sortType) {
		this.sortType = sortType;
		this.handleConfig("sortType", sortType);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[7];
		}
		_values[0] = super.saveState(_context);
		_values[1] = caseSensitive;
		_values[2] = dir;
		_values[3] = folderSort;
		_values[4] = leafAttr;
		_values[5] = property;
		_values[6] = sortType;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.caseSensitive = (Boolean) _values[1];
		this.handleConfig("caseSensitive", this.caseSensitive);
		this.dir = (String) _values[2];
		this.handleConfig("dir", this.dir);
		this.folderSort = (Boolean) _values[3];
		this.handleConfig("folderSort", this.folderSort);
		this.leafAttr = (String) _values[4];
		this.handleConfig("leafAttr", this.leafAttr);
		this.property = (String) _values[5];
		this.handleConfig("property", this.property);
		this.sortType = (Object) _values[6];
		this.handleConfig("sortType", this.sortType);

	}
}
package ext.dd;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.base.ExtOutput;

/**
 *Note:This java code is auto generated by abner,do not edit it. A specialized
 * drag proxy that supports a drop status icon, <a href="output/Ext.Layer.html"
 * ext:cls="Ext.Layer">Ext.Layer</a> styles and auto-repair. This is the default
 * drag proxy used by all Ext.dd components.
 */
public class StatusProxy extends ExtOutput {
	public static final String COMPONENT_TYPE = "Ext.dd.StatusProxy";

	/**
	 * <p>
	 * Create a new {@link StatusProxy} instance with default property values.
	 * </p>
	 */
	public StatusProxy() {
		super();
		setRendererType(COMPONENT_TYPE);
	}

	public String getFamily() {
		return (COMPONENT_TYPE);
	}

	private String dropAllowed;

	/**
	 * The CSS class to apply to the status elementwhen drop is allowed
	 * (defaults to "x-dd-drop-ok").
	 */
	public String getDropAllowed() {
		if (null != this.dropAllowed) {
			return this.dropAllowed;
		}
		ValueExpression _ve = getValueExpression("dropAllowed");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>dropAllowed</code> property.
	 * </p>
	 */
	public void setDropAllowed(String dropAllowed) {
		this.dropAllowed = dropAllowed;
		handleConfig("dropAllowed", dropAllowed);
	}

	private String dropNotAllowed;

	/**
	 * The CSS class to apply to the status elementwhen drop is not allowed
	 * (defaults to "x-dd-drop-nodrop").
	 */
	public String getDropNotAllowed() {
		if (null != this.dropNotAllowed) {
			return this.dropNotAllowed;
		}
		ValueExpression _ve = getValueExpression("dropNotAllowed");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>dropNotAllowed</code> property.
	 * </p>
	 */
	public void setDropNotAllowed(String dropNotAllowed) {
		this.dropNotAllowed = dropNotAllowed;
		handleConfig("dropNotAllowed", dropNotAllowed);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[3];
		}
		_values[0] = super.saveState(_context);
		_values[1] = dropAllowed;
		_values[2] = dropNotAllowed;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.dropAllowed = (String) _values[1];
		this.handleConfig("dropAllowed", this.dropAllowed);
		this.dropNotAllowed = (String) _values[2];
		this.handleConfig("dropNotAllowed", this.dropNotAllowed);

	}
}
package ext.dd;

import javax.faces.context.FacesContext;

import ext.base.ExtOutput;

/**
 *Note:This java code is auto generated by abner,do not edit it. Defines the
 * interface and base operation of items that that can be dragged or can be drop
 * targets. It was designed to be extended, overriding the event handlers for
 * startDrag, onDrag, onDragOver and onDragOut. Up to three html elements can be
 * associated with a DragDrop instance:
 * 
 * <ul>
 * <li>linked element: the element that is passed into the constructor. This is
 * the element which defines the boundaries for interaction with other DragDrop
 * objects.</li>
 * 
 * <li>handle element(s): The drag operation only occurs if the element that was
 * clicked matches a handle element. By default this is the linked element, but
 * there are times that you will want only a portion of the linked element to
 * initiate the drag operation, and the setHandleElId() method provides a way to
 * define this.</li>
 * 
 * <li>drag element: this represents the element that would be moved along with
 * the cursor during a drag operation. By default, this is the linked element
 * itself as in <a href="output/Ext.dd.DD.html"
 * ext:cls="Ext.dd.DD">Ext.dd.DD</a>. setDragElId() lets you define a separate
 * element that would be moved, as in <a href="output/Ext.dd.DDProxy.html"
 * ext:cls="Ext.dd.DDProxy">Ext.dd.DDProxy</a>.</li>
 * </ul>
 * 
 * This class should not be instantiated until the onload event to ensure that
 * the associated elements are available. The following would define a DragDrop
 * obj that would interact with any other DragDrop obj in the "group1" group:
 * 
 * <pre>
 * dd = new Ext.dd.DragDrop(&quot;div1&quot;, &quot;group1&quot;);
 * </pre>
 * 
 * Since none of the event handlers have been implemented, nothing would
 * actually happen if you were to run the code above. Normally you would
 * override this class or one of the default implementations, but you can also
 * override the methods you want on an instance of the class...
 * 
 * <pre>
 * dd.onDragDrop = function(e, id) {
 *   alert(&quot;dd was dropped on &quot; + id);
 * }
 * </pre>
 */
public class DragDrop extends ExtOutput {
	public static final String COMPONENT_TYPE = "Ext.dd.DragDrop";

	/**
	 * <p>
	 * Create a new {@link DragDrop} instance with default property values.
	 * </p>
	 */
	public DragDrop() {
		super();
		setRendererType(COMPONENT_TYPE);
	}

	public String getFamily() {
		return (COMPONENT_TYPE);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[1];
		}
		_values[0] = super.saveState(_context);

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);

	}
}
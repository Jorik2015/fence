package ext.dd;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.util.Observable;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 */
public class DragTracker extends Observable {
	public static final String COMPONENT_TYPE = "Ext.dd.DragTracker";

	/**
	 * <p>
	 * Create a new {@link DragTracker} instance with default property values.
	 * </p>
	 */
	public DragTracker() {
		super();
		setRendererType(COMPONENT_TYPE);
	}

	public String getFamily() {
		return (COMPONENT_TYPE);
	}

	private Boolean active;

	/**
	 * Defaults to <tt>false</tt>.
	 */
	public Boolean getActive() {
		if (null != this.active) {
			return this.active;
		}
		ValueExpression _ve = getValueExpression("active");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>active</code> property.
	 * </p>
	 */
	public void setActive(Boolean active) {
		this.active = active;
		handleConfig("active", active);
	}

	private Boolean autoStart;

	/**
	 * Defaults to <tt>false</tt>. Specify <tt>true</tt>to defer trigger start
	 * by 1000 ms. Specify a Number for the number of milliseconds to defer
	 * trigger start.
	 */
	public Boolean getAutoStart() {
		if (null != this.autoStart) {
			return this.autoStart;
		}
		ValueExpression _ve = getValueExpression("autoStart");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>autoStart</code> property.
	 * </p>
	 */
	public void setAutoStart(Boolean autoStart) {
		this.autoStart = autoStart;
		handleConfig("autoStart", autoStart);
	}

	private Integer tolerance;

	/**
	 * Defaults to <tt>5</tt>.
	 */
	public Integer getTolerance() {
		if (null != this.tolerance) {
			return this.tolerance;
		}
		ValueExpression _ve = getValueExpression("tolerance");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>tolerance</code> property.
	 * </p>
	 */
	public void setTolerance(Integer tolerance) {
		this.tolerance = tolerance;
		handleConfig("tolerance", tolerance);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[4];
		}
		_values[0] = super.saveState(_context);
		_values[1] = active;
		_values[2] = autoStart;
		_values[3] = tolerance;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.active = (Boolean) _values[1];
		this.handleConfig("active", this.active);
		this.autoStart = (Boolean) _values[2];
		this.handleConfig("autoStart", this.autoStart);
		this.tolerance = (Integer) _values[3];
		this.handleConfig("tolerance", this.tolerance);

	}
}
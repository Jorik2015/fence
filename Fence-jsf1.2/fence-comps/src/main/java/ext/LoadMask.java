package ext;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.base.ExtOutput;

/**
 *Note:This java code is auto generated by abner,do not edit it. A simple
 * utility class for generically masking elements while loading data. If the <a
 * href="output/Ext.LoadMask.html#Ext.LoadMask-store" ext:member="store"
 * ext:cls="Ext.LoadMask">store</a> config option is specified, the masking will
 * be automatically synchronized with the store's loading process and the mask
 * element will be cached for reuse. For all other elements, this mask will
 * replace the element's Updater load indicator and will be destroyed after the
 * initial load.
 * 
 * <p>
 * Example usage:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;i&gt;// Basic mask:&lt;/i&gt;
 * &lt;b&gt;var&lt;/b&gt; myMask = &lt;b&gt;new&lt;/b&gt; Ext.LoadMask(Ext.getBody(), {msg:&lt;em&gt;&quot;Please wait...&quot;&lt;/em&gt;});
 * myMask.show();&lt;/code&gt;
 * </pre>
 */
@InstanceOf("Ext.LoadMask")
public class LoadMask extends ExtOutput {
	public static final String COMPONENT_TYPE = "Ext.LoadMask";
	public static final String COMPONENT_FAMILY = "Ext.LoadMask";

	/**
	 * <p>
	 * Create a new {@link LoadMask} instance with default property values.
	 * </p>
	 */
	public LoadMask() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private String msg;

	/**
	 * The text to display in a centered loadingmessage box (defaults to
	 * 'Loading...')
	 */
	public String getMsg() {
		if (null != this.msg) {
			return this.msg;
		}
		ValueExpression _ve = getValueExpression("msg");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>msg</code> property.
	 * </p>
	 */
	public void setMsg(String msg) {
		this.msg = msg;
		this.handleConfig("msg", msg);
	}

	private String msgCls;

	/**
	 * The CSS class to apply to the loading messageelement (defaults to
	 * "x-mask-loading")
	 */
	public String getMsgCls() {
		if (null != this.msgCls) {
			return this.msgCls;
		}
		ValueExpression _ve = getValueExpression("msgCls");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>msgCls</code> property.
	 * </p>
	 */
	public void setMsgCls(String msgCls) {
		this.msgCls = msgCls;
		this.handleConfig("msgCls", msgCls);
	}

	private Boolean removeMask;

	/**
	 * True to create a single-use mask that isautomatically destroyed after
	 * loading (useful for page loads), False to persist the mask element
	 * reference for multiple uses (e.g., for paged data widgets). Defaults to
	 * false.
	 */
	public Boolean getRemoveMask() {
		if (null != this.removeMask) {
			return this.removeMask;
		}
		ValueExpression _ve = getValueExpression("removeMask");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>removeMask</code> property.
	 * </p>
	 */
	public void setRemoveMask(Boolean removeMask) {
		this.removeMask = removeMask;
		this.handleConfig("removeMask", removeMask);
	}

	private Object store;

	/**
	 * Optional Store to which the mask is bound. Themask is displayed when a
	 * load request is issued, and hidden on either load sucess, or load fail.
	 */
	@ClientConfig(JsonMode.Object)
	public Object getStore() {
		if (null != this.store) {
			return this.store;
		}
		ValueExpression _ve = getValueExpression("store");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>store</code> property.
	 * </p>
	 */
	public void setStore(Object store) {
		this.store = store;
		this.handleConfig("store", store);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[5];
		}
		_values[0] = super.saveState(_context);
		_values[1] = msg;
		_values[2] = msgCls;
		_values[3] = removeMask;
		_values[4] = store;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.msg = (String) _values[1];
		this.handleConfig("msg", this.msg);
		this.msgCls = (String) _values[2];
		this.handleConfig("msgCls", this.msgCls);
		this.removeMask = (Boolean) _values[3];
		this.handleConfig("removeMask", this.removeMask);
		this.store = (Object) _values[4];
		this.handleConfig("store", this.store);

	}
}
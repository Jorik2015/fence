package ext;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;

/**
 *Note:This java code is auto generated by abner,do not edit it. A specialized
 * tooltip class for tooltips that can be specified in markup and automatically
 * managed by the global <a href="output/Ext.QuickTips.html"
 * ext:cls="Ext.QuickTips">Ext.QuickTips</a> instance. See the QuickTips class
 * header for additional usage details and examples.
 */
@InstanceOf("Ext.QuickTip")
public class QuickTip extends ToolTip {
	public static final String COMPONENT_TYPE = "Ext.QuickTip";
	public static final String COMPONENT_FAMILY = "Ext.QuickTip";

	/**
	 * <p>
	 * Create a new {@link QuickTip} instance with default property values.
	 * </p>
	 */
	public QuickTip() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Boolean interceptTitles;

	/**
	 * True to automatically use the element's DOMtitle value if available
	 * (defaults to false).
	 */
	public Boolean getInterceptTitles() {
		if (null != this.interceptTitles) {
			return this.interceptTitles;
		}
		ValueExpression _ve = getValueExpression("interceptTitles");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>interceptTitles</code> property.
	 * </p>
	 */
	public void setInterceptTitles(Boolean interceptTitles) {
		this.interceptTitles = interceptTitles;
		this.handleConfig("interceptTitles", interceptTitles);
	}

	private Object target;

	/**
	 * The target HTMLElement, Ext.Element or id toassociate with this quicktip
	 * (defaults to the document).
	 */
	public Object getTarget() {
		if (null != this.target) {
			return this.target;
		}
		ValueExpression _ve = getValueExpression("target");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>target</code> property.
	 * </p>
	 */
	public void setTarget(Object target) {
		this.target = target;
		this.handleConfig("target", target);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[3];
		}
		_values[0] = super.saveState(_context);
		_values[1] = interceptTitles;
		_values[2] = target;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.interceptTitles = (Boolean) _values[1];
		this.handleConfig("interceptTitles", this.interceptTitles);
		this.target = (Object) _values[2];
		this.handleConfig("target", this.target);

	}
}
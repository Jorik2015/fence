package ext;

import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.util.Observable;

/**
 *Note:This java code is auto generated by abner,do not edit it. Provides
 * AJAX-style update capabilities for Element objects. Updater can be used to <a
 * href="output/Ext.Updater.html#Ext.Updater-update" ext:member="update"
 * ext:cls="Ext.Updater">update</a> an <a href="output/Ext.Element.html"
 * ext:cls="Ext.Element">Ext.Element</a> once, or you can use <a
 * href="output/Ext.Updater.html#Ext.Updater-startAutoRefresh"
 * ext:member="startAutoRefresh" ext:cls="Ext.Updater">startAutoRefresh</a> to
 * set up an auto-updating <a href="output/Ext.Element.html"
 * ext:cls="Ext.Element">Element</a> on a specific interval.<br>
 * <br>
 * Usage:<br>
 * 
 * <pre>
 * <code><b>var</b> el = Ext.get(<em>"foo"</em>); <i>// Get Ext.Element object</i>
 * <b>var</b> mgr = el.getUpdater();
 * mgr.update({
 *         url: <em>"http:<i>//myserver.com/index.php"</i>,</em>
 *         params: {
 *             param1: <em>"foo"</em>,
 *             param2: <em>"bar"</em>
 *         }
 * });
 * ...
 * mgr.formUpdate(<em>"myFormId"</em>, <em>"http:<i>//myserver.com/index.php"</i>);</em>
 * <br>
 * <i>// or directly (returns the same Updater instance)</i>
 * <b>var</b> mgr = <b>new</b> Ext.Updater(<em>"myElementId"</em>);
 * mgr.startAutoRefresh(60, <em>"http:<i>//myserver.com/index.php"</i>);</em>
 * mgr.on(<em>"update"</em>, myFcnNeedsToKnow);
 * <br>
 * <i>// short handed call directly from the element object</i>
 * Ext.get(<em>"foo"</em>).load({
 *         url: <em>"bar.php"</em>,
 *         scripts: true,
 *         params: <em>"param1=foo&amp;param2=bar"</em>,
 *         text: <em>"Loading Foo..."</em>
 * });</code>
 * </pre>
 */
@InstanceOf("Ext.Updater")
public class Updater extends Observable {
	public static final String COMPONENT_TYPE = "Ext.Updater";
	public static final String COMPONENT_FAMILY = "Ext.Updater";

	/**
	 * <p>
	 * Create a new {@link Updater} instance with default property values.
	 * </p>
	 */
	public Updater() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[1];
		}
		_values[0] = super.saveState(_context);

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);

	}
}
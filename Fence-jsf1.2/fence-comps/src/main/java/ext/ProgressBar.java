package ext;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.XType;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * An updateable progress bar component. The progress bar supports two different
 * modes: manual and automatic.
 * </p>
 * 
 * <p>
 * In manual mode, you are responsible for showing, updating (via <a
 * href="output/Ext.ProgressBar.html#Ext.ProgressBar-updateProgress"
 * ext:member="updateProgress" ext:cls="Ext.ProgressBar">updateProgress</a>) and
 * clearing the progress bar as needed from your own code. This method is most
 * appropriate when you want to show progress throughout an operation that has
 * predictable points of interest at which you can update the control.
 * </p>
 * 
 * <p>
 * In automatic mode, you simply call <a
 * href="output/Ext.ProgressBar.html#Ext.ProgressBar-wait" ext:member="wait"
 * ext:cls="Ext.ProgressBar">wait</a> and let the progress bar run indefinitely,
 * only clearing it once the operation is complete. You can optionally have the
 * progress bar wait for a specific amount of time and then clear itself.
 * Automatic mode is most appropriate for timed operations or asynchronous
 * operations in which you have no need for indicating intermediate progress.
 * </p>
 */
@XType("progress")
@InstanceOf("Ext.ProgressBar")
public class ProgressBar extends BoxComponent {
	public static final String COMPONENT_TYPE = "Ext.ProgressBar";
	public static final String COMPONENT_FAMILY = "Ext.ProgressBar";

	/**
	 * <p>
	 * Create a new {@link ProgressBar} instance with default property values.
	 * </p>
	 */
	public ProgressBar() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Boolean animate;

	/**
	 * True to animate the progress bar duringtransitions (defaults to false)
	 */
	public Boolean getAnimate() {
		if (null != this.animate) {
			return this.animate;
		}
		ValueExpression _ve = getValueExpression("animate");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>animate</code> property.
	 * </p>
	 */
	public void setAnimate(Boolean animate) {
		this.animate = animate;
		this.handleConfig("animate", animate);
	}

	private String baseCls;

	/**
	 * The base CSS class to apply to the progressbar's wrapper element
	 * (defaults to 'x-progress')
	 */
	public String getBaseCls() {
		if (null != this.baseCls) {
			return this.baseCls;
		}
		ValueExpression _ve = getValueExpression("baseCls");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>baseCls</code> property.
	 * </p>
	 */
	public void setBaseCls(String baseCls) {
		this.baseCls = baseCls;
		this.handleConfig("baseCls", baseCls);
	}

	private String id;

	/**
	 * The progress bar element's id (defaults to anauto-generated id)
	 */
	public String getId() {
		if (null != this.id) {
			return this.id;
		}
		ValueExpression _ve = getValueExpression("id");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>id</code> property.
	 * </p>
	 */
	public void setId(String id) {
		this.id = id;
		this.handleConfig("id", id);
	}

	private String text;

	/**
	 * The progress bar text (defaults to '')
	 */
	public String getText() {
		if (null != this.text) {
			return this.text;
		}
		ValueExpression _ve = getValueExpression("text");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>text</code> property.
	 * </p>
	 */
	public void setText(String text) {
		this.text = text;
		this.handleConfig("text", text);
	}

	private Object textEl;

	/**
	 * The element to render the progress text to(defaults to the progress bar's
	 * internal text element)
	 */
	@ClientConfig(JsonMode.Object)
	public Object getTextEl() {
		if (null != this.textEl) {
			return this.textEl;
		}
		ValueExpression _ve = getValueExpression("textEl");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>textEl</code> property.
	 * </p>
	 */
	public void setTextEl(Object textEl) {
		this.textEl = textEl;
		this.handleConfig("textEl", textEl);
	}

	private Float value;

	/**
	 * A floating point value between 0 and 1 (e.g.,.5, defaults to 0)
	 */
	public Float getValue() {
		if (null != this.value) {
			return this.value;
		}
		ValueExpression _ve = getValueExpression("value");
		if (_ve != null) {
			return (Float) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>value</code> property.
	 * </p>
	 */
	public void setValue(Float value) {
		this.value = value;
		this.handleConfig("value", value);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[7];
		}
		_values[0] = super.saveState(_context);
		_values[1] = animate;
		_values[2] = baseCls;
		_values[3] = id;
		_values[4] = text;
		_values[5] = textEl;
		_values[6] = value;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.animate = (Boolean) _values[1];
		this.handleConfig("animate", this.animate);
		this.baseCls = (String) _values[2];
		this.handleConfig("baseCls", this.baseCls);
		this.id = (String) _values[3];
		this.handleConfig("id", this.id);
		this.text = (String) _values[4];
		this.handleConfig("text", this.text);
		this.textEl = (Object) _values[5];
		this.handleConfig("textEl", this.textEl);
		this.value = (Float) _values[6];
		this.handleConfig("value", this.value);

	}
}
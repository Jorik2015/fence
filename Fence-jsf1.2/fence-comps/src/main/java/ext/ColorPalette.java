package ext;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.XType;

/**
 *Note:This java code is auto generated by abner,do not edit it. Simple color
 * palette class for choosing colors. The palette can be rendered to any
 * container.<br>
 * Here's an example of typical usage:
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;var&lt;/b&gt; cp = &lt;b&gt;new&lt;/b&gt; Ext.ColorPalette({value:&lt;em&gt;'993300'&lt;/em&gt;});  &lt;i&gt;// initial selected color&lt;/i&gt;
 * cp.render(&lt;em&gt;'my-div'&lt;/em&gt;);
 * 
 * cp.on(&lt;em&gt;'select'&lt;/em&gt;, &lt;b&gt;function&lt;/b&gt;(palette, selColor){
 *     &lt;i&gt;// &lt;b&gt;do&lt;/b&gt; something &lt;b&gt;with&lt;/b&gt; selColor&lt;/i&gt;
 * });&lt;/code&gt;
 * </pre>
 */
@XType("colorpalette")
@InstanceOf("Ext.ColorPalette")
public class ColorPalette extends Component {
	public static final String COMPONENT_TYPE = "Ext.ColorPalette";
	public static final String COMPONENT_FAMILY = "Ext.ColorPalette";

	/**
	 * <p>
	 * Create a new {@link ColorPalette} instance with default property values.
	 * </p>
	 */
	public ColorPalette() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Boolean allowReselect;

	/**
	 * If set to true then reselecting a color that isalready selected fires the
	 * <a href="output/Ext.ColorPalette.html#Ext.ColorPalette-select"
	 * ext:member="select" ext:cls="Ext.ColorPalette">select</a> event
	 */
	public Boolean getAllowReselect() {
		if (null != this.allowReselect) {
			return this.allowReselect;
		}
		ValueExpression _ve = getValueExpression("allowReselect");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>allowReselect</code> property.
	 * </p>
	 */
	public void setAllowReselect(Boolean allowReselect) {
		this.allowReselect = allowReselect;
		this.handleConfig("allowReselect", allowReselect);
	}

	private Object handler;

	/**
	 * Optional. A function that will handle the selectevent of this palette.
	 * The handler is passed the following parameters:
	 * 
	 * <div class="mdetail-params">
	 * <ul>
	 * <li><code>palette</code> : ColorPalette
	 * 
	 * <div class="sub-desc">The <a
	 * href="output/Ext.ColorPalette.html#Ext.ColorPalette-palette"
	 * ext:member="palette"
	 * ext:cls="Ext.ColorPalette">Ext.ColorPalette</a>.</div></li>
	 * 
	 * <li><code>color</code> : String
	 * 
	 * <div class="sub-desc">The 6-digit color hex code (without the #
	 * symbol).</div></li>
	 * </ul>
	 * </div>
	 */
	@ClientConfig(JsonMode.Function)
	public Object getHandler() {
		if (null != this.handler) {
			return this.handler;
		}
		ValueExpression _ve = getValueExpression("handler");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>handler</code> property.
	 * </p>
	 */
	public void setHandler(Object handler) {
		this.handler = handler;
		this.handleConfig("handler", handler);
	}

	private String itemCls;

	/**
	 * The CSS class to apply to the containing element(defaults to
	 * 'x-color-palette')
	 */
	public String getItemCls() {
		if (null != this.itemCls) {
			return this.itemCls;
		}
		ValueExpression _ve = getValueExpression("itemCls");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>itemCls</code> property.
	 * </p>
	 */
	public void setItemCls(String itemCls) {
		this.itemCls = itemCls;
		this.handleConfig("itemCls", itemCls);
	}

	private Object scope;

	/**
	 * The scope (<tt><b>this</b></tt> reference) inwhich the
	 * <code><a href="output/Ext.ColorPalette.html#Ext.ColorPalette-handler" ext:member="handler" ext:cls="Ext.ColorPalette">handler</a></code>
	 * function will be called. Defaults to this ColorPalette instance.
	 */
	@ClientConfig(JsonMode.Object)
	public Object getScope() {
		if (null != this.scope) {
			return this.scope;
		}
		ValueExpression _ve = getValueExpression("scope");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>scope</code> property.
	 * </p>
	 */
	public void setScope(Object scope) {
		this.scope = scope;
		this.handleConfig("scope", scope);
	}

	private String tpl;

	/**
	 * An existing XTemplate instance to be used inplace of the default template
	 * for rendering the component.
	 */
	public String getTpl() {
		if (null != this.tpl) {
			return this.tpl;
		}
		ValueExpression _ve = getValueExpression("tpl");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>tpl</code> property.
	 * </p>
	 */
	public void setTpl(String tpl) {
		this.tpl = tpl;
		this.handleConfig("tpl", tpl);
	}

	private String value;

	/**
	 * The initial color to highlight (should be a valid6-digit color hex code
	 * without the # symbol). Note that the hex codes are case-sensitive.
	 */
	public String getValue() {
		if (null != this.value) {
			return this.value;
		}
		ValueExpression _ve = getValueExpression("value");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>value</code> property.
	 * </p>
	 */
	public void setValue(String value) {
		this.value = value;
		this.handleConfig("value", value);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[7];
		}
		_values[0] = super.saveState(_context);
		_values[1] = allowReselect;
		_values[2] = handler;
		_values[3] = itemCls;
		_values[4] = scope;
		_values[5] = tpl;
		_values[6] = value;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.allowReselect = (Boolean) _values[1];
		this.handleConfig("allowReselect", this.allowReselect);
		this.handler = (Object) _values[2];
		this.handleConfig("handler", this.handler);
		this.itemCls = (String) _values[3];
		this.handleConfig("itemCls", this.itemCls);
		this.scope = (Object) _values[4];
		this.handleConfig("scope", this.scope);
		this.tpl = (String) _values[5];
		this.handleConfig("tpl", this.tpl);
		this.value = (String) _values[6];
		this.handleConfig("value", this.value);

	}
}
package ext.data;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;
import ext.base.ExtOutput;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * Ext.data.DataWriter facilitates create, update, and destroy actions between
 * an Ext.data.Store and a server-side framework. A Writer enabled Store will
 * automatically manage the Ajax requests to perform CRUD actions on a Store.
 * </p>
 * 
 * <p>
 * Ext.data.DataWriter is an abstract base class which is intended to be
 * extended and should not be created directly. For existing implementations,
 * see <a href="output/Ext.data.JsonWriter.html"
 * ext:cls="Ext.data.JsonWriter">Ext.data.JsonWriter</a>.
 * </p>
 * 
 * <p>
 * Creating a writer is simple:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;var&lt;/b&gt; writer = &lt;b&gt;new&lt;/b&gt; Ext.data.JsonWriter();&lt;/code&gt;
 * </pre>
 * 
 * <p>
 * The proxy for a writer enabled store can be configured with a simple
 * <code>url</code>:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;i&gt;// Create a standard HttpProxy instance.&lt;/i&gt;
 * &lt;b&gt;var&lt;/b&gt; proxy = &lt;b&gt;new&lt;/b&gt; Ext.data.HttpProxy({
 *     url: &lt;em&gt;'app.php/users'&lt;/em&gt;
 * });&lt;/code&gt;
 * </pre>
 * 
 * <p>
 * For finer grained control, the proxy may also be configured with an
 * <code>api</code>:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;i&gt;// Use the api specification&lt;/i&gt;
 * &lt;b&gt;var&lt;/b&gt; proxy = &lt;b&gt;new&lt;/b&gt; Ext.data.HttpProxy({
 *     api: {
 *         read    : &lt;em&gt;'app.php/users/read'&lt;/em&gt;,
 *         create  : &lt;em&gt;'app.php/users/create'&lt;/em&gt;,
 *         update  : &lt;em&gt;'app.php/users/update'&lt;/em&gt;,
 *         destroy : &lt;em&gt;'app.php/users/destroy'&lt;/em&gt;
 *     }
 * });&lt;/code&gt;
 * </pre>
 * 
 * <p>
 * Creating a Writer enabled store:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;var&lt;/b&gt; store = &lt;b&gt;new&lt;/b&gt; Ext.data.Store({
 *     proxy: proxy,
 *     reader: reader,
 *     writer: writer
 * });&lt;/code&gt;
 * </pre>
 */
@InstanceOf("Ext.data.DataWriter")
@ParseConfigMode(ui = false, name = "writer", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Var)
public class DataWriter extends ExtOutput {
	public static final String COMPONENT_TYPE = "Ext.data.DataWriter";
	public static final String COMPONENT_FAMILY = "Ext.data.DataWriter";

	/**
	 * <p>
	 * Create a new {@link DataWriter} instance with default property values.
	 * </p>
	 */
	public DataWriter() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Object createRecord;

	/**
	 * Abstract method that should be implemented inall subclasses (e.g.: <a
	 * href="output/Ext.data.JsonWriter.html#Ext.data.JsonWriter-createRecord"
	 * ext:member="createRecord"
	 * ext:cls="Ext.data.JsonWriter">JsonWriter.createRecord</a>)
	 */
	@ClientConfig(JsonMode.Function)
	public Object getCreateRecord() {
		if (null != this.createRecord) {
			return this.createRecord;
		}
		ValueExpression _ve = getValueExpression("createRecord");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>createRecord</code> property.
	 * </p>
	 */
	public void setCreateRecord(Object createRecord) {
		this.createRecord = createRecord;
		this.handleConfig("createRecord", createRecord);
	}

	private Object destroyRecord;

	/**
	 * Abstract method that should be implemented inall subclasses (e.g.: <a
	 * href="output/Ext.data.JsonWriter.html#Ext.data.JsonWriter-destroyRecord"
	 * ext:member="destroyRecord"
	 * ext:cls="Ext.data.JsonWriter">JsonWriter.destroyRecord</a>)
	 */
	@ClientConfig(JsonMode.Function)
	public Object getDestroyRecord() {
		if (null != this.destroyRecord) {
			return this.destroyRecord;
		}
		ValueExpression _ve = getValueExpression("destroyRecord");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>destroyRecord</code> property.
	 * </p>
	 */
	public void setDestroyRecord(Object destroyRecord) {
		this.destroyRecord = destroyRecord;
		this.handleConfig("destroyRecord", destroyRecord);
	}

	private Boolean listful;

	/**
	 * <tt>false</tt> by default. Set <tt>true</tt> tohave the DataWriter
	 * <b>always</b> write HTTP params as a list, even when acting upon a single
	 * record.
	 */
	public Boolean getListful() {
		if (null != this.listful) {
			return this.listful;
		}
		ValueExpression _ve = getValueExpression("listful");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>listful</code> property.
	 * </p>
	 */
	public void setListful(Boolean listful) {
		this.listful = listful;
		this.handleConfig("listful", listful);
	}

	private Object saveRecord;

	/**
	 * Abstract method that should be implemented inall subclasses (e.g.: <a
	 * href="output/Ext.data.JsonWriter.html#Ext.data.JsonWriter-saveRecord"
	 * ext:member="saveRecord"
	 * ext:cls="Ext.data.JsonWriter">JsonWriter.saveRecord</a>
	 */
	@ClientConfig(JsonMode.Function)
	public Object getSaveRecord() {
		if (null != this.saveRecord) {
			return this.saveRecord;
		}
		ValueExpression _ve = getValueExpression("saveRecord");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>saveRecord</code> property.
	 * </p>
	 */
	public void setSaveRecord(Object saveRecord) {
		this.saveRecord = saveRecord;
		this.handleConfig("saveRecord", saveRecord);
	}

	private Boolean writeAllFields;

	/**
	 * <tt>false</tt> by default. Set <tt>true</tt> tohave DataWriter return ALL
	 * fields of a modified record -- not just those that changed.
	 * <tt>false</tt> to have DataWriter only request modified fields from a
	 * record.
	 */
	public Boolean getWriteAllFields() {
		if (null != this.writeAllFields) {
			return this.writeAllFields;
		}
		ValueExpression _ve = getValueExpression("writeAllFields");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>writeAllFields</code> property.
	 * </p>
	 */
	public void setWriteAllFields(Boolean writeAllFields) {
		this.writeAllFields = writeAllFields;
		this.handleConfig("writeAllFields", writeAllFields);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[6];
		}
		_values[0] = super.saveState(_context);
		_values[1] = createRecord;
		_values[2] = destroyRecord;
		_values[3] = listful;
		_values[4] = saveRecord;
		_values[5] = writeAllFields;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.createRecord = (Object) _values[1];
		this.handleConfig("createRecord", this.createRecord);
		this.destroyRecord = (Object) _values[2];
		this.handleConfig("destroyRecord", this.destroyRecord);
		this.listful = (Boolean) _values[3];
		this.handleConfig("listful", this.listful);
		this.saveRecord = (Object) _values[4];
		this.handleConfig("saveRecord", this.saveRecord);
		this.writeAllFields = (Boolean) _values[5];
		this.handleConfig("writeAllFields", this.writeAllFields);

	}
}
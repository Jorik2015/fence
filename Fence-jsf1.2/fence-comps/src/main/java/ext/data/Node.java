package ext.data;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.util.Observable;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 */
@InstanceOf("Ext.data.Node")
public class Node extends Observable {
	public static final String COMPONENT_TYPE = "Ext.data.Node";
	public static final String COMPONENT_FAMILY = "Ext.data.Node";

	/**
	 * <p>
	 * Create a new {@link Node} instance with default property values.
	 * </p>
	 */
	public Node() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private String id;

	/**
	 * The id for this node. If one is not specified,one is generated.
	 */
	public String getId() {
		if (null != this.id) {
			return this.id;
		}
		ValueExpression _ve = getValueExpression("id");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>id</code> property.
	 * </p>
	 */
	public void setId(String id) {
		this.id = id;
		this.handleConfig("id", id);
	}

	private Boolean leaf;

	/**
	 * true if this node is a leaf and does not havechildren
	 */
	public Boolean getLeaf() {
		if (null != this.leaf) {
			return this.leaf;
		}
		ValueExpression _ve = getValueExpression("leaf");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>leaf</code> property.
	 * </p>
	 */
	public void setLeaf(Boolean leaf) {
		this.leaf = leaf;
		this.handleConfig("leaf", leaf);
	}

	private Object childs;

	/**
	 * An object containing attributes to be added toall nodes created by this
	 * loader. If the attributes sent by the server have an attribute in this
	 * object, they take priority.
	 */
	@ClientConfig(value = JsonMode.Array, name = "children")
	public Object getChilds() {
		if (null != this.childs) {
			return this.childs;
		}
		ValueExpression _ve = getValueExpression("childs");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>baseAttrs</code> property.
	 * </p>
	 */
	public void setChilds(Object childs) {
		this.childs = childs;
		this.handleConfig("childs", childs);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[4];
		}
		_values[0] = super.saveState(_context);
		_values[1] = id;
		_values[2] = leaf;
		_values[3] = childs;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.id = (String) _values[1];
		this.handleConfig("id", this.id);
		this.leaf = (Boolean) _values[2];
		this.handleConfig("leaf", this.leaf);
		this.childs = _values[3];
		this.handleConfig("childs", this.childs);
	}
}
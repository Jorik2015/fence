package ext.data;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 */
@InstanceOf("Ext.data.DirectProxy")
@ParseConfigMode(ui = false, name = "proxy", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Var)
public class DirectProxy extends DataProxy {
	public static final String COMPONENT_TYPE = "Ext.data.DirectProxy";
	public static final String COMPONENT_FAMILY = "Ext.data.DirectProxy";

	/**
	 * <p>
	 * Create a new {@link DirectProxy} instance with default property values.
	 * </p>
	 */
	public DirectProxy() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Object directFn;

	/**
	 * Function to call when executing a request.directFn is a simple
	 * alternative to defining the api configuration-parameter for Store's which
	 * will not implement a full CRUD api.
	 */
	@ClientConfig(JsonMode.Function)
	public Object getDirectFn() {
		if (null != this.directFn) {
			return this.directFn;
		}
		ValueExpression _ve = getValueExpression("directFn");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>directFn</code> property.
	 * </p>
	 */
	public void setDirectFn(Object directFn) {
		this.directFn = directFn;
		this.handleConfig("directFn", directFn);
	}

	private Object paramOrder;

	/**
	 * Defaults to <tt>undefined</tt>. A list of paramsto be executed server
	 * side. Specify the params in the order in which they must be executed on
	 * the server-side as either (1) an Array of String values, or (2) a String
	 * of params delimited by either whitespace, comma, or pipe. For example,
	 * any of the following would be acceptable:
	 * 
	 * <pre>
	 * &lt;code&gt;paramOrder: [&lt;em&gt;'param1'&lt;/em&gt;,&lt;em&gt;'param2'&lt;/em&gt;,&lt;em&gt;'param3'&lt;/em&gt;]
	 * paramOrder: &lt;em&gt;'param1 param2 param3'&lt;/em&gt;
	 * paramOrder: &lt;em&gt;'param1,param2,param3'&lt;/em&gt;
	 * paramOrder: &lt;em&gt;'param1|param2|param'&lt;/em&gt;&lt;/code&gt;
	 * </pre>
	 */
	@ClientConfig(JsonMode.Array)
	public Object getParamOrder() {
		if (null != this.paramOrder) {
			return this.paramOrder;
		}
		ValueExpression _ve = getValueExpression("paramOrder");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>paramOrder</code> property.
	 * </p>
	 */
	public void setParamOrder(Object paramOrder) {
		this.paramOrder = paramOrder;
		this.handleConfig("paramOrder", paramOrder);
	}

	private Boolean paramsAsHash;

	/**
	 * Send parameters as a collection of namedarguments (defaults to
	 * <tt>true</tt>). Providing a
	 * 
	 * <tt><a href="output/Ext.data.DirectProxy.html#Ext.data.DirectProxy-paramOrder" ext:member="paramOrder" ext:cls="Ext.data.DirectProxy">paramOrder</a></tt>
	 * nullifies this configuration.
	 */
	public Boolean getParamsAsHash() {
		if (null != this.paramsAsHash) {
			return this.paramsAsHash;
		}
		ValueExpression _ve = getValueExpression("paramsAsHash");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>paramsAsHash</code> property.
	 * </p>
	 */
	public void setParamsAsHash(Boolean paramsAsHash) {
		this.paramsAsHash = paramsAsHash;
		this.handleConfig("paramsAsHash", paramsAsHash);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[4];
		}
		_values[0] = super.saveState(_context);
		_values[1] = directFn;
		_values[2] = paramOrder;
		_values[3] = paramsAsHash;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.directFn = (Object) _values[1];
		this.handleConfig("directFn", this.directFn);
		this.paramOrder = (Object) _values[2];
		this.handleConfig("paramOrder", this.paramOrder);
		this.paramsAsHash = (Boolean) _values[3];
		this.handleConfig("paramsAsHash", this.paramsAsHash);

	}
}
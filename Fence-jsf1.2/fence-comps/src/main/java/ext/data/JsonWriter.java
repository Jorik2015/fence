package ext.data;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;

/**
 *Note:This java code is auto generated by abner,do not edit it. DataWriter
 * extension for writing an array or single <a
 * href="output/Ext.data.Record.html"
 * ext:cls="Ext.data.Record">Ext.data.Record</a> object(s) in preparation for
 * executing a remote CRUD action.
 */
@InstanceOf("Ext.data.JsonWriter")
@ParseConfigMode(ui = false, name = "writer", pmode = PersistenceMode.ParentProperty, rmode = ReferenceMode.Var)
public class JsonWriter extends DataWriter {
	public static final String COMPONENT_TYPE = "Ext.data.JsonWriter";
	public static final String COMPONENT_FAMILY = "Ext.data.JsonWriter";

	/**
	 * <p>
	 * Create a new {@link JsonWriter} instance with default property values.
	 * </p>
	 */
	public JsonWriter() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Boolean encode;

	/**
	 * <tt>true</tt> to <a href="output/Ext.util.JSON.html#Ext.util.JSON-encode"
	 * ext:member="encode" ext:cls="Ext.util.JSON">encode</a> the <a
	 * href="output/Ext.data.DataWriter.html#Ext.data.DataWriter-toHash"
	 * ext:member="toHash" ext:cls="Ext.data.DataWriter">hashed
	 * data</a>.Defaults to <tt>true</tt>. When using <a
	 * href="output/Ext.data.DirectProxy.html"
	 * ext:cls="Ext.data.DirectProxy">Ext.data.DirectProxy</a>, set this to
	 * <tt>false</tt> since Ext.Direct.JsonProvider will perform its own
	 * json-encoding. In addition, if you're using <a
	 * href="output/Ext.data.HttpProxy.html"
	 * ext:cls="Ext.data.HttpProxy">Ext.data.HttpProxy</a>, setting to
	 * <tt>false</tt> will cause HttpProxy to transmit data using the
	 * <b>jsonData</b> configuration-params of <a
	 * href="output/Ext.Ajax.html#Ext.Ajax-request" ext:member="request"
	 * ext:cls="Ext.Ajax">Ext.Ajax.request</a> instead of <b>params</b>. When
	 * using a <a href="output/Ext.data.Store.html#Ext.data.Store-restful"
	 * ext:member="restful" ext:cls="Ext.data.Store">Ext.data.Store.restful</a>
	 * Store, some serverside frameworks are tuned to expect data through the
	 * jsonData mechanism. In those cases, one will want to set <b>encode:
	 * <tt>false</tt></b>
	 */
	public Boolean getEncode() {
		if (null != this.encode) {
			return this.encode;
		}
		ValueExpression _ve = getValueExpression("encode");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>encode</code> property.
	 * </p>
	 */
	public void setEncode(Boolean encode) {
		this.encode = encode;
		this.handleConfig("encode", encode);
	}

	private Boolean returnJson;

	/**
	 * <b>Deprecated. Use <a
	 * href="output/Ext.data.JsonWriter.html#Ext.data.JsonWriter-encode"
	 * ext:member="encode"
	 * ext:cls="Ext.data.JsonWriter">Ext.data.JsonWriter.encode</a>instead.</b>
	 */
	public Boolean getReturnJson() {
		if (null != this.returnJson) {
			return this.returnJson;
		}
		ValueExpression _ve = getValueExpression("returnJson");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>returnJson</code> property.
	 * </p>
	 */
	public void setReturnJson(Boolean returnJson) {
		this.returnJson = returnJson;
		this.handleConfig("returnJson", returnJson);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[3];
		}
		_values[0] = super.saveState(_context);
		_values[1] = encode;
		_values[2] = returnJson;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.encode = (Boolean) _values[1];
		this.handleConfig("encode", this.encode);
		this.returnJson = (Boolean) _values[2];
		this.handleConfig("returnJson", this.returnJson);

	}
}
package ext.data;

import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.base.ExtOutput;

/**
 *Note:This java code is auto generated by abner,do not edit it. Ext.data.Api
 * is a singleton designed to manage the data API including methods for
 * validating a developer's DataProxy API. Defines variables for CRUD actions
 * create, read, update and destroy in addition to a mapping of RESTful HTTP
 * methods GET, POST, PUT and DELETE to CRUD actions.<br>
 * <br>
 * <i>This class is a singleton and cannot be created directly.</i>
 */
@InstanceOf("Ext.data.Api")
public class Api extends ExtOutput {
	public static final String COMPONENT_TYPE = "Ext.data.Api";
	public static final String COMPONENT_FAMILY = "Ext.data.Api";
	
	public static final String ACTION_CREATE = "create";
	public static final String ACTION_READ = "read";
	public static final String ACTION_UPDATE = "update";
	public static final String ACTION_DESTORY = "destroy";

	/**
	 * <p>
	 * Create a new {@link Api} instance with default property values.
	 * </p>
	 */
	public Api() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[1];
		}
		_values[0] = super.saveState(_context);

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);

	}
}
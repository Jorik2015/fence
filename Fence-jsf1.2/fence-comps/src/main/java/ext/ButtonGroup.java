package ext;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.XType;

/**
 *Note:This java code is auto generated by abner,do not edit it. Container for
 * a group of buttons. Example usage:
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;var&lt;/b&gt; p = &lt;b&gt;new&lt;/b&gt; Ext.Panel({
 *     title: &lt;em&gt;'Panel &lt;b&gt;with&lt;/b&gt; Button Group'&lt;/em&gt;,
 *     width: 300,
 *     height:200,
 *     renderTo: document.body,
 *     html: &lt;em&gt;'whatever'&lt;/em&gt;,
 *     tbar: [{
 *         xtype: &lt;em&gt;'buttongroup'&lt;/em&gt;,
 *         &lt;a href=&quot;output/Ext.ButtonGroup.html#Ext.ButtonGroup-columns&quot; ext:member=&quot;columns&quot; ext:cls=&quot;Ext.ButtonGroup&quot;&gt;columns&lt;/a&gt;: 3,
 *         title: &lt;em&gt;'Clipboard'&lt;/em&gt;,
 *         items: [{
 *             text: &lt;em&gt;'Paste'&lt;/em&gt;,
 *             scale: &lt;em&gt;'large'&lt;/em&gt;,
 *             rowspan: 3, iconCls: &lt;em&gt;'add'&lt;/em&gt;,
 *             iconAlign: &lt;em&gt;'top'&lt;/em&gt;,
 *             cls: &lt;em&gt;'x-btn-as-arrow'&lt;/em&gt;
 *         },{
 *             xtype:&lt;em&gt;'splitbutton'&lt;/em&gt;,
 *             text: &lt;em&gt;'Menu Button'&lt;/em&gt;,
 *             scale: &lt;em&gt;'large'&lt;/em&gt;,
 *             rowspan: 3,
 *             iconCls: &lt;em&gt;'add'&lt;/em&gt;,
 *             iconAlign: &lt;em&gt;'top'&lt;/em&gt;,
 *             arrowAlign:&lt;em&gt;'bottom'&lt;/em&gt;,
 *             menu: [{text: &lt;em&gt;'Menu Item 1'&lt;/em&gt;}]
 *         },{
 *             xtype:&lt;em&gt;'splitbutton'&lt;/em&gt;, text: &lt;em&gt;'Cut'&lt;/em&gt;, iconCls: &lt;em&gt;'add16'&lt;/em&gt;, menu: [{text: &lt;em&gt;'Cut Menu Item'&lt;/em&gt;}]
 *         },{
 *             text: &lt;em&gt;'Copy'&lt;/em&gt;, iconCls: &lt;em&gt;'add16'&lt;/em&gt;
 *         },{
 *             text: &lt;em&gt;'Format'&lt;/em&gt;, iconCls: &lt;em&gt;'add16'&lt;/em&gt;
 *         }]
 *     }]
 * });&lt;/code&gt;
 * </pre>
 */
@XType("buttongroup")
@InstanceOf("Ext.ButtonGroup")
public class ButtonGroup extends Panel {
	public static final String COMPONENT_TYPE = "Ext.ButtonGroup";
	public static final String COMPONENT_FAMILY = "Ext.ButtonGroup";

	/**
	 * <p>
	 * Create a new {@link ButtonGroup} instance with default property values.
	 * </p>
	 */
	public ButtonGroup() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private String baseCls;

	/**
	 * Defaults to <tt>'x-btn-group'</tt>. See <a href="output/Ext.Panel.html#Ext.Panel-baseCls"
	 * ext:member="baseCls" ext:cls="Ext.Panel">Ext.Panel.baseCls</a>.
	 */
	public String getBaseCls() {
		if (null != this.baseCls) {
			return this.baseCls;
		}
		ValueExpression _ve = getValueExpression("baseCls");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>baseCls</code> property.
	 * </p>
	 */
	public void setBaseCls(String baseCls) {
		this.baseCls = baseCls;
		this.handleConfig("baseCls", baseCls);
	}

	private Integer columns;

	/**
	 * The <tt>columns</tt> configuration propertypassed to the <a
	 * href="output/Ext.ButtonGroup.html#Ext.ButtonGroup-layout"
	 * ext:member="layout" ext:cls="Ext.ButtonGroup">configured layout
	 * manager</a>. See <a href=
	 * "output/Ext.layout.TableLayout.html#Ext.layout.TableLayout-columns"
	 * ext:member="columns"
	 * ext:cls="Ext.layout.TableLayout">Ext.layout.TableLayout.columns</a>.
	 */
	public Integer getColumns() {
		if (null != this.columns) {
			return this.columns;
		}
		ValueExpression _ve = getValueExpression("columns");
		if (_ve != null) {
			return (Integer) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>columns</code> property.
	 * </p>
	 */
	public void setColumns(Integer columns) {
		this.columns = columns;
		this.handleConfig("columns", columns);
	}

	private Boolean frame;

	/**
	 * Defaults to <tt>true</tt>. See <a
	 * href="output/Ext.Panel.html#Ext.Panel-frame" ext:member="frame"
	 * ext:cls="Ext.Panel">Ext.Panel.frame</a>.
	 */
	public Boolean getFrame() {
		if (null != this.frame) {
			return this.frame;
		}
		ValueExpression _ve = getValueExpression("frame");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>frame</code> property.
	 * </p>
	 */
	public void setFrame(Boolean frame) {
		this.frame = frame;
		this.handleConfig("frame", frame);
	}

	private String layout;

	/**
	 * Defaults to <tt>'table'</tt>. See <a
	 * href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout"
	 * ext:cls="Ext.Container">Ext.Container.layout</a>.
	 */
	public String getLayout() {
		if (null != this.layout) {
			return this.layout;
		}
		ValueExpression _ve = getValueExpression("layout");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>layout</code> property.
	 * </p>
	 */
	public void setLayout(String layout) {
		this.layout = layout;
		this.handleConfig("layout", layout);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[5];
		}
		_values[0] = super.saveState(_context);
		_values[1] = baseCls;
		_values[2] = columns;
		_values[3] = frame;
		_values[4] = layout;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.baseCls = (String) _values[1];
		this.handleConfig("baseCls", this.baseCls);
		this.columns = (Integer) _values[2];
		this.handleConfig("columns", this.columns);
		this.frame = (Boolean) _values[3];
		this.handleConfig("frame", this.frame);
		this.layout = (String) _values[4];
		this.handleConfig("layout", this.layout);

	}
}
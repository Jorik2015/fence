package ext.layout;

import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.Layout;
import ext.annotation.LayoutType;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * This is a multi-pane, application-oriented UI layout style that supports
 * multiple nested panels, automatic <a href="output/Ext.layout.BorderLayout.Region.html#Ext.layout.BorderLayout.Region-split"
 * ext:member="split" ext:cls="Ext.layout.BorderLayout.Region">split</a> bars
 * between <a href="output/Ext.layout.BorderLayout.Region.html#Ext.layout.BorderLayout.Region-BorderLayout.Region"
 * ext:member="BorderLayout.Region"
 * ext:cls="Ext.layout.BorderLayout.Region">regions</a> and built-in <a href="output/Ext.layout.BorderLayout.Region.html#Ext.layout.BorderLayout.Region-collapsible"
 * ext:member="collapsible" ext:cls="Ext.layout.BorderLayout.Region">expanding
 * and collapsing</a> of regions.
 * </p>
 * 
 * <p>
 * This class is intended to be extended or created via the <tt>layout:'border'</tt> <a
 * href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout"
 * ext:cls="Ext.Container">Ext.Container.layout</a> config, and should generally
 * not need to be created directly via the new keyword.
 * </p>
 * 
 * <p>
 * BorderLayout does not have any direct config options (other than inherited
 * ones). All configuration options available for customizing the BorderLayout
 * are at the <a href="output/Ext.layout.BorderLayout.Region.html"
 * ext:cls="Ext.layout.BorderLayout.Region">Ext.layout.BorderLayout.Region</a>
 * and <a href="output/Ext.layout.BorderLayout.SplitRegion.html"
 * ext:cls="Ext.layout.BorderLayout.SplitRegion"
 * >Ext.layout.BorderLayout.SplitRegion</a> levels.
 * </p>
 * 
 * <p>
 * Example usage:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;var&lt;/b&gt; myBorderPanel = &lt;b&gt;new&lt;/b&gt; Ext.Panel({
 *     &lt;a href=&quot;output/Ext.Component.html#Ext.Component-renderTo&quot; ext:member=&quot;renderTo&quot; ext:cls=&quot;Ext.Component&quot;&gt;renderTo&lt;/a&gt;: document.body,
 *     &lt;a href=&quot;output/Ext.BoxComponent.html#Ext.BoxComponent-width&quot; ext:member=&quot;width&quot; ext:cls=&quot;Ext.BoxComponent&quot;&gt;width&lt;/a&gt;: 700,
 *     &lt;a href=&quot;output/Ext.BoxComponent.html#Ext.BoxComponent-height&quot; ext:member=&quot;height&quot; ext:cls=&quot;Ext.BoxComponent&quot;&gt;height&lt;/a&gt;: 500,
 *     &lt;a href=&quot;output/Ext.Panel.html#Ext.Panel-title&quot; ext:member=&quot;title&quot; ext:cls=&quot;Ext.Panel&quot;&gt;title&lt;/a&gt;: &lt;em&gt;'Border Layout'&lt;/em&gt;,
 *     &lt;a href=&quot;output/Ext.Container.html#Ext.Container-layout&quot; ext:member=&quot;layout&quot; ext:cls=&quot;Ext.Container&quot;&gt;layout&lt;/a&gt;: &lt;em&gt;'border'&lt;/em&gt;,
 *     &lt;a href=&quot;output/Ext.Container.html#Ext.Container-items&quot; ext:member=&quot;items&quot; ext:cls=&quot;Ext.Container&quot;&gt;items&lt;/a&gt;: [{
 *         &lt;a href=&quot;output/Ext.Panel.html#Ext.Panel-title&quot; ext:member=&quot;title&quot; ext:cls=&quot;Ext.Panel&quot;&gt;title&lt;/a&gt;: &lt;em&gt;'South Region is resizable'&lt;/em&gt;,
 *         &lt;a href=&quot;output/Ext.layout.BorderLayout.Region.html#Ext.layout.BorderLayout.Region-BorderLayout.Region&quot; ext:member=&quot;BorderLayout.Region&quot; ext:cls=&quot;Ext.layout.BorderLayout.Region&quot;&gt;region&lt;/a&gt;: &lt;em&gt;'south'&lt;/em&gt;,     &lt;i&gt;// position &lt;b&gt;for&lt;/b&gt; region&lt;/i&gt;
 *         &lt;a href=&quot;output/Ext.BoxComponent.html#Ext.BoxComponent-height&quot; ext:member=&quot;height&quot; ext:cls=&quot;Ext.BoxComponent&quot;&gt;height&lt;/a&gt;: 100,
 *         &lt;a href=&quot;output/Ext.layout.BorderLayout.Region.html#Ext.layout.BorderLayout.Region-split&quot; ext:member=&quot;split&quot; ext:cls=&quot;Ext.layout.BorderLayout.Region&quot;&gt;split&lt;/a&gt;: true,         &lt;i&gt;// enable resizing&lt;/i&gt;
 *         &lt;a href=&quot;output/Ext.SplitBar.html#Ext.SplitBar-minSize&quot; ext:member=&quot;minSize&quot; ext:cls=&quot;Ext.SplitBar&quot;&gt;minSize&lt;/a&gt;: 75,         &lt;i&gt;// defaults to &lt;a href=&quot;output/Ext.layout.BorderLayout.Region.html#Ext.layout.BorderLayout.Region-minHeight&quot; ext:member=&quot;minHeight&quot; ext:cls=&quot;Ext.layout.BorderLayout.Region&quot;&gt;50&lt;/a&gt;&lt;/i&gt; 
 *         &lt;a href=&quot;output/Ext.SplitBar.html#Ext.SplitBar-maxSize&quot; ext:member=&quot;maxSize&quot; ext:cls=&quot;Ext.SplitBar&quot;&gt;maxSize&lt;/a&gt;: 150,
 *         &lt;a href=&quot;output/Ext.layout.BorderLayout.Region.html#Ext.layout.BorderLayout.Region-margins&quot; ext:member=&quot;margins&quot; ext:cls=&quot;Ext.layout.BorderLayout.Region&quot;&gt;margins&lt;/a&gt;: &lt;em&gt;'0 5 5 5'&lt;/em&gt;
 *     },{
 *         &lt;i&gt;// xtype: &lt;em&gt;'panel'&lt;/em&gt; implied by &lt;b&gt;default&lt;/b&gt;&lt;/i&gt;
 *         &lt;a href=&quot;output/Ext.Panel.html#Ext.Panel-title&quot; ext:member=&quot;title&quot; ext:cls=&quot;Ext.Panel&quot;&gt;title&lt;/a&gt;: &lt;em&gt;'West Region is collapsible'&lt;/em&gt;,
 *         &lt;a href=&quot;output/Ext.layout.BorderLayout.Region.html#Ext.layout.BorderLayout.Region-BorderLayout.Region&quot; ext:member=&quot;BorderLayout.Region&quot; ext:cls=&quot;Ext.layout.BorderLayout.Region&quot;&gt;region&lt;/a&gt;:&lt;em&gt;'west'&lt;/em&gt;,
 *         &lt;a href=&quot;output/Ext.layout.BorderLayout.Region.html#Ext.layout.BorderLayout.Region-margins&quot; ext:member=&quot;margins&quot; ext:cls=&quot;Ext.layout.BorderLayout.Region&quot;&gt;margins&lt;/a&gt;: &lt;em&gt;'5 0 0 5'&lt;/em&gt;,
 *         &lt;a href=&quot;output/Ext.BoxComponent.html#Ext.BoxComponent-width&quot; ext:member=&quot;width&quot; ext:cls=&quot;Ext.BoxComponent&quot;&gt;width&lt;/a&gt;: 200,
 *         &lt;a href=&quot;output/Ext.layout.BorderLayout.Region.html#Ext.layout.BorderLayout.Region-collapsible&quot; ext:member=&quot;collapsible&quot; ext:cls=&quot;Ext.layout.BorderLayout.Region&quot;&gt;collapsible&lt;/a&gt;: true,   &lt;i&gt;// make collapsible&lt;/i&gt;
 *         &lt;a href=&quot;output/Ext.layout.BorderLayout.Region.html#Ext.layout.BorderLayout.Region-cmargins&quot; ext:member=&quot;cmargins&quot; ext:cls=&quot;Ext.layout.BorderLayout.Region&quot;&gt;cmargins&lt;/a&gt;: &lt;em&gt;'5 5 0 5'&lt;/em&gt;, &lt;i&gt;// adjust top margin when collapsed&lt;/i&gt;
 *         &lt;a href=&quot;output/Ext.Component.html#Ext.Component-id&quot; ext:member=&quot;id&quot; ext:cls=&quot;Ext.Component&quot;&gt;id&lt;/a&gt;: &lt;em&gt;'west-region-container'&lt;/em&gt;,
 *         &lt;a href=&quot;output/Ext.Container.html#Ext.Container-layout&quot; ext:member=&quot;layout&quot; ext:cls=&quot;Ext.Container&quot;&gt;layout&lt;/a&gt;: &lt;em&gt;'fit'&lt;/em&gt;,
 *         &lt;a href=&quot;output/Ext.Panel.html#Ext.Panel-unstyled&quot; ext:member=&quot;unstyled&quot; ext:cls=&quot;Ext.Panel&quot;&gt;unstyled&lt;/a&gt;: true
 *     },{
 *         &lt;a href=&quot;output/Ext.Panel.html#Ext.Panel-title&quot; ext:member=&quot;title&quot; ext:cls=&quot;Ext.Panel&quot;&gt;title&lt;/a&gt;: &lt;em&gt;'Center Region'&lt;/em&gt;,
 *         &lt;a href=&quot;output/Ext.layout.BorderLayout.Region.html#Ext.layout.BorderLayout.Region-BorderLayout.Region&quot; ext:member=&quot;BorderLayout.Region&quot; ext:cls=&quot;Ext.layout.BorderLayout.Region&quot;&gt;region&lt;/a&gt;: &lt;em&gt;'center'&lt;/em&gt;,     &lt;i&gt;// center region is required, no width/height specified&lt;/i&gt;
 *         &lt;a href=&quot;output/Ext.Component.html#Ext.Component-xtype&quot; ext:member=&quot;xtype&quot; ext:cls=&quot;Ext.Component&quot;&gt;xtype&lt;/a&gt;: &lt;em&gt;'container'&lt;/em&gt;,
 *         &lt;a href=&quot;output/Ext.Container.html#Ext.Container-layout&quot; ext:member=&quot;layout&quot; ext:cls=&quot;Ext.Container&quot;&gt;layout&lt;/a&gt;: &lt;em&gt;'fit'&lt;/em&gt;,
 *         &lt;a href=&quot;output/Ext.layout.BorderLayout.Region.html#Ext.layout.BorderLayout.Region-margins&quot; ext:member=&quot;margins&quot; ext:cls=&quot;Ext.layout.BorderLayout.Region&quot;&gt;margins&lt;/a&gt;: &lt;em&gt;'5 5 0 0'&lt;/em&gt;
 *     }]
 * });&lt;/code&gt;
 * </pre>
 * 
 * <p>
 * <b><u>Notes</u></b>:
 * </p>
 * 
 * <div class="mdetail-params">
 * <ul>
 * <li>Any container using the BorderLayout <b>must</b> have a child item with <tt>region:'center'</tt>
 * . The child item in the center region will always be resized to fill the
 * remaining space not used by the other regions in the layout.</li>
 * 
 * <li>Any child items with a region of <tt>west</tt> or <tt>east</tt> must have
 * <tt>width</tt> defined (an integer representing the number of pixels that the
 * region should take up).</li>
 * 
 * <li>Any child items with a region of <tt>north</tt> or <tt>south</tt> must
 * have <tt>height</tt> defined.</li>
 * 
 * <li>The regions of a BorderLayout are <b>fixed at render time</b> and
 * thereafter, its child Components may not be removed or added. To add/remove
 * Components within a BorderLayout, have them wrapped by an additional
 * Container which is directly managed by the BorderLayout. If the region is to
 * be collapsible, the Container used directly by the BorderLayout manager
 * should be a Panel. In the following example a Container (an Ext.Panel) is
 * added to the west region:
 * 
 * <div style="margin-left:16px">
 * 
 * <pre>
 * &lt;code&gt;wrc = &lt;a href=&quot;output/Ext.html#Ext-getCmp&quot; ext:member=&quot;getCmp&quot; ext:cls=&quot;Ext&quot;&gt;Ext.getCmp&lt;/a&gt;(&lt;em&gt;'west-region-container'&lt;/em&gt;);
 * wrc.&lt;a href=&quot;output/Ext.Panel.html#Ext.Panel-removeAll&quot; ext:member=&quot;removeAll&quot; ext:cls=&quot;Ext.Panel&quot;&gt;removeAll&lt;/a&gt;();
 * wrc.&lt;a href=&quot;output/Ext.Container.html#Ext.Container-add&quot; ext:member=&quot;add&quot; ext:cls=&quot;Ext.Container&quot;&gt;add&lt;/a&gt;({
 *     title: &lt;em&gt;'Added Panel'&lt;/em&gt;,
 *     html: &lt;em&gt;'Some content'&lt;/em&gt;
 * });
 * wrc.&lt;a href=&quot;output/Ext.Container.html#Ext.Container-doLayout&quot; ext:member=&quot;doLayout&quot; ext:cls=&quot;Ext.Container&quot;&gt;doLayout&lt;/a&gt;();&lt;/code&gt;
 * </pre>
 * 
 * </div></li>
 * 
 * <li>To reference a <a href="output/Ext.layout.BorderLayout.Region.html"
 * ext:cls="Ext.layout.BorderLayout.Region">Region</a>:
 * 
 * <div style="margin-left:16px">
 * 
 * <pre>
 * &lt;code&gt;wr = myBorderPanel.layout.west;&lt;/code&gt;
 * </pre>
 * 
 * </div></li>
 * </ul>
 * </div>
 */
@Layout(LayoutType.border)
@InstanceOf("Ext.layout.BorderLayout")
@ParseConfigMode(ui = false, pmode = PersistenceMode.InnerProperty, rmode = ReferenceMode.Config)
public class BorderLayout extends ContainerLayout {
	public static final String COMPONENT_TYPE = "Ext.layout.BorderLayout";
	public static final String COMPONENT_FAMILY = "Ext.layout.BorderLayout";

	/**
	 * <p>
	 * Create a new {@link BorderLayout} instance with default property values.
	 * </p>
	 */
	public BorderLayout() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[1];
		}
		_values[0] = super.saveState(_context);

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);

	}
}
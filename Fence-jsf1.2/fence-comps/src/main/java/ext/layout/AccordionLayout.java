package ext.layout;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.Layout;
import ext.annotation.LayoutType;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * This is a layout that contains multiple panels in an expandable accordion
 * style such that only <b>one panel can be open at any given time</b>. Each
 * panel has built-in support for expanding and collapsing.
 * </p>
 * 
 * <p>
 * This class is intended to be extended or created via the
 * <tt><b><a href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout" ext:cls="Ext.Container">layout</a></b></tt>
 * configuration property. See
 * 
 * <tt><b><a href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout" ext:cls="Ext.Container">Ext.Container.layout</a></b></tt>
 * for additional details.
 * </p>
 * 
 * <p>
 * Example usage:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;var&lt;/b&gt; accordion = &lt;b&gt;new&lt;/b&gt; Ext.Panel({
 *     title: &lt;em&gt;'Accordion Layout'&lt;/em&gt;,
 *     layout:&lt;em&gt;'accordion'&lt;/em&gt;,
 *     defaults: {
 *         &lt;i&gt;// applied to each contained panel
 * &lt;/i&gt;
 *         bodyStyle: &lt;em&gt;'padding:15px'&lt;/em&gt;
 *     },
 *     layoutConfig: {
 *         &lt;i&gt;// layout-specific configs go here
 * &lt;/i&gt;
 *         titleCollapse: false,
 *         animate: true,
 *         activeOnTop: true
 *     },
 *     items: [{
 *         title: &lt;em&gt;'Panel 1'&lt;/em&gt;,
 *         html: &lt;em&gt;'&lt;p&gt;Panel content!&lt;/p&gt;'&lt;/em&gt;
 *     },{
 *         title: &lt;em&gt;'Panel 2'&lt;/em&gt;,
 *         html: &lt;em&gt;'&lt;p&gt;Panel content!&lt;/p&gt;'&lt;/em&gt;
 *     },{
 *         title: &lt;em&gt;'Panel 3'&lt;/em&gt;,
 *         html: &lt;em&gt;'&lt;p&gt;Panel content!&lt;/p&gt;'&lt;/em&gt;
 *     }]
 * });&lt;/code&gt;
 * </pre>
 */
@Layout(LayoutType.accordion)
@InstanceOf("Ext.layout.AccordionLayout")
@ParseConfigMode(ui = false, pmode = PersistenceMode.InnerProperty, rmode = ReferenceMode.Config)
public class AccordionLayout extends FitLayout {
	public static final String COMPONENT_TYPE = "Ext.layout.AccordionLayout";
	public static final String COMPONENT_FAMILY = "Ext.layout.AccordionLayout";

	/**
	 * <p>
	 * Create a new {@link AccordionLayout} instance with default property
	 * values.
	 * </p>
	 */
	public AccordionLayout() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Boolean activeOnTop;

	/**
	 * True to swap the position of each panel as it isexpanded so that it
	 * becomes the first item in the container, false to keep the panels in the
	 * rendered order. <b>This is NOT compatible with "animate:true"</b>
	 * (defaults to false).
	 */
	public Boolean getActiveOnTop() {
		if (null != this.activeOnTop) {
			return this.activeOnTop;
		}
		ValueExpression _ve = getValueExpression("activeOnTop");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>activeOnTop</code> property.
	 * </p>
	 */
	public void setActiveOnTop(Boolean activeOnTop) {
		this.activeOnTop = activeOnTop;
		this.handleConfig("activeOnTop", activeOnTop);
	}

	private Boolean animate;

	/**
	 * True to slide the contained panels open andclosed during expand/collapse
	 * using animation, false to open and close directly with no animation
	 * (defaults to false). Note: to defer to the specific config setting of
	 * each contained panel for this property, set this to undefined at the
	 * layout level.
	 */
	public Boolean getAnimate() {
		if (null != this.animate) {
			return this.animate;
		}
		ValueExpression _ve = getValueExpression("animate");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>animate</code> property.
	 * </p>
	 */
	public void setAnimate(Boolean animate) {
		this.animate = animate;
		this.handleConfig("animate", animate);
	}

	private Boolean autoWidth;

	/**
	 * True to set each contained item's width to'auto', false to use the item's
	 * current width (defaults to true). Note that some components, in
	 * particular the <a href="output/Ext.grid.GridPanel.html"
	 * ext:cls="Ext.grid.GridPanel">grid</a>, will not function properly within
	 * layouts if they have auto width, so in such cases this config should be
	 * set to false.
	 */
	public Boolean getAutoWidth() {
		if (null != this.autoWidth) {
			return this.autoWidth;
		}
		ValueExpression _ve = getValueExpression("autoWidth");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>autoWidth</code> property.
	 * </p>
	 */
	public void setAutoWidth(Boolean autoWidth) {
		this.autoWidth = autoWidth;
		this.handleConfig("autoWidth", autoWidth);
	}

	private Boolean collapseFirst;

	/**
	 * True to make sure the collapse/expand togglebutton always renders first
	 * (to the left of) any other tools in the contained panels' title bars,
	 * false to render it last (defaults to false).
	 */
	public Boolean getCollapseFirst() {
		if (null != this.collapseFirst) {
			return this.collapseFirst;
		}
		ValueExpression _ve = getValueExpression("collapseFirst");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>collapseFirst</code> property.
	 * </p>
	 */
	public void setCollapseFirst(Boolean collapseFirst) {
		this.collapseFirst = collapseFirst;
		this.handleConfig("collapseFirst", collapseFirst);
	}

	private Boolean fill;

	/**
	 * True to adjust the active item's height to fillthe available space in the
	 * container, false to use the item's current height, or auto height if not
	 * explicitly set (defaults to true).
	 */
	public Boolean getFill() {
		if (null != this.fill) {
			return this.fill;
		}
		ValueExpression _ve = getValueExpression("fill");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>fill</code> property.
	 * </p>
	 */
	public void setFill(Boolean fill) {
		this.fill = fill;
		this.handleConfig("fill", fill);
	}

	private Boolean hideCollapseTool;

	/**
	 * True to hide the contained panels'collapse/expand toggle buttons, false
	 * to display them (defaults to false). When set to true, <a href="output/Ext.layout.AccordionLayout.html#Ext.layout.AccordionLayout-titleCollapse"
	 * ext:member="titleCollapse"
	 * ext:cls="Ext.layout.AccordionLayout">titleCollapse</a> should be true
	 * also.
	 */
	public Boolean getHideCollapseTool() {
		if (null != this.hideCollapseTool) {
			return this.hideCollapseTool;
		}
		ValueExpression _ve = getValueExpression("hideCollapseTool");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>hideCollapseTool</code> property.
	 * </p>
	 */
	public void setHideCollapseTool(Boolean hideCollapseTool) {
		this.hideCollapseTool = hideCollapseTool;
		this.handleConfig("hideCollapseTool", hideCollapseTool);
	}

	private Boolean sequence;

	/**
	 * <b>Experimental</b>. If animate is set to true,this will result in each
	 * animation running in sequence.
	 */
	public Boolean getSequence() {
		if (null != this.sequence) {
			return this.sequence;
		}
		ValueExpression _ve = getValueExpression("sequence");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>sequence</code> property.
	 * </p>
	 */
	public void setSequence(Boolean sequence) {
		this.sequence = sequence;
		this.handleConfig("sequence", sequence);
	}

	private Boolean titleCollapse;

	/**
	 * True to allow expand/collapse of each containedpanel by clicking anywhere
	 * on the title bar, false to allow expand/collapse only when the toggle
	 * tool button is clicked (defaults to true). When set to false, <a href="output/Ext.layout.AccordionLayout.html#Ext.layout.AccordionLayout-hideCollapseTool"
	 * ext:member="hideCollapseTool"
	 * ext:cls="Ext.layout.AccordionLayout">hideCollapseTool</a> should be false
	 * also.
	 */
	public Boolean getTitleCollapse() {
		if (null != this.titleCollapse) {
			return this.titleCollapse;
		}
		ValueExpression _ve = getValueExpression("titleCollapse");
		if (_ve != null) {
			return (Boolean) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>titleCollapse</code> property.
	 * </p>
	 */
	public void setTitleCollapse(Boolean titleCollapse) {
		this.titleCollapse = titleCollapse;
		this.handleConfig("titleCollapse", titleCollapse);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[9];
		}
		_values[0] = super.saveState(_context);
		_values[1] = activeOnTop;
		_values[2] = animate;
		_values[3] = autoWidth;
		_values[4] = collapseFirst;
		_values[5] = fill;
		_values[6] = hideCollapseTool;
		_values[7] = sequence;
		_values[8] = titleCollapse;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.activeOnTop = (Boolean) _values[1];
		this.handleConfig("activeOnTop", this.activeOnTop);
		this.animate = (Boolean) _values[2];
		this.handleConfig("animate", this.animate);
		this.autoWidth = (Boolean) _values[3];
		this.handleConfig("autoWidth", this.autoWidth);
		this.collapseFirst = (Boolean) _values[4];
		this.handleConfig("collapseFirst", this.collapseFirst);
		this.fill = (Boolean) _values[5];
		this.handleConfig("fill", this.fill);
		this.hideCollapseTool = (Boolean) _values[6];
		this.handleConfig("hideCollapseTool", this.hideCollapseTool);
		this.sequence = (Boolean) _values[7];
		this.handleConfig("sequence", this.sequence);
		this.titleCollapse = (Boolean) _values[8];
		this.handleConfig("titleCollapse", this.titleCollapse);

	}
}
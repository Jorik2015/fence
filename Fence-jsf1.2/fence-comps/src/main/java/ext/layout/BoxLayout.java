package ext.layout;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.ClientConfig;
import ext.annotation.InstanceOf;
import ext.annotation.JsonMode;
import ext.annotation.Layout;
import ext.annotation.LayoutType;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * Base Class for HBoxLayout and VBoxLayout Classes. Generally it should not
 * need to be used directly.
 * </p>
 */
@Layout(LayoutType.box)
@InstanceOf("Ext.layout.BoxLayout")
@ParseConfigMode(ui = false, pmode = PersistenceMode.Custom, rmode = ReferenceMode.Config)
public abstract class BoxLayout extends ContainerLayout {
	public static final String COMPONENT_TYPE = "Ext.layout.BoxLayout";
	public static final String COMPONENT_FAMILY = "Ext.layout.BoxLayout";

	/**
	 * <p>
	 * Create a new {@link BoxLayout} instance with default property values.
	 * </p>
	 */
	public BoxLayout() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private Object defaultMargins;

	/**
	 * <p>
	 * If the individual contained items do not have a <tt>margins</tt> property
	 * specified, the default margins from this property will be applied to each
	 * item.
	 * </p>
	 * 
	 * <br>
	 * <p>
	 * This property may be specified as an object containing margins to apply
	 * in the format:
	 * </p>
	 * 
	 * <pre>
	 * &lt;code&gt;{
	 *     top: (top margin),
	 *     right: (right margin),
	 *     bottom: (bottom margin),
	 *     left: (left margin)
	 * }&lt;/code&gt;
	 * </pre>
	 * 
	 * <p>
	 * This property may also be specified as a string containing
	 * space-separated, numeric margin values. The order of the sides associated
	 * with each value matches the way CSS processes margin values:
	 * </p>
	 * 
	 * <div class="mdetail-params">
	 * <ul>
	 * <li>If there is only one value, it applies to all sides.</li>
	 * 
	 * <li>If there are two values, the top and bottom borders are set to the
	 * first value and the right and left are set to the second.</li>
	 * 
	 * <li>If there are three values, the top is set to the first value, the
	 * left and right are set to the second, and the bottom is set to the third.
	 * </li>
	 * 
	 * <li>If there are four values, they apply to the top, right, bottom, and
	 * left, respectively.</li>
	 * </ul>
	 * </div>
	 * 
	 * <p>
	 * Defaults to:
	 * </p>
	 * 
	 * <pre>
	 * &lt;code&gt;{top:0, right:0, bottom:0, left:0}&lt;/code&gt;
	 * </pre>
	 */
	@ClientConfig(JsonMode.Object)
	public Object getDefaultMargins() {
		if (null != this.defaultMargins) {
			return this.defaultMargins;
		}
		ValueExpression _ve = getValueExpression("defaultMargins");
		if (_ve != null) {
			return (Object) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>defaultMargins</code> property.
	 * </p>
	 */
	public void setDefaultMargins(Object defaultMargins) {
		this.defaultMargins = defaultMargins;
		this.handleConfig("defaultMargins", defaultMargins);
	}

	private String padding;

	/**
	 * Defaults to <tt>'0'</tt>. Sets the padding to beapplied to all child
	 * items managed by this container's layout.
	 */
	public String getPadding() {
		if (null != this.padding) {
			return this.padding;
		}
		ValueExpression _ve = getValueExpression("padding");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>padding</code> property.
	 * </p>
	 */
	public void setPadding(String padding) {
		this.padding = padding;
		this.handleConfig("padding", padding);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[3];
		}
		_values[0] = super.saveState(_context);
		_values[1] = defaultMargins;
		_values[2] = padding;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.defaultMargins = (Object) _values[1];
		this.handleConfig("defaultMargins", this.defaultMargins);
		this.padding = (String) _values[2];
		this.handleConfig("padding", this.padding);

	}
}
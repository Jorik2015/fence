package ext.layout;

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;

import ext.annotation.InstanceOf;
import ext.annotation.Layout;
import ext.annotation.LayoutType;
import ext.annotation.ParseConfigMode;
import ext.annotation.PersistenceMode;
import ext.annotation.ReferenceMode;

/**
 *Note:This java code is auto generated by abner,do not edit it.
 * 
 * <p>
 * This is a layout that enables anchoring of contained elements relative to the
 * container's dimensions. If the container is resized, all anchored items are
 * automatically rerendered according to their <b>
 * <tt><a href="output/Ext.layout.AnchorLayout.html#Ext.layout.AnchorLayout-anchor" ext:member="anchor" ext:cls="Ext.layout.AnchorLayout">anchor</a></tt>
 * </b> rules.
 * </p>
 * 
 * <p>
 * This class is intended to be extended or created via the layout:'anchor' <a
 * href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout"
 * ext:cls="Ext.Container">Ext.Container.layout</a> config, and should generally
 * not need to be created directly via the new keyword.
 * </p>
 * 
 * <p>
 * AnchorLayout does not have any direct config options (other than inherited
 * ones). By default, AnchorLayout will calculate anchor measurements based on
 * the size of the container itself. However, the container using the
 * AnchorLayout can supply an anchoring-specific config property of
 * <b>anchorSize</b>. If anchorSize is specifed, the layout will use it as a
 * virtual container for the purposes of calculating anchor measurements based
 * on it instead, allowing the container to be sized independently of the
 * anchoring logic if necessary. For example:
 * </p>
 * 
 * <pre>
 * &lt;code&gt;&lt;b&gt;var&lt;/b&gt; viewport = &lt;b&gt;new&lt;/b&gt; Ext.Viewport({
 *     layout:&lt;em&gt;'anchor'&lt;/em&gt;,
 *     anchorSize: {width:800, height:600},
 *     items:[{
 *         title:&lt;em&gt;'Item 1'&lt;/em&gt;,
 *         html:&lt;em&gt;'Content 1'&lt;/em&gt;,
 *         width:800,
 *         anchor:&lt;em&gt;'right 20%'&lt;/em&gt;
 *     },{
 *         title:&lt;em&gt;'Item 2'&lt;/em&gt;,
 *         html:&lt;em&gt;'Content 2'&lt;/em&gt;,
 *         width:300,
 *         anchor:&lt;em&gt;'50% 30%'&lt;/em&gt;
 *     },{
 *         title:&lt;em&gt;'Item 3'&lt;/em&gt;,
 *         html:&lt;em&gt;'Content 3'&lt;/em&gt;,
 *         width:600,
 *         anchor:&lt;em&gt;'-100 50%'&lt;/em&gt;
 *     }]
 * });&lt;/code&gt;
 * </pre>
 */
@Layout(LayoutType.anchor)
@InstanceOf("Ext.layout.AnchorLayout")
@ParseConfigMode(ui = false, pmode = PersistenceMode.InnerProperty, rmode = ReferenceMode.Config)
public class AnchorLayout extends ContainerLayout {
	public static final String COMPONENT_TYPE = "Ext.layout.AnchorLayout";
	public static final String COMPONENT_FAMILY = "Ext.layout.AnchorLayout";

	/**
	 * <p>
	 * Create a new {@link AnchorLayout} instance with default property values.
	 * </p>
	 */
	public AnchorLayout() {
		super();
		setRendererType(COMPONENT_FAMILY);
	}

	public String getFamily() {
		return (COMPONENT_FAMILY);
	}

	private String anchor;

	/**
	 * <p>
	 * This configuation option is to be applied to <b>child <tt>items</tt></b>
	 * of a container managed by this layout (ie. configured with <tt>layout:'anchor'</tt>).
	 * </p>
	 * 
	 * <br>
	 * <p>
	 * This value is what tells the layout how an item should be anchored to the
	 * container. <tt>items</tt> added to an AnchorLayout accept an
	 * anchoring-specific config property of <b>anchor</b> which is a string
	 * containing two values: the horizontal anchor value and the vertical
	 * anchor value (for example, '100% 50%'). The following types of anchor
	 * values are supported:
	 * </p>
	 * 
	 * <div class="mdetail-params">
	 * <ul>
	 * <li><b>Percentage</b> : Any value between 1 and 100, expressed as a
	 * percentage.
	 * 
	 * <div class="sub-desc">The first anchor is the percentage width that the
	 * item should take up within the container, and the second is the
	 * percentage height. For example:
	 * 
	 * <pre>
	 * &lt;code&gt;&lt;i&gt;// two values specified
	 * &lt;/i&gt;
	 * anchor: &lt;em&gt;'100% 50%'&lt;/em&gt; &lt;i&gt;// render item complete width of the container and
	 * &lt;/i&gt;
	 *                    &lt;i&gt;// 1/2 height of the container
	 * &lt;/i&gt;
	 * &lt;i&gt;// one value specified
	 * &lt;/i&gt;
	 * anchor: &lt;em&gt;'100%'&lt;/em&gt;     &lt;i&gt;// the width value; the height will &lt;b&gt;default&lt;/b&gt; to auto&lt;/i&gt;&lt;/code&gt;
	 * </pre>
	 * 
	 * </div></li>
	 * 
	 * <li><b>Offsets</b> : Any positive or negative integer value.
	 * 
	 * <div class="sub-desc">This is a raw adjustment where the first anchor is
	 * the offset from the right edge of the container, and the second is the
	 * offset from the bottom edge. For example:
	 * 
	 * <pre>
	 * &lt;code&gt;&lt;i&gt;// two values specified
	 * &lt;/i&gt;
	 * anchor: &lt;em&gt;'-50 -100'&lt;/em&gt; &lt;i&gt;// render item the complete width of the container
	 * &lt;/i&gt;
	 *                    &lt;i&gt;// minus 50 pixels and
	 * &lt;/i&gt;
	 *                    &lt;i&gt;// the complete height minus 100 pixels.
	 * &lt;/i&gt;
	 * &lt;i&gt;// one value specified
	 * &lt;/i&gt;
	 * anchor: &lt;em&gt;'-50'&lt;/em&gt;      &lt;i&gt;// anchor value is assumed to be the right offset value
	 * &lt;/i&gt;
	 *                    &lt;i&gt;// bottom offset will &lt;b&gt;default&lt;/b&gt; to 0&lt;/i&gt;&lt;/code&gt;
	 * </pre>
	 * 
	 * </div></li>
	 * 
	 * <li><b>Sides</b> : Valid values are <tt>'right'</tt> (or <tt>'r'</tt>) and <tt>'bottom'</tt> (or
	 * <tt>'b'</tt>).
	 * 
	 * <div class="sub-desc">Either the container must have a fixed size or an
	 * anchorSize config value defined at render time in order for these to have
	 * any effect.</div></li>
	 * 
	 * <li><b>Mixed</b> :
	 * 
	 * <div class="sub-desc">Anchor values can also be mixed as needed. For
	 * example, to render the width offset from the container right edge by 50
	 * pixels and 75% of the container's height use:
	 * 
	 * <pre>
	 * &lt;code&gt;anchor: &lt;em&gt;'-50 75%'&lt;/em&gt;&lt;/code&gt;
	 * </pre>
	 * 
	 * </div></li>
	 * </ul>
	 * </div>
	 */
	public String getAnchor() {
		if (null != this.anchor) {
			return this.anchor;
		}
		ValueExpression _ve = getValueExpression("anchor");
		if (_ve != null) {
			return (String) _ve.getValue(getFacesContext().getELContext());
		} else {
			return null;
		}
	}

	/**
	 * <p>
	 * Set the value of the <code>anchor</code> property.
	 * </p>
	 */
	public void setAnchor(String anchor) {
		this.anchor = anchor;
		this.handleConfig("anchor", anchor);
	}

	private Object[] _values;

	public Object saveState(FacesContext _context) {
		if (_values == null) {
			_values = new Object[2];
		}
		_values[0] = super.saveState(_context);
		_values[1] = anchor;

		return _values;
	}

	public void restoreState(FacesContext _context, Object _state) {
		_values = (Object[]) _state;
		super.restoreState(_context, _values[0]);
		this.anchor = (String) _values[1];
		this.handleConfig("anchor", this.anchor);

	}
}